// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class EnterMapRotationRegionScRspOuterClass {
  /**
   * Protobuf type {@code EnterMapRotationRegionScRsp}
   */
  public static final class EnterMapRotationRegionScRsp extends ProtoMessage<EnterMapRotationRegionScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 client_pos_version = 2;</code>
     */
    private int clientPosVersion;

    /**
     * <code>optional uint32 BJPBAJECKFO = 8;</code>
     */
    private int bJPBAJECKFO;

    /**
     * <code>optional uint32 HDEHHKEMOCD = 12;</code>
     */
    private int hDEHHKEMOCD;

    /**
     * <code>optional uint32 retcode = 15;</code>
     */
    private int retcode;

    /**
     * <code>optional .MotionInfo motion = 6;</code>
     */
    private final MotionInfoOuterClass.MotionInfo motion = MotionInfoOuterClass.MotionInfo.newInstance();

    /**
     * <code>optional .RotatorEnergyInfo energy_info = 14;</code>
     */
    private final RotatorEnergyInfoOuterClass.RotatorEnergyInfo energyInfo = RotatorEnergyInfoOuterClass.RotatorEnergyInfo.newInstance();

    private EnterMapRotationRegionScRsp() {
    }

    /**
     * @return a new empty instance of {@code EnterMapRotationRegionScRsp}
     */
    public static EnterMapRotationRegionScRsp newInstance() {
      return new EnterMapRotationRegionScRsp();
    }

    /**
     * <code>optional uint32 client_pos_version = 2;</code>
     * @return whether the clientPosVersion field is set
     */
    public boolean hasClientPosVersion() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 client_pos_version = 2;</code>
     * @return this
     */
    public EnterMapRotationRegionScRsp clearClientPosVersion() {
      bitField0_ &= ~0x00000001;
      clientPosVersion = 0;
      return this;
    }

    /**
     * <code>optional uint32 client_pos_version = 2;</code>
     * @return the clientPosVersion
     */
    public int getClientPosVersion() {
      return clientPosVersion;
    }

    /**
     * <code>optional uint32 client_pos_version = 2;</code>
     * @param value the clientPosVersion to set
     * @return this
     */
    public EnterMapRotationRegionScRsp setClientPosVersion(final int value) {
      bitField0_ |= 0x00000001;
      clientPosVersion = value;
      return this;
    }

    /**
     * <code>optional uint32 BJPBAJECKFO = 8;</code>
     * @return whether the bJPBAJECKFO field is set
     */
    public boolean hasBJPBAJECKFO() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 BJPBAJECKFO = 8;</code>
     * @return this
     */
    public EnterMapRotationRegionScRsp clearBJPBAJECKFO() {
      bitField0_ &= ~0x00000002;
      bJPBAJECKFO = 0;
      return this;
    }

    /**
     * <code>optional uint32 BJPBAJECKFO = 8;</code>
     * @return the bJPBAJECKFO
     */
    public int getBJPBAJECKFO() {
      return bJPBAJECKFO;
    }

    /**
     * <code>optional uint32 BJPBAJECKFO = 8;</code>
     * @param value the bJPBAJECKFO to set
     * @return this
     */
    public EnterMapRotationRegionScRsp setBJPBAJECKFO(final int value) {
      bitField0_ |= 0x00000002;
      bJPBAJECKFO = value;
      return this;
    }

    /**
     * <code>optional uint32 HDEHHKEMOCD = 12;</code>
     * @return whether the hDEHHKEMOCD field is set
     */
    public boolean hasHDEHHKEMOCD() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 HDEHHKEMOCD = 12;</code>
     * @return this
     */
    public EnterMapRotationRegionScRsp clearHDEHHKEMOCD() {
      bitField0_ &= ~0x00000004;
      hDEHHKEMOCD = 0;
      return this;
    }

    /**
     * <code>optional uint32 HDEHHKEMOCD = 12;</code>
     * @return the hDEHHKEMOCD
     */
    public int getHDEHHKEMOCD() {
      return hDEHHKEMOCD;
    }

    /**
     * <code>optional uint32 HDEHHKEMOCD = 12;</code>
     * @param value the hDEHHKEMOCD to set
     * @return this
     */
    public EnterMapRotationRegionScRsp setHDEHHKEMOCD(final int value) {
      bitField0_ |= 0x00000004;
      hDEHHKEMOCD = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @return this
     */
    public EnterMapRotationRegionScRsp clearRetcode() {
      bitField0_ &= ~0x00000008;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @param value the retcode to set
     * @return this
     */
    public EnterMapRotationRegionScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000008;
      retcode = value;
      return this;
    }

    /**
     * <code>optional .MotionInfo motion = 6;</code>
     * @return whether the motion field is set
     */
    public boolean hasMotion() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .MotionInfo motion = 6;</code>
     * @return this
     */
    public EnterMapRotationRegionScRsp clearMotion() {
      bitField0_ &= ~0x00000010;
      motion.clear();
      return this;
    }

    /**
     * <code>optional .MotionInfo motion = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMotion()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public MotionInfoOuterClass.MotionInfo getMotion() {
      return motion;
    }

    /**
     * <code>optional .MotionInfo motion = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public MotionInfoOuterClass.MotionInfo getMutableMotion() {
      bitField0_ |= 0x00000010;
      return motion;
    }

    /**
     * <code>optional .MotionInfo motion = 6;</code>
     * @param value the motion to set
     * @return this
     */
    public EnterMapRotationRegionScRsp setMotion(final MotionInfoOuterClass.MotionInfo value) {
      bitField0_ |= 0x00000010;
      motion.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RotatorEnergyInfo energy_info = 14;</code>
     * @return whether the energyInfo field is set
     */
    public boolean hasEnergyInfo() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional .RotatorEnergyInfo energy_info = 14;</code>
     * @return this
     */
    public EnterMapRotationRegionScRsp clearEnergyInfo() {
      bitField0_ &= ~0x00000020;
      energyInfo.clear();
      return this;
    }

    /**
     * <code>optional .RotatorEnergyInfo energy_info = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEnergyInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RotatorEnergyInfoOuterClass.RotatorEnergyInfo getEnergyInfo() {
      return energyInfo;
    }

    /**
     * <code>optional .RotatorEnergyInfo energy_info = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RotatorEnergyInfoOuterClass.RotatorEnergyInfo getMutableEnergyInfo() {
      bitField0_ |= 0x00000020;
      return energyInfo;
    }

    /**
     * <code>optional .RotatorEnergyInfo energy_info = 14;</code>
     * @param value the energyInfo to set
     * @return this
     */
    public EnterMapRotationRegionScRsp setEnergyInfo(
        final RotatorEnergyInfoOuterClass.RotatorEnergyInfo value) {
      bitField0_ |= 0x00000020;
      energyInfo.copyFrom(value);
      return this;
    }

    @Override
    public EnterMapRotationRegionScRsp copyFrom(final EnterMapRotationRegionScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        clientPosVersion = other.clientPosVersion;
        bJPBAJECKFO = other.bJPBAJECKFO;
        hDEHHKEMOCD = other.hDEHHKEMOCD;
        retcode = other.retcode;
        motion.copyFrom(other.motion);
        energyInfo.copyFrom(other.energyInfo);
      }
      return this;
    }

    @Override
    public EnterMapRotationRegionScRsp mergeFrom(final EnterMapRotationRegionScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasClientPosVersion()) {
        setClientPosVersion(other.clientPosVersion);
      }
      if (other.hasBJPBAJECKFO()) {
        setBJPBAJECKFO(other.bJPBAJECKFO);
      }
      if (other.hasHDEHHKEMOCD()) {
        setHDEHHKEMOCD(other.hDEHHKEMOCD);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasMotion()) {
        getMutableMotion().mergeFrom(other.motion);
      }
      if (other.hasEnergyInfo()) {
        getMutableEnergyInfo().mergeFrom(other.energyInfo);
      }
      return this;
    }

    @Override
    public EnterMapRotationRegionScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      clientPosVersion = 0;
      bJPBAJECKFO = 0;
      hDEHHKEMOCD = 0;
      retcode = 0;
      motion.clear();
      energyInfo.clear();
      return this;
    }

    @Override
    public EnterMapRotationRegionScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      motion.clearQuick();
      energyInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof EnterMapRotationRegionScRsp)) {
        return false;
      }
      EnterMapRotationRegionScRsp other = (EnterMapRotationRegionScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasClientPosVersion() || clientPosVersion == other.clientPosVersion)
        && (!hasBJPBAJECKFO() || bJPBAJECKFO == other.bJPBAJECKFO)
        && (!hasHDEHHKEMOCD() || hDEHHKEMOCD == other.hDEHHKEMOCD)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasMotion() || motion.equals(other.motion))
        && (!hasEnergyInfo() || energyInfo.equals(other.energyInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(clientPosVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(bJPBAJECKFO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(hDEHHKEMOCD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(motion);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(energyInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(clientPosVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bJPBAJECKFO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(hDEHHKEMOCD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(motion);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(energyInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public EnterMapRotationRegionScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // clientPosVersion
            clientPosVersion = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // bJPBAJECKFO
            bJPBAJECKFO = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // hDEHHKEMOCD
            hDEHHKEMOCD = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // motion
            input.readMessage(motion);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // energyInfo
            input.readMessage(energyInfo);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.clientPosVersion, clientPosVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.bJPBAJECKFO, bJPBAJECKFO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.hDEHHKEMOCD, hDEHHKEMOCD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.motion, motion);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeMessage(FieldNames.energyInfo, energyInfo);
      }
      output.endObject();
    }

    @Override
    public EnterMapRotationRegionScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1787644431:
          case 1278860153: {
            if (input.isAtField(FieldNames.clientPosVersion)) {
              if (!input.trySkipNullValue()) {
                clientPosVersion = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 239640819: {
            if (input.isAtField(FieldNames.bJPBAJECKFO)) {
              if (!input.trySkipNullValue()) {
                bJPBAJECKFO = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1447527590: {
            if (input.isAtField(FieldNames.hDEHHKEMOCD)) {
              if (!input.trySkipNullValue()) {
                hDEHHKEMOCD = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1068318794: {
            if (input.isAtField(FieldNames.motion)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(motion);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1464698710:
          case -1818804219: {
            if (input.isAtField(FieldNames.energyInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(energyInfo);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public EnterMapRotationRegionScRsp clone() {
      return new EnterMapRotationRegionScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static EnterMapRotationRegionScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new EnterMapRotationRegionScRsp(), data).checkInitialized();
    }

    public static EnterMapRotationRegionScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new EnterMapRotationRegionScRsp(), input).checkInitialized();
    }

    public static EnterMapRotationRegionScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new EnterMapRotationRegionScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating EnterMapRotationRegionScRsp messages
     */
    public static MessageFactory<EnterMapRotationRegionScRsp> getFactory() {
      return EnterMapRotationRegionScRspFactory.INSTANCE;
    }

    private enum EnterMapRotationRegionScRspFactory implements MessageFactory<EnterMapRotationRegionScRsp> {
      INSTANCE;

      @Override
      public EnterMapRotationRegionScRsp create() {
        return EnterMapRotationRegionScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName clientPosVersion = FieldName.forField("clientPosVersion", "client_pos_version");

      static final FieldName bJPBAJECKFO = FieldName.forField("BJPBAJECKFO");

      static final FieldName hDEHHKEMOCD = FieldName.forField("HDEHHKEMOCD");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName motion = FieldName.forField("motion");

      static final FieldName energyInfo = FieldName.forField("energyInfo", "energy_info");
    }
  }
}
