// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class BattleEventBattleInfoOuterClass {
  /**
   * Protobuf type {@code BattleEventBattleInfo}
   */
  public static final class BattleEventBattleInfo extends ProtoMessage<BattleEventBattleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  FLDLEOPCEFM
     * </pre>
     *
     * <code>optional uint32 battle_event_id = 1;</code>
     */
    private int battleEventId;

    /**
     * <code>optional .BattleEventInitedData status = 2;</code>
     */
    private final BattleEventInitedDataOuterClass.BattleEventInitedData status = BattleEventInitedDataOuterClass.BattleEventInitedData.newInstance();

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     */
    private final RepeatedMessage<BattleSkillInfoOuterClass.BattleSkillInfo> nJODLNCNPNF = RepeatedMessage.newEmptyInstance(BattleSkillInfoOuterClass.BattleSkillInfo.getFactory());

    private BattleEventBattleInfo() {
    }

    /**
     * @return a new empty instance of {@code BattleEventBattleInfo}
     */
    public static BattleEventBattleInfo newInstance() {
      return new BattleEventBattleInfo();
    }

    /**
     * <pre>
     *  FLDLEOPCEFM
     * </pre>
     *
     * <code>optional uint32 battle_event_id = 1;</code>
     * @return whether the battleEventId field is set
     */
    public boolean hasBattleEventId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  FLDLEOPCEFM
     * </pre>
     *
     * <code>optional uint32 battle_event_id = 1;</code>
     * @return this
     */
    public BattleEventBattleInfo clearBattleEventId() {
      bitField0_ &= ~0x00000001;
      battleEventId = 0;
      return this;
    }

    /**
     * <pre>
     *  FLDLEOPCEFM
     * </pre>
     *
     * <code>optional uint32 battle_event_id = 1;</code>
     * @return the battleEventId
     */
    public int getBattleEventId() {
      return battleEventId;
    }

    /**
     * <pre>
     *  FLDLEOPCEFM
     * </pre>
     *
     * <code>optional uint32 battle_event_id = 1;</code>
     * @param value the battleEventId to set
     * @return this
     */
    public BattleEventBattleInfo setBattleEventId(final int value) {
      bitField0_ |= 0x00000001;
      battleEventId = value;
      return this;
    }

    /**
     * <code>optional .BattleEventInitedData status = 2;</code>
     * @return whether the status field is set
     */
    public boolean hasStatus() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .BattleEventInitedData status = 2;</code>
     * @return this
     */
    public BattleEventBattleInfo clearStatus() {
      bitField0_ &= ~0x00000002;
      status.clear();
      return this;
    }

    /**
     * <code>optional .BattleEventInitedData status = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableStatus()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public BattleEventInitedDataOuterClass.BattleEventInitedData getStatus() {
      return status;
    }

    /**
     * <code>optional .BattleEventInitedData status = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public BattleEventInitedDataOuterClass.BattleEventInitedData getMutableStatus() {
      bitField0_ |= 0x00000002;
      return status;
    }

    /**
     * <code>optional .BattleEventInitedData status = 2;</code>
     * @param value the status to set
     * @return this
     */
    public BattleEventBattleInfo setStatus(
        final BattleEventInitedDataOuterClass.BattleEventInitedData value) {
      bitField0_ |= 0x00000002;
      status.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     * @return whether the nJODLNCNPNF field is set
     */
    public boolean hasNJODLNCNPNF() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     * @return this
     */
    public BattleEventBattleInfo clearNJODLNCNPNF() {
      bitField0_ &= ~0x00000004;
      nJODLNCNPNF.clear();
      return this;
    }

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableNJODLNCNPNF()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleSkillInfoOuterClass.BattleSkillInfo> getNJODLNCNPNF() {
      return nJODLNCNPNF;
    }

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleSkillInfoOuterClass.BattleSkillInfo> getMutableNJODLNCNPNF() {
      bitField0_ |= 0x00000004;
      return nJODLNCNPNF;
    }

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     * @param value the nJODLNCNPNF to add
     * @return this
     */
    public BattleEventBattleInfo addNJODLNCNPNF(
        final BattleSkillInfoOuterClass.BattleSkillInfo value) {
      bitField0_ |= 0x00000004;
      nJODLNCNPNF.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleSkillInfo NJODLNCNPNF = 3;</code>
     * @param values the nJODLNCNPNF to add
     * @return this
     */
    public BattleEventBattleInfo addAllNJODLNCNPNF(
        final BattleSkillInfoOuterClass.BattleSkillInfo... values) {
      bitField0_ |= 0x00000004;
      nJODLNCNPNF.addAll(values);
      return this;
    }

    @Override
    public BattleEventBattleInfo copyFrom(final BattleEventBattleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        battleEventId = other.battleEventId;
        status.copyFrom(other.status);
        nJODLNCNPNF.copyFrom(other.nJODLNCNPNF);
      }
      return this;
    }

    @Override
    public BattleEventBattleInfo mergeFrom(final BattleEventBattleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBattleEventId()) {
        setBattleEventId(other.battleEventId);
      }
      if (other.hasStatus()) {
        getMutableStatus().mergeFrom(other.status);
      }
      if (other.hasNJODLNCNPNF()) {
        getMutableNJODLNCNPNF().addAll(other.nJODLNCNPNF);
      }
      return this;
    }

    @Override
    public BattleEventBattleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      battleEventId = 0;
      status.clear();
      nJODLNCNPNF.clear();
      return this;
    }

    @Override
    public BattleEventBattleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      status.clearQuick();
      nJODLNCNPNF.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof BattleEventBattleInfo)) {
        return false;
      }
      BattleEventBattleInfo other = (BattleEventBattleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasBattleEventId() || battleEventId == other.battleEventId)
        && (!hasStatus() || status.equals(other.status))
        && (!hasNJODLNCNPNF() || nJODLNCNPNF.equals(other.nJODLNCNPNF));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(battleEventId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(status);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < nJODLNCNPNF.length(); i++) {
          output.writeRawByte((byte) 26);
          output.writeMessageNoTag(nJODLNCNPNF.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(battleEventId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(status);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * nJODLNCNPNF.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(nJODLNCNPNF);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public BattleEventBattleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // battleEventId
            battleEventId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // status
            input.readMessage(status);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // nJODLNCNPNF
            tag = input.readRepeatedMessage(nJODLNCNPNF, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.battleEventId, battleEventId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.status, status);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.nJODLNCNPNF, nJODLNCNPNF);
      }
      output.endObject();
    }

    @Override
    public BattleEventBattleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -79510147:
          case -766250873: {
            if (input.isAtField(FieldNames.battleEventId)) {
              if (!input.trySkipNullValue()) {
                battleEventId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -892481550: {
            if (input.isAtField(FieldNames.status)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(status);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1860190262: {
            if (input.isAtField(FieldNames.nJODLNCNPNF)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(nJODLNCNPNF);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public BattleEventBattleInfo clone() {
      return new BattleEventBattleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static BattleEventBattleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new BattleEventBattleInfo(), data).checkInitialized();
    }

    public static BattleEventBattleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleEventBattleInfo(), input).checkInitialized();
    }

    public static BattleEventBattleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleEventBattleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating BattleEventBattleInfo messages
     */
    public static MessageFactory<BattleEventBattleInfo> getFactory() {
      return BattleEventBattleInfoFactory.INSTANCE;
    }

    private enum BattleEventBattleInfoFactory implements MessageFactory<BattleEventBattleInfo> {
      INSTANCE;

      @Override
      public BattleEventBattleInfo create() {
        return BattleEventBattleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName battleEventId = FieldName.forField("battleEventId", "battle_event_id");

      static final FieldName status = FieldName.forField("status");

      static final FieldName nJODLNCNPNF = FieldName.forField("NJODLNCNPNF");
    }
  }
}
