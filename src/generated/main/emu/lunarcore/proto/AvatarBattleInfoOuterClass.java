// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;
import us.hebi.quickbuf.RepeatedMessage;

public final class AvatarBattleInfoOuterClass {
  /**
   * Protobuf type {@code AvatarBattleInfo}
   */
  public static final class AvatarBattleInfo extends ProtoMessage<AvatarBattleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    private int bitField1_;

    /**
     * <code>optional double total_damage = 10;</code>
     */
    private double totalDamage;

    /**
     * <code>optional double total_heal = 11;</code>
     */
    private double totalHeal;

    /**
     * <code>optional double total_damage_taken = 12;</code>
     */
    private double totalDamageTaken;

    /**
     * <code>optional double total_hp_recover = 13;</code>
     */
    private double totalHpRecover;

    /**
     * <code>optional double total_sp_cost = 14;</code>
     */
    private double totalSpCost;

    /**
     * <code>optional double total_break_damage = 17;</code>
     */
    private double totalBreakDamage;

    /**
     * <pre>
     * repeated AttackDamageProperty attack_type_damage = 18;
     * repeated AttackDamageProperty attack_type_break_damage = 19;
     * repeated AttackDamageProperty attack_type_max_damage = 20;
     * repeated SkillUseProperty skill_times = 21;
     * </pre>
     *
     * <code>optional double delay_cumulate = 22;</code>
     */
    private double delayCumulate;

    /**
     * <code>optional double total_shield = 30;</code>
     */
    private double totalShield;

    /**
     * <code>optional double total_shield_taken = 31;</code>
     */
    private double totalShieldTaken;

    /**
     * <code>optional double total_shield_damage = 32;</code>
     */
    private double totalShieldDamage;

    /**
     * <pre>
     * repeated AttackDamageProperty MPMGIACFGOA = 36;
     * </pre>
     *
     * <code>optional double GPHGHLGHNJF = 37;</code>
     */
    private double gPHGHLGHNJF;

    /**
     * <code>optional double HNMAEDKEMEO = 38;</code>
     */
    private double hNMAEDKEMEO;

    /**
     * <code>optional double KOKGBDEJBHL = 39;</code>
     */
    private double kOKGBDEJBHL;

    /**
     * <code>optional double FIICHEILPCF = 40;</code>
     */
    private double fIICHEILPCF;

    /**
     * <code>optional uint32 id = 2;</code>
     */
    private int id;

    /**
     * <code>optional uint32 avatar_level = 3;</code>
     */
    private int avatarLevel;

    /**
     * <code>optional uint32 avatar_rank = 4;</code>
     */
    private int avatarRank;

    /**
     * <code>optional uint32 avatar_promotion = 5;</code>
     */
    private int avatarPromotion;

    /**
     * <pre>
     * repeated EquipmentProperty avatar_equipment = 8;
     * </pre>
     *
     * <code>optional uint32 total_turns = 9;</code>
     */
    private int totalTurns;

    /**
     * <code>optional uint32 stage_id = 15;</code>
     */
    private int stageId;

    /**
     * <code>optional uint32 stage_type = 16;</code>
     */
    private int stageType;

    /**
     * <code>optional uint32 total_sp_add = 23;</code>
     */
    private int totalSpAdd;

    /**
     * <code>optional uint32 total_bp_cost = 25;</code>
     */
    private int totalBpCost;

    /**
     * <code>optional uint32 die_times = 26;</code>
     */
    private int dieTimes;

    /**
     * <code>optional uint32 revive_times = 27;</code>
     */
    private int reviveTimes;

    /**
     * <code>optional uint32 break_times = 28;</code>
     */
    private int breakTimes;

    /**
     * <code>optional uint32 extra_turns = 29;</code>
     */
    private int extraTurns;

    /**
     * <code>optional uint32 assist_uid = 35;</code>
     */
    private int assistUid;

    /**
     * <pre>
     * repeated AbilityUseStt EAONALFPOGL = 41;
     * </pre>
     *
     * <code>optional uint32 EINCNMLBFJD = 42;</code>
     */
    private int eINCNMLBFJD;

    /**
     * <code>optional uint32 JMOJBLEELFJ = 43;</code>
     */
    private int jMOJBLEELFJ;

    /**
     * <code>optional .AvatarType avatar_type = 1;</code>
     */
    private int avatarType;

    /**
     * <code>optional .AvatarProperty avatar_status = 6;</code>
     */
    private final AvatarPropertyOuterClass.AvatarProperty avatarStatus = AvatarPropertyOuterClass.AvatarProperty.newInstance();

    /**
     * <code>optional .AvatarProperty initial_status = 33;</code>
     */
    private final AvatarPropertyOuterClass.AvatarProperty initialStatus = AvatarPropertyOuterClass.AvatarProperty.newInstance();

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     */
    private final RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> avatarSkill = RepeatedMessage.newEmptyInstance(AvatarSkillTreeOuterClass.AvatarSkillTree.getFactory());

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     */
    private final RepeatedMessage<SpAddSourceOuterClass.SpAddSource> spAddSource = RepeatedMessage.newEmptyInstance(SpAddSourceOuterClass.SpAddSource.getFactory());

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     */
    private final RepeatedMessage<BattleRelicOuterClass.BattleRelic> battleRelicList = RepeatedMessage.newEmptyInstance(BattleRelicOuterClass.BattleRelic.getFactory());

    private AvatarBattleInfo() {
    }

    /**
     * @return a new empty instance of {@code AvatarBattleInfo}
     */
    public static AvatarBattleInfo newInstance() {
      return new AvatarBattleInfo();
    }

    /**
     * <code>optional double total_damage = 10;</code>
     * @return whether the totalDamage field is set
     */
    public boolean hasTotalDamage() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional double total_damage = 10;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalDamage() {
      bitField0_ &= ~0x00000001;
      totalDamage = 0D;
      return this;
    }

    /**
     * <code>optional double total_damage = 10;</code>
     * @return the totalDamage
     */
    public double getTotalDamage() {
      return totalDamage;
    }

    /**
     * <code>optional double total_damage = 10;</code>
     * @param value the totalDamage to set
     * @return this
     */
    public AvatarBattleInfo setTotalDamage(final double value) {
      bitField0_ |= 0x00000001;
      totalDamage = value;
      return this;
    }

    /**
     * <code>optional double total_heal = 11;</code>
     * @return whether the totalHeal field is set
     */
    public boolean hasTotalHeal() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional double total_heal = 11;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalHeal() {
      bitField0_ &= ~0x00000002;
      totalHeal = 0D;
      return this;
    }

    /**
     * <code>optional double total_heal = 11;</code>
     * @return the totalHeal
     */
    public double getTotalHeal() {
      return totalHeal;
    }

    /**
     * <code>optional double total_heal = 11;</code>
     * @param value the totalHeal to set
     * @return this
     */
    public AvatarBattleInfo setTotalHeal(final double value) {
      bitField0_ |= 0x00000002;
      totalHeal = value;
      return this;
    }

    /**
     * <code>optional double total_damage_taken = 12;</code>
     * @return whether the totalDamageTaken field is set
     */
    public boolean hasTotalDamageTaken() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional double total_damage_taken = 12;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalDamageTaken() {
      bitField0_ &= ~0x00000004;
      totalDamageTaken = 0D;
      return this;
    }

    /**
     * <code>optional double total_damage_taken = 12;</code>
     * @return the totalDamageTaken
     */
    public double getTotalDamageTaken() {
      return totalDamageTaken;
    }

    /**
     * <code>optional double total_damage_taken = 12;</code>
     * @param value the totalDamageTaken to set
     * @return this
     */
    public AvatarBattleInfo setTotalDamageTaken(final double value) {
      bitField0_ |= 0x00000004;
      totalDamageTaken = value;
      return this;
    }

    /**
     * <code>optional double total_hp_recover = 13;</code>
     * @return whether the totalHpRecover field is set
     */
    public boolean hasTotalHpRecover() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional double total_hp_recover = 13;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalHpRecover() {
      bitField0_ &= ~0x00000008;
      totalHpRecover = 0D;
      return this;
    }

    /**
     * <code>optional double total_hp_recover = 13;</code>
     * @return the totalHpRecover
     */
    public double getTotalHpRecover() {
      return totalHpRecover;
    }

    /**
     * <code>optional double total_hp_recover = 13;</code>
     * @param value the totalHpRecover to set
     * @return this
     */
    public AvatarBattleInfo setTotalHpRecover(final double value) {
      bitField0_ |= 0x00000008;
      totalHpRecover = value;
      return this;
    }

    /**
     * <code>optional double total_sp_cost = 14;</code>
     * @return whether the totalSpCost field is set
     */
    public boolean hasTotalSpCost() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional double total_sp_cost = 14;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalSpCost() {
      bitField0_ &= ~0x00000010;
      totalSpCost = 0D;
      return this;
    }

    /**
     * <code>optional double total_sp_cost = 14;</code>
     * @return the totalSpCost
     */
    public double getTotalSpCost() {
      return totalSpCost;
    }

    /**
     * <code>optional double total_sp_cost = 14;</code>
     * @param value the totalSpCost to set
     * @return this
     */
    public AvatarBattleInfo setTotalSpCost(final double value) {
      bitField0_ |= 0x00000010;
      totalSpCost = value;
      return this;
    }

    /**
     * <code>optional double total_break_damage = 17;</code>
     * @return whether the totalBreakDamage field is set
     */
    public boolean hasTotalBreakDamage() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional double total_break_damage = 17;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalBreakDamage() {
      bitField0_ &= ~0x00000020;
      totalBreakDamage = 0D;
      return this;
    }

    /**
     * <code>optional double total_break_damage = 17;</code>
     * @return the totalBreakDamage
     */
    public double getTotalBreakDamage() {
      return totalBreakDamage;
    }

    /**
     * <code>optional double total_break_damage = 17;</code>
     * @param value the totalBreakDamage to set
     * @return this
     */
    public AvatarBattleInfo setTotalBreakDamage(final double value) {
      bitField0_ |= 0x00000020;
      totalBreakDamage = value;
      return this;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty attack_type_damage = 18;
     * repeated AttackDamageProperty attack_type_break_damage = 19;
     * repeated AttackDamageProperty attack_type_max_damage = 20;
     * repeated SkillUseProperty skill_times = 21;
     * </pre>
     *
     * <code>optional double delay_cumulate = 22;</code>
     * @return whether the delayCumulate field is set
     */
    public boolean hasDelayCumulate() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty attack_type_damage = 18;
     * repeated AttackDamageProperty attack_type_break_damage = 19;
     * repeated AttackDamageProperty attack_type_max_damage = 20;
     * repeated SkillUseProperty skill_times = 21;
     * </pre>
     *
     * <code>optional double delay_cumulate = 22;</code>
     * @return this
     */
    public AvatarBattleInfo clearDelayCumulate() {
      bitField0_ &= ~0x00000040;
      delayCumulate = 0D;
      return this;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty attack_type_damage = 18;
     * repeated AttackDamageProperty attack_type_break_damage = 19;
     * repeated AttackDamageProperty attack_type_max_damage = 20;
     * repeated SkillUseProperty skill_times = 21;
     * </pre>
     *
     * <code>optional double delay_cumulate = 22;</code>
     * @return the delayCumulate
     */
    public double getDelayCumulate() {
      return delayCumulate;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty attack_type_damage = 18;
     * repeated AttackDamageProperty attack_type_break_damage = 19;
     * repeated AttackDamageProperty attack_type_max_damage = 20;
     * repeated SkillUseProperty skill_times = 21;
     * </pre>
     *
     * <code>optional double delay_cumulate = 22;</code>
     * @param value the delayCumulate to set
     * @return this
     */
    public AvatarBattleInfo setDelayCumulate(final double value) {
      bitField0_ |= 0x00000040;
      delayCumulate = value;
      return this;
    }

    /**
     * <code>optional double total_shield = 30;</code>
     * @return whether the totalShield field is set
     */
    public boolean hasTotalShield() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional double total_shield = 30;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalShield() {
      bitField0_ &= ~0x00000080;
      totalShield = 0D;
      return this;
    }

    /**
     * <code>optional double total_shield = 30;</code>
     * @return the totalShield
     */
    public double getTotalShield() {
      return totalShield;
    }

    /**
     * <code>optional double total_shield = 30;</code>
     * @param value the totalShield to set
     * @return this
     */
    public AvatarBattleInfo setTotalShield(final double value) {
      bitField0_ |= 0x00000080;
      totalShield = value;
      return this;
    }

    /**
     * <code>optional double total_shield_taken = 31;</code>
     * @return whether the totalShieldTaken field is set
     */
    public boolean hasTotalShieldTaken() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional double total_shield_taken = 31;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalShieldTaken() {
      bitField0_ &= ~0x00000100;
      totalShieldTaken = 0D;
      return this;
    }

    /**
     * <code>optional double total_shield_taken = 31;</code>
     * @return the totalShieldTaken
     */
    public double getTotalShieldTaken() {
      return totalShieldTaken;
    }

    /**
     * <code>optional double total_shield_taken = 31;</code>
     * @param value the totalShieldTaken to set
     * @return this
     */
    public AvatarBattleInfo setTotalShieldTaken(final double value) {
      bitField0_ |= 0x00000100;
      totalShieldTaken = value;
      return this;
    }

    /**
     * <code>optional double total_shield_damage = 32;</code>
     * @return whether the totalShieldDamage field is set
     */
    public boolean hasTotalShieldDamage() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional double total_shield_damage = 32;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalShieldDamage() {
      bitField0_ &= ~0x00000200;
      totalShieldDamage = 0D;
      return this;
    }

    /**
     * <code>optional double total_shield_damage = 32;</code>
     * @return the totalShieldDamage
     */
    public double getTotalShieldDamage() {
      return totalShieldDamage;
    }

    /**
     * <code>optional double total_shield_damage = 32;</code>
     * @param value the totalShieldDamage to set
     * @return this
     */
    public AvatarBattleInfo setTotalShieldDamage(final double value) {
      bitField0_ |= 0x00000200;
      totalShieldDamage = value;
      return this;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty MPMGIACFGOA = 36;
     * </pre>
     *
     * <code>optional double GPHGHLGHNJF = 37;</code>
     * @return whether the gPHGHLGHNJF field is set
     */
    public boolean hasGPHGHLGHNJF() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty MPMGIACFGOA = 36;
     * </pre>
     *
     * <code>optional double GPHGHLGHNJF = 37;</code>
     * @return this
     */
    public AvatarBattleInfo clearGPHGHLGHNJF() {
      bitField0_ &= ~0x00000400;
      gPHGHLGHNJF = 0D;
      return this;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty MPMGIACFGOA = 36;
     * </pre>
     *
     * <code>optional double GPHGHLGHNJF = 37;</code>
     * @return the gPHGHLGHNJF
     */
    public double getGPHGHLGHNJF() {
      return gPHGHLGHNJF;
    }

    /**
     * <pre>
     * repeated AttackDamageProperty MPMGIACFGOA = 36;
     * </pre>
     *
     * <code>optional double GPHGHLGHNJF = 37;</code>
     * @param value the gPHGHLGHNJF to set
     * @return this
     */
    public AvatarBattleInfo setGPHGHLGHNJF(final double value) {
      bitField0_ |= 0x00000400;
      gPHGHLGHNJF = value;
      return this;
    }

    /**
     * <code>optional double HNMAEDKEMEO = 38;</code>
     * @return whether the hNMAEDKEMEO field is set
     */
    public boolean hasHNMAEDKEMEO() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>optional double HNMAEDKEMEO = 38;</code>
     * @return this
     */
    public AvatarBattleInfo clearHNMAEDKEMEO() {
      bitField0_ &= ~0x00000800;
      hNMAEDKEMEO = 0D;
      return this;
    }

    /**
     * <code>optional double HNMAEDKEMEO = 38;</code>
     * @return the hNMAEDKEMEO
     */
    public double getHNMAEDKEMEO() {
      return hNMAEDKEMEO;
    }

    /**
     * <code>optional double HNMAEDKEMEO = 38;</code>
     * @param value the hNMAEDKEMEO to set
     * @return this
     */
    public AvatarBattleInfo setHNMAEDKEMEO(final double value) {
      bitField0_ |= 0x00000800;
      hNMAEDKEMEO = value;
      return this;
    }

    /**
     * <code>optional double KOKGBDEJBHL = 39;</code>
     * @return whether the kOKGBDEJBHL field is set
     */
    public boolean hasKOKGBDEJBHL() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <code>optional double KOKGBDEJBHL = 39;</code>
     * @return this
     */
    public AvatarBattleInfo clearKOKGBDEJBHL() {
      bitField0_ &= ~0x00001000;
      kOKGBDEJBHL = 0D;
      return this;
    }

    /**
     * <code>optional double KOKGBDEJBHL = 39;</code>
     * @return the kOKGBDEJBHL
     */
    public double getKOKGBDEJBHL() {
      return kOKGBDEJBHL;
    }

    /**
     * <code>optional double KOKGBDEJBHL = 39;</code>
     * @param value the kOKGBDEJBHL to set
     * @return this
     */
    public AvatarBattleInfo setKOKGBDEJBHL(final double value) {
      bitField0_ |= 0x00001000;
      kOKGBDEJBHL = value;
      return this;
    }

    /**
     * <code>optional double FIICHEILPCF = 40;</code>
     * @return whether the fIICHEILPCF field is set
     */
    public boolean hasFIICHEILPCF() {
      return (bitField0_ & 0x00002000) != 0;
    }

    /**
     * <code>optional double FIICHEILPCF = 40;</code>
     * @return this
     */
    public AvatarBattleInfo clearFIICHEILPCF() {
      bitField0_ &= ~0x00002000;
      fIICHEILPCF = 0D;
      return this;
    }

    /**
     * <code>optional double FIICHEILPCF = 40;</code>
     * @return the fIICHEILPCF
     */
    public double getFIICHEILPCF() {
      return fIICHEILPCF;
    }

    /**
     * <code>optional double FIICHEILPCF = 40;</code>
     * @param value the fIICHEILPCF to set
     * @return this
     */
    public AvatarBattleInfo setFIICHEILPCF(final double value) {
      bitField0_ |= 0x00002000;
      fIICHEILPCF = value;
      return this;
    }

    /**
     * <code>optional uint32 id = 2;</code>
     * @return whether the id field is set
     */
    public boolean hasId() {
      return (bitField0_ & 0x00004000) != 0;
    }

    /**
     * <code>optional uint32 id = 2;</code>
     * @return this
     */
    public AvatarBattleInfo clearId() {
      bitField0_ &= ~0x00004000;
      id = 0;
      return this;
    }

    /**
     * <code>optional uint32 id = 2;</code>
     * @return the id
     */
    public int getId() {
      return id;
    }

    /**
     * <code>optional uint32 id = 2;</code>
     * @param value the id to set
     * @return this
     */
    public AvatarBattleInfo setId(final int value) {
      bitField0_ |= 0x00004000;
      id = value;
      return this;
    }

    /**
     * <code>optional uint32 avatar_level = 3;</code>
     * @return whether the avatarLevel field is set
     */
    public boolean hasAvatarLevel() {
      return (bitField0_ & 0x00008000) != 0;
    }

    /**
     * <code>optional uint32 avatar_level = 3;</code>
     * @return this
     */
    public AvatarBattleInfo clearAvatarLevel() {
      bitField0_ &= ~0x00008000;
      avatarLevel = 0;
      return this;
    }

    /**
     * <code>optional uint32 avatar_level = 3;</code>
     * @return the avatarLevel
     */
    public int getAvatarLevel() {
      return avatarLevel;
    }

    /**
     * <code>optional uint32 avatar_level = 3;</code>
     * @param value the avatarLevel to set
     * @return this
     */
    public AvatarBattleInfo setAvatarLevel(final int value) {
      bitField0_ |= 0x00008000;
      avatarLevel = value;
      return this;
    }

    /**
     * <code>optional uint32 avatar_rank = 4;</code>
     * @return whether the avatarRank field is set
     */
    public boolean hasAvatarRank() {
      return (bitField0_ & 0x00010000) != 0;
    }

    /**
     * <code>optional uint32 avatar_rank = 4;</code>
     * @return this
     */
    public AvatarBattleInfo clearAvatarRank() {
      bitField0_ &= ~0x00010000;
      avatarRank = 0;
      return this;
    }

    /**
     * <code>optional uint32 avatar_rank = 4;</code>
     * @return the avatarRank
     */
    public int getAvatarRank() {
      return avatarRank;
    }

    /**
     * <code>optional uint32 avatar_rank = 4;</code>
     * @param value the avatarRank to set
     * @return this
     */
    public AvatarBattleInfo setAvatarRank(final int value) {
      bitField0_ |= 0x00010000;
      avatarRank = value;
      return this;
    }

    /**
     * <code>optional uint32 avatar_promotion = 5;</code>
     * @return whether the avatarPromotion field is set
     */
    public boolean hasAvatarPromotion() {
      return (bitField0_ & 0x00020000) != 0;
    }

    /**
     * <code>optional uint32 avatar_promotion = 5;</code>
     * @return this
     */
    public AvatarBattleInfo clearAvatarPromotion() {
      bitField0_ &= ~0x00020000;
      avatarPromotion = 0;
      return this;
    }

    /**
     * <code>optional uint32 avatar_promotion = 5;</code>
     * @return the avatarPromotion
     */
    public int getAvatarPromotion() {
      return avatarPromotion;
    }

    /**
     * <code>optional uint32 avatar_promotion = 5;</code>
     * @param value the avatarPromotion to set
     * @return this
     */
    public AvatarBattleInfo setAvatarPromotion(final int value) {
      bitField0_ |= 0x00020000;
      avatarPromotion = value;
      return this;
    }

    /**
     * <pre>
     * repeated EquipmentProperty avatar_equipment = 8;
     * </pre>
     *
     * <code>optional uint32 total_turns = 9;</code>
     * @return whether the totalTurns field is set
     */
    public boolean hasTotalTurns() {
      return (bitField0_ & 0x00040000) != 0;
    }

    /**
     * <pre>
     * repeated EquipmentProperty avatar_equipment = 8;
     * </pre>
     *
     * <code>optional uint32 total_turns = 9;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalTurns() {
      bitField0_ &= ~0x00040000;
      totalTurns = 0;
      return this;
    }

    /**
     * <pre>
     * repeated EquipmentProperty avatar_equipment = 8;
     * </pre>
     *
     * <code>optional uint32 total_turns = 9;</code>
     * @return the totalTurns
     */
    public int getTotalTurns() {
      return totalTurns;
    }

    /**
     * <pre>
     * repeated EquipmentProperty avatar_equipment = 8;
     * </pre>
     *
     * <code>optional uint32 total_turns = 9;</code>
     * @param value the totalTurns to set
     * @return this
     */
    public AvatarBattleInfo setTotalTurns(final int value) {
      bitField0_ |= 0x00040000;
      totalTurns = value;
      return this;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @return whether the stageId field is set
     */
    public boolean hasStageId() {
      return (bitField0_ & 0x00080000) != 0;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @return this
     */
    public AvatarBattleInfo clearStageId() {
      bitField0_ &= ~0x00080000;
      stageId = 0;
      return this;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @return the stageId
     */
    public int getStageId() {
      return stageId;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @param value the stageId to set
     * @return this
     */
    public AvatarBattleInfo setStageId(final int value) {
      bitField0_ |= 0x00080000;
      stageId = value;
      return this;
    }

    /**
     * <code>optional uint32 stage_type = 16;</code>
     * @return whether the stageType field is set
     */
    public boolean hasStageType() {
      return (bitField0_ & 0x00100000) != 0;
    }

    /**
     * <code>optional uint32 stage_type = 16;</code>
     * @return this
     */
    public AvatarBattleInfo clearStageType() {
      bitField0_ &= ~0x00100000;
      stageType = 0;
      return this;
    }

    /**
     * <code>optional uint32 stage_type = 16;</code>
     * @return the stageType
     */
    public int getStageType() {
      return stageType;
    }

    /**
     * <code>optional uint32 stage_type = 16;</code>
     * @param value the stageType to set
     * @return this
     */
    public AvatarBattleInfo setStageType(final int value) {
      bitField0_ |= 0x00100000;
      stageType = value;
      return this;
    }

    /**
     * <code>optional uint32 total_sp_add = 23;</code>
     * @return whether the totalSpAdd field is set
     */
    public boolean hasTotalSpAdd() {
      return (bitField0_ & 0x00200000) != 0;
    }

    /**
     * <code>optional uint32 total_sp_add = 23;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalSpAdd() {
      bitField0_ &= ~0x00200000;
      totalSpAdd = 0;
      return this;
    }

    /**
     * <code>optional uint32 total_sp_add = 23;</code>
     * @return the totalSpAdd
     */
    public int getTotalSpAdd() {
      return totalSpAdd;
    }

    /**
     * <code>optional uint32 total_sp_add = 23;</code>
     * @param value the totalSpAdd to set
     * @return this
     */
    public AvatarBattleInfo setTotalSpAdd(final int value) {
      bitField0_ |= 0x00200000;
      totalSpAdd = value;
      return this;
    }

    /**
     * <code>optional uint32 total_bp_cost = 25;</code>
     * @return whether the totalBpCost field is set
     */
    public boolean hasTotalBpCost() {
      return (bitField0_ & 0x00400000) != 0;
    }

    /**
     * <code>optional uint32 total_bp_cost = 25;</code>
     * @return this
     */
    public AvatarBattleInfo clearTotalBpCost() {
      bitField0_ &= ~0x00400000;
      totalBpCost = 0;
      return this;
    }

    /**
     * <code>optional uint32 total_bp_cost = 25;</code>
     * @return the totalBpCost
     */
    public int getTotalBpCost() {
      return totalBpCost;
    }

    /**
     * <code>optional uint32 total_bp_cost = 25;</code>
     * @param value the totalBpCost to set
     * @return this
     */
    public AvatarBattleInfo setTotalBpCost(final int value) {
      bitField0_ |= 0x00400000;
      totalBpCost = value;
      return this;
    }

    /**
     * <code>optional uint32 die_times = 26;</code>
     * @return whether the dieTimes field is set
     */
    public boolean hasDieTimes() {
      return (bitField0_ & 0x00800000) != 0;
    }

    /**
     * <code>optional uint32 die_times = 26;</code>
     * @return this
     */
    public AvatarBattleInfo clearDieTimes() {
      bitField0_ &= ~0x00800000;
      dieTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 die_times = 26;</code>
     * @return the dieTimes
     */
    public int getDieTimes() {
      return dieTimes;
    }

    /**
     * <code>optional uint32 die_times = 26;</code>
     * @param value the dieTimes to set
     * @return this
     */
    public AvatarBattleInfo setDieTimes(final int value) {
      bitField0_ |= 0x00800000;
      dieTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 revive_times = 27;</code>
     * @return whether the reviveTimes field is set
     */
    public boolean hasReviveTimes() {
      return (bitField0_ & 0x01000000) != 0;
    }

    /**
     * <code>optional uint32 revive_times = 27;</code>
     * @return this
     */
    public AvatarBattleInfo clearReviveTimes() {
      bitField0_ &= ~0x01000000;
      reviveTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 revive_times = 27;</code>
     * @return the reviveTimes
     */
    public int getReviveTimes() {
      return reviveTimes;
    }

    /**
     * <code>optional uint32 revive_times = 27;</code>
     * @param value the reviveTimes to set
     * @return this
     */
    public AvatarBattleInfo setReviveTimes(final int value) {
      bitField0_ |= 0x01000000;
      reviveTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 break_times = 28;</code>
     * @return whether the breakTimes field is set
     */
    public boolean hasBreakTimes() {
      return (bitField0_ & 0x02000000) != 0;
    }

    /**
     * <code>optional uint32 break_times = 28;</code>
     * @return this
     */
    public AvatarBattleInfo clearBreakTimes() {
      bitField0_ &= ~0x02000000;
      breakTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 break_times = 28;</code>
     * @return the breakTimes
     */
    public int getBreakTimes() {
      return breakTimes;
    }

    /**
     * <code>optional uint32 break_times = 28;</code>
     * @param value the breakTimes to set
     * @return this
     */
    public AvatarBattleInfo setBreakTimes(final int value) {
      bitField0_ |= 0x02000000;
      breakTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 extra_turns = 29;</code>
     * @return whether the extraTurns field is set
     */
    public boolean hasExtraTurns() {
      return (bitField0_ & 0x04000000) != 0;
    }

    /**
     * <code>optional uint32 extra_turns = 29;</code>
     * @return this
     */
    public AvatarBattleInfo clearExtraTurns() {
      bitField0_ &= ~0x04000000;
      extraTurns = 0;
      return this;
    }

    /**
     * <code>optional uint32 extra_turns = 29;</code>
     * @return the extraTurns
     */
    public int getExtraTurns() {
      return extraTurns;
    }

    /**
     * <code>optional uint32 extra_turns = 29;</code>
     * @param value the extraTurns to set
     * @return this
     */
    public AvatarBattleInfo setExtraTurns(final int value) {
      bitField0_ |= 0x04000000;
      extraTurns = value;
      return this;
    }

    /**
     * <code>optional uint32 assist_uid = 35;</code>
     * @return whether the assistUid field is set
     */
    public boolean hasAssistUid() {
      return (bitField0_ & 0x08000000) != 0;
    }

    /**
     * <code>optional uint32 assist_uid = 35;</code>
     * @return this
     */
    public AvatarBattleInfo clearAssistUid() {
      bitField0_ &= ~0x08000000;
      assistUid = 0;
      return this;
    }

    /**
     * <code>optional uint32 assist_uid = 35;</code>
     * @return the assistUid
     */
    public int getAssistUid() {
      return assistUid;
    }

    /**
     * <code>optional uint32 assist_uid = 35;</code>
     * @param value the assistUid to set
     * @return this
     */
    public AvatarBattleInfo setAssistUid(final int value) {
      bitField0_ |= 0x08000000;
      assistUid = value;
      return this;
    }

    /**
     * <pre>
     * repeated AbilityUseStt EAONALFPOGL = 41;
     * </pre>
     *
     * <code>optional uint32 EINCNMLBFJD = 42;</code>
     * @return whether the eINCNMLBFJD field is set
     */
    public boolean hasEINCNMLBFJD() {
      return (bitField0_ & 0x10000000) != 0;
    }

    /**
     * <pre>
     * repeated AbilityUseStt EAONALFPOGL = 41;
     * </pre>
     *
     * <code>optional uint32 EINCNMLBFJD = 42;</code>
     * @return this
     */
    public AvatarBattleInfo clearEINCNMLBFJD() {
      bitField0_ &= ~0x10000000;
      eINCNMLBFJD = 0;
      return this;
    }

    /**
     * <pre>
     * repeated AbilityUseStt EAONALFPOGL = 41;
     * </pre>
     *
     * <code>optional uint32 EINCNMLBFJD = 42;</code>
     * @return the eINCNMLBFJD
     */
    public int getEINCNMLBFJD() {
      return eINCNMLBFJD;
    }

    /**
     * <pre>
     * repeated AbilityUseStt EAONALFPOGL = 41;
     * </pre>
     *
     * <code>optional uint32 EINCNMLBFJD = 42;</code>
     * @param value the eINCNMLBFJD to set
     * @return this
     */
    public AvatarBattleInfo setEINCNMLBFJD(final int value) {
      bitField0_ |= 0x10000000;
      eINCNMLBFJD = value;
      return this;
    }

    /**
     * <code>optional uint32 JMOJBLEELFJ = 43;</code>
     * @return whether the jMOJBLEELFJ field is set
     */
    public boolean hasJMOJBLEELFJ() {
      return (bitField0_ & 0x20000000) != 0;
    }

    /**
     * <code>optional uint32 JMOJBLEELFJ = 43;</code>
     * @return this
     */
    public AvatarBattleInfo clearJMOJBLEELFJ() {
      bitField0_ &= ~0x20000000;
      jMOJBLEELFJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 JMOJBLEELFJ = 43;</code>
     * @return the jMOJBLEELFJ
     */
    public int getJMOJBLEELFJ() {
      return jMOJBLEELFJ;
    }

    /**
     * <code>optional uint32 JMOJBLEELFJ = 43;</code>
     * @param value the jMOJBLEELFJ to set
     * @return this
     */
    public AvatarBattleInfo setJMOJBLEELFJ(final int value) {
      bitField0_ |= 0x20000000;
      jMOJBLEELFJ = value;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 1;</code>
     * @return whether the avatarType field is set
     */
    public boolean hasAvatarType() {
      return (bitField0_ & 0x40000000) != 0;
    }

    /**
     * <code>optional .AvatarType avatar_type = 1;</code>
     * @return this
     */
    public AvatarBattleInfo clearAvatarType() {
      bitField0_ &= ~0x40000000;
      avatarType = 0;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 1;</code>
     * @return the avatarType
     */
    public AvatarTypeOuterClass.AvatarType getAvatarType() {
      return AvatarTypeOuterClass.AvatarType.forNumber(avatarType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link AvatarBattleInfo#getAvatarType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getAvatarTypeValue() {
      return avatarType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link AvatarTypeOuterClass.AvatarType}. Setting an invalid value
     * can cause {@link AvatarBattleInfo#getAvatarType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public AvatarBattleInfo setAvatarTypeValue(final int value) {
      bitField0_ |= 0x40000000;
      avatarType = value;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 1;</code>
     * @param value the avatarType to set
     * @return this
     */
    public AvatarBattleInfo setAvatarType(final AvatarTypeOuterClass.AvatarType value) {
      bitField0_ |= 0x40000000;
      avatarType = value.getNumber();
      return this;
    }

    /**
     * <code>optional .AvatarProperty avatar_status = 6;</code>
     * @return whether the avatarStatus field is set
     */
    public boolean hasAvatarStatus() {
      return (bitField0_ & 0x80000000) != 0;
    }

    /**
     * <code>optional .AvatarProperty avatar_status = 6;</code>
     * @return this
     */
    public AvatarBattleInfo clearAvatarStatus() {
      bitField0_ &= ~0x80000000;
      avatarStatus.clear();
      return this;
    }

    /**
     * <code>optional .AvatarProperty avatar_status = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAvatarStatus()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public AvatarPropertyOuterClass.AvatarProperty getAvatarStatus() {
      return avatarStatus;
    }

    /**
     * <code>optional .AvatarProperty avatar_status = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public AvatarPropertyOuterClass.AvatarProperty getMutableAvatarStatus() {
      bitField0_ |= 0x80000000;
      return avatarStatus;
    }

    /**
     * <code>optional .AvatarProperty avatar_status = 6;</code>
     * @param value the avatarStatus to set
     * @return this
     */
    public AvatarBattleInfo setAvatarStatus(final AvatarPropertyOuterClass.AvatarProperty value) {
      bitField0_ |= 0x80000000;
      avatarStatus.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .AvatarProperty initial_status = 33;</code>
     * @return whether the initialStatus field is set
     */
    public boolean hasInitialStatus() {
      return (bitField1_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .AvatarProperty initial_status = 33;</code>
     * @return this
     */
    public AvatarBattleInfo clearInitialStatus() {
      bitField1_ &= ~0x00000001;
      initialStatus.clear();
      return this;
    }

    /**
     * <code>optional .AvatarProperty initial_status = 33;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableInitialStatus()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public AvatarPropertyOuterClass.AvatarProperty getInitialStatus() {
      return initialStatus;
    }

    /**
     * <code>optional .AvatarProperty initial_status = 33;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public AvatarPropertyOuterClass.AvatarProperty getMutableInitialStatus() {
      bitField1_ |= 0x00000001;
      return initialStatus;
    }

    /**
     * <code>optional .AvatarProperty initial_status = 33;</code>
     * @param value the initialStatus to set
     * @return this
     */
    public AvatarBattleInfo setInitialStatus(final AvatarPropertyOuterClass.AvatarProperty value) {
      bitField1_ |= 0x00000001;
      initialStatus.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     * @return whether the avatarSkill field is set
     */
    public boolean hasAvatarSkill() {
      return (bitField1_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     * @return this
     */
    public AvatarBattleInfo clearAvatarSkill() {
      bitField1_ &= ~0x00000002;
      avatarSkill.clear();
      return this;
    }

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAvatarSkill()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> getAvatarSkill() {
      return avatarSkill;
    }

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> getMutableAvatarSkill() {
      bitField1_ |= 0x00000002;
      return avatarSkill;
    }

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     * @param value the avatarSkill to add
     * @return this
     */
    public AvatarBattleInfo addAvatarSkill(final AvatarSkillTreeOuterClass.AvatarSkillTree value) {
      bitField1_ |= 0x00000002;
      avatarSkill.add(value);
      return this;
    }

    /**
     * <code>repeated .AvatarSkillTree avatar_skill = 7;</code>
     * @param values the avatarSkill to add
     * @return this
     */
    public AvatarBattleInfo addAllAvatarSkill(
        final AvatarSkillTreeOuterClass.AvatarSkillTree... values) {
      bitField1_ |= 0x00000002;
      avatarSkill.addAll(values);
      return this;
    }

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     * @return whether the spAddSource field is set
     */
    public boolean hasSpAddSource() {
      return (bitField1_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     * @return this
     */
    public AvatarBattleInfo clearSpAddSource() {
      bitField1_ &= ~0x00000004;
      spAddSource.clear();
      return this;
    }

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSpAddSource()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<SpAddSourceOuterClass.SpAddSource> getSpAddSource() {
      return spAddSource;
    }

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<SpAddSourceOuterClass.SpAddSource> getMutableSpAddSource() {
      bitField1_ |= 0x00000004;
      return spAddSource;
    }

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     * @param value the spAddSource to add
     * @return this
     */
    public AvatarBattleInfo addSpAddSource(final SpAddSourceOuterClass.SpAddSource value) {
      bitField1_ |= 0x00000004;
      spAddSource.add(value);
      return this;
    }

    /**
     * <code>repeated .SpAddSource sp_add_source = 24;</code>
     * @param values the spAddSource to add
     * @return this
     */
    public AvatarBattleInfo addAllSpAddSource(final SpAddSourceOuterClass.SpAddSource... values) {
      bitField1_ |= 0x00000004;
      spAddSource.addAll(values);
      return this;
    }

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     * @return whether the battleRelicList field is set
     */
    public boolean hasBattleRelicList() {
      return (bitField1_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     * @return this
     */
    public AvatarBattleInfo clearBattleRelicList() {
      bitField1_ &= ~0x00000008;
      battleRelicList.clear();
      return this;
    }

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBattleRelicList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleRelicOuterClass.BattleRelic> getBattleRelicList() {
      return battleRelicList;
    }

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleRelicOuterClass.BattleRelic> getMutableBattleRelicList() {
      bitField1_ |= 0x00000008;
      return battleRelicList;
    }

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     * @param value the battleRelicList to add
     * @return this
     */
    public AvatarBattleInfo addBattleRelicList(final BattleRelicOuterClass.BattleRelic value) {
      bitField1_ |= 0x00000008;
      battleRelicList.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleRelic battle_relic_list = 34;</code>
     * @param values the battleRelicList to add
     * @return this
     */
    public AvatarBattleInfo addAllBattleRelicList(
        final BattleRelicOuterClass.BattleRelic... values) {
      bitField1_ |= 0x00000008;
      battleRelicList.addAll(values);
      return this;
    }

    @Override
    public AvatarBattleInfo copyFrom(final AvatarBattleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        totalDamage = other.totalDamage;
        totalHeal = other.totalHeal;
        totalDamageTaken = other.totalDamageTaken;
        totalHpRecover = other.totalHpRecover;
        totalSpCost = other.totalSpCost;
        totalBreakDamage = other.totalBreakDamage;
        delayCumulate = other.delayCumulate;
        totalShield = other.totalShield;
        totalShieldTaken = other.totalShieldTaken;
        totalShieldDamage = other.totalShieldDamage;
        gPHGHLGHNJF = other.gPHGHLGHNJF;
        hNMAEDKEMEO = other.hNMAEDKEMEO;
        kOKGBDEJBHL = other.kOKGBDEJBHL;
        fIICHEILPCF = other.fIICHEILPCF;
        id = other.id;
        avatarLevel = other.avatarLevel;
        avatarRank = other.avatarRank;
        avatarPromotion = other.avatarPromotion;
        totalTurns = other.totalTurns;
        stageId = other.stageId;
        stageType = other.stageType;
        totalSpAdd = other.totalSpAdd;
        totalBpCost = other.totalBpCost;
        dieTimes = other.dieTimes;
        reviveTimes = other.reviveTimes;
        breakTimes = other.breakTimes;
        extraTurns = other.extraTurns;
        assistUid = other.assistUid;
        eINCNMLBFJD = other.eINCNMLBFJD;
        jMOJBLEELFJ = other.jMOJBLEELFJ;
        avatarType = other.avatarType;
        avatarStatus.copyFrom(other.avatarStatus);
      }
      if ((bitField1_ | other.bitField1_) != 0) {
        bitField1_ = other.bitField1_;
        initialStatus.copyFrom(other.initialStatus);
        avatarSkill.copyFrom(other.avatarSkill);
        spAddSource.copyFrom(other.spAddSource);
        battleRelicList.copyFrom(other.battleRelicList);
      }
      return this;
    }

    @Override
    public AvatarBattleInfo mergeFrom(final AvatarBattleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasTotalDamage()) {
        setTotalDamage(other.totalDamage);
      }
      if (other.hasTotalHeal()) {
        setTotalHeal(other.totalHeal);
      }
      if (other.hasTotalDamageTaken()) {
        setTotalDamageTaken(other.totalDamageTaken);
      }
      if (other.hasTotalHpRecover()) {
        setTotalHpRecover(other.totalHpRecover);
      }
      if (other.hasTotalSpCost()) {
        setTotalSpCost(other.totalSpCost);
      }
      if (other.hasTotalBreakDamage()) {
        setTotalBreakDamage(other.totalBreakDamage);
      }
      if (other.hasDelayCumulate()) {
        setDelayCumulate(other.delayCumulate);
      }
      if (other.hasTotalShield()) {
        setTotalShield(other.totalShield);
      }
      if (other.hasTotalShieldTaken()) {
        setTotalShieldTaken(other.totalShieldTaken);
      }
      if (other.hasTotalShieldDamage()) {
        setTotalShieldDamage(other.totalShieldDamage);
      }
      if (other.hasGPHGHLGHNJF()) {
        setGPHGHLGHNJF(other.gPHGHLGHNJF);
      }
      if (other.hasHNMAEDKEMEO()) {
        setHNMAEDKEMEO(other.hNMAEDKEMEO);
      }
      if (other.hasKOKGBDEJBHL()) {
        setKOKGBDEJBHL(other.kOKGBDEJBHL);
      }
      if (other.hasFIICHEILPCF()) {
        setFIICHEILPCF(other.fIICHEILPCF);
      }
      if (other.hasId()) {
        setId(other.id);
      }
      if (other.hasAvatarLevel()) {
        setAvatarLevel(other.avatarLevel);
      }
      if (other.hasAvatarRank()) {
        setAvatarRank(other.avatarRank);
      }
      if (other.hasAvatarPromotion()) {
        setAvatarPromotion(other.avatarPromotion);
      }
      if (other.hasTotalTurns()) {
        setTotalTurns(other.totalTurns);
      }
      if (other.hasStageId()) {
        setStageId(other.stageId);
      }
      if (other.hasStageType()) {
        setStageType(other.stageType);
      }
      if (other.hasTotalSpAdd()) {
        setTotalSpAdd(other.totalSpAdd);
      }
      if (other.hasTotalBpCost()) {
        setTotalBpCost(other.totalBpCost);
      }
      if (other.hasDieTimes()) {
        setDieTimes(other.dieTimes);
      }
      if (other.hasReviveTimes()) {
        setReviveTimes(other.reviveTimes);
      }
      if (other.hasBreakTimes()) {
        setBreakTimes(other.breakTimes);
      }
      if (other.hasExtraTurns()) {
        setExtraTurns(other.extraTurns);
      }
      if (other.hasAssistUid()) {
        setAssistUid(other.assistUid);
      }
      if (other.hasEINCNMLBFJD()) {
        setEINCNMLBFJD(other.eINCNMLBFJD);
      }
      if (other.hasJMOJBLEELFJ()) {
        setJMOJBLEELFJ(other.jMOJBLEELFJ);
      }
      if (other.hasAvatarType()) {
        setAvatarTypeValue(other.avatarType);
      }
      if (other.hasAvatarStatus()) {
        getMutableAvatarStatus().mergeFrom(other.avatarStatus);
      }
      if (other.hasInitialStatus()) {
        getMutableInitialStatus().mergeFrom(other.initialStatus);
      }
      if (other.hasAvatarSkill()) {
        getMutableAvatarSkill().addAll(other.avatarSkill);
      }
      if (other.hasSpAddSource()) {
        getMutableSpAddSource().addAll(other.spAddSource);
      }
      if (other.hasBattleRelicList()) {
        getMutableBattleRelicList().addAll(other.battleRelicList);
      }
      return this;
    }

    @Override
    public AvatarBattleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bitField1_ = 0;
      totalDamage = 0D;
      totalHeal = 0D;
      totalDamageTaken = 0D;
      totalHpRecover = 0D;
      totalSpCost = 0D;
      totalBreakDamage = 0D;
      delayCumulate = 0D;
      totalShield = 0D;
      totalShieldTaken = 0D;
      totalShieldDamage = 0D;
      gPHGHLGHNJF = 0D;
      hNMAEDKEMEO = 0D;
      kOKGBDEJBHL = 0D;
      fIICHEILPCF = 0D;
      id = 0;
      avatarLevel = 0;
      avatarRank = 0;
      avatarPromotion = 0;
      totalTurns = 0;
      stageId = 0;
      stageType = 0;
      totalSpAdd = 0;
      totalBpCost = 0;
      dieTimes = 0;
      reviveTimes = 0;
      breakTimes = 0;
      extraTurns = 0;
      assistUid = 0;
      eINCNMLBFJD = 0;
      jMOJBLEELFJ = 0;
      avatarType = 0;
      avatarStatus.clear();
      initialStatus.clear();
      avatarSkill.clear();
      spAddSource.clear();
      battleRelicList.clear();
      return this;
    }

    @Override
    public AvatarBattleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bitField1_ = 0;
      avatarStatus.clearQuick();
      initialStatus.clearQuick();
      avatarSkill.clearQuick();
      spAddSource.clearQuick();
      battleRelicList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof AvatarBattleInfo)) {
        return false;
      }
      AvatarBattleInfo other = (AvatarBattleInfo) o;
      return bitField0_ == other.bitField0_
        && bitField1_ == other.bitField1_
        && (!hasTotalDamage() || ProtoUtil.isEqual(totalDamage, other.totalDamage))
        && (!hasTotalHeal() || ProtoUtil.isEqual(totalHeal, other.totalHeal))
        && (!hasTotalDamageTaken() || ProtoUtil.isEqual(totalDamageTaken, other.totalDamageTaken))
        && (!hasTotalHpRecover() || ProtoUtil.isEqual(totalHpRecover, other.totalHpRecover))
        && (!hasTotalSpCost() || ProtoUtil.isEqual(totalSpCost, other.totalSpCost))
        && (!hasTotalBreakDamage() || ProtoUtil.isEqual(totalBreakDamage, other.totalBreakDamage))
        && (!hasDelayCumulate() || ProtoUtil.isEqual(delayCumulate, other.delayCumulate))
        && (!hasTotalShield() || ProtoUtil.isEqual(totalShield, other.totalShield))
        && (!hasTotalShieldTaken() || ProtoUtil.isEqual(totalShieldTaken, other.totalShieldTaken))
        && (!hasTotalShieldDamage() || ProtoUtil.isEqual(totalShieldDamage, other.totalShieldDamage))
        && (!hasGPHGHLGHNJF() || ProtoUtil.isEqual(gPHGHLGHNJF, other.gPHGHLGHNJF))
        && (!hasHNMAEDKEMEO() || ProtoUtil.isEqual(hNMAEDKEMEO, other.hNMAEDKEMEO))
        && (!hasKOKGBDEJBHL() || ProtoUtil.isEqual(kOKGBDEJBHL, other.kOKGBDEJBHL))
        && (!hasFIICHEILPCF() || ProtoUtil.isEqual(fIICHEILPCF, other.fIICHEILPCF))
        && (!hasId() || id == other.id)
        && (!hasAvatarLevel() || avatarLevel == other.avatarLevel)
        && (!hasAvatarRank() || avatarRank == other.avatarRank)
        && (!hasAvatarPromotion() || avatarPromotion == other.avatarPromotion)
        && (!hasTotalTurns() || totalTurns == other.totalTurns)
        && (!hasStageId() || stageId == other.stageId)
        && (!hasStageType() || stageType == other.stageType)
        && (!hasTotalSpAdd() || totalSpAdd == other.totalSpAdd)
        && (!hasTotalBpCost() || totalBpCost == other.totalBpCost)
        && (!hasDieTimes() || dieTimes == other.dieTimes)
        && (!hasReviveTimes() || reviveTimes == other.reviveTimes)
        && (!hasBreakTimes() || breakTimes == other.breakTimes)
        && (!hasExtraTurns() || extraTurns == other.extraTurns)
        && (!hasAssistUid() || assistUid == other.assistUid)
        && (!hasEINCNMLBFJD() || eINCNMLBFJD == other.eINCNMLBFJD)
        && (!hasJMOJBLEELFJ() || jMOJBLEELFJ == other.jMOJBLEELFJ)
        && (!hasAvatarType() || avatarType == other.avatarType)
        && (!hasAvatarStatus() || avatarStatus.equals(other.avatarStatus))
        && (!hasInitialStatus() || initialStatus.equals(other.initialStatus))
        && (!hasAvatarSkill() || avatarSkill.equals(other.avatarSkill))
        && (!hasSpAddSource() || spAddSource.equals(other.spAddSource))
        && (!hasBattleRelicList() || battleRelicList.equals(other.battleRelicList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 81);
        output.writeDoubleNoTag(totalDamage);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 89);
        output.writeDoubleNoTag(totalHeal);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 97);
        output.writeDoubleNoTag(totalDamageTaken);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 105);
        output.writeDoubleNoTag(totalHpRecover);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 113);
        output.writeDoubleNoTag(totalSpCost);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawLittleEndian16((short) 393);
        output.writeDoubleNoTag(totalBreakDamage);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawLittleEndian16((short) 433);
        output.writeDoubleNoTag(delayCumulate);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawLittleEndian16((short) 497);
        output.writeDoubleNoTag(totalShield);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawLittleEndian16((short) 505);
        output.writeDoubleNoTag(totalShieldTaken);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawLittleEndian16((short) 641);
        output.writeDoubleNoTag(totalShieldDamage);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawLittleEndian16((short) 681);
        output.writeDoubleNoTag(gPHGHLGHNJF);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawLittleEndian16((short) 689);
        output.writeDoubleNoTag(hNMAEDKEMEO);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawLittleEndian16((short) 697);
        output.writeDoubleNoTag(kOKGBDEJBHL);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeRawLittleEndian16((short) 705);
        output.writeDoubleNoTag(fIICHEILPCF);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(id);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(avatarLevel);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(avatarRank);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(avatarPromotion);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(totalTurns);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(stageId);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        output.writeRawLittleEndian16((short) 384);
        output.writeUInt32NoTag(stageType);
      }
      if ((bitField0_ & 0x00200000) != 0) {
        output.writeRawLittleEndian16((short) 440);
        output.writeUInt32NoTag(totalSpAdd);
      }
      if ((bitField0_ & 0x00400000) != 0) {
        output.writeRawLittleEndian16((short) 456);
        output.writeUInt32NoTag(totalBpCost);
      }
      if ((bitField0_ & 0x00800000) != 0) {
        output.writeRawLittleEndian16((short) 464);
        output.writeUInt32NoTag(dieTimes);
      }
      if ((bitField0_ & 0x01000000) != 0) {
        output.writeRawLittleEndian16((short) 472);
        output.writeUInt32NoTag(reviveTimes);
      }
      if ((bitField0_ & 0x02000000) != 0) {
        output.writeRawLittleEndian16((short) 480);
        output.writeUInt32NoTag(breakTimes);
      }
      if ((bitField0_ & 0x04000000) != 0) {
        output.writeRawLittleEndian16((short) 488);
        output.writeUInt32NoTag(extraTurns);
      }
      if ((bitField0_ & 0x08000000) != 0) {
        output.writeRawLittleEndian16((short) 664);
        output.writeUInt32NoTag(assistUid);
      }
      if ((bitField0_ & 0x10000000) != 0) {
        output.writeRawLittleEndian16((short) 720);
        output.writeUInt32NoTag(eINCNMLBFJD);
      }
      if ((bitField0_ & 0x20000000) != 0) {
        output.writeRawLittleEndian16((short) 728);
        output.writeUInt32NoTag(jMOJBLEELFJ);
      }
      if ((bitField0_ & 0x40000000) != 0) {
        output.writeRawByte((byte) 8);
        output.writeEnumNoTag(avatarType);
      }
      if ((bitField0_ & 0x80000000) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(avatarStatus);
      }
      if ((bitField1_ & 0x00000001) != 0) {
        output.writeRawLittleEndian16((short) 650);
        output.writeMessageNoTag(initialStatus);
      }
      if ((bitField1_ & 0x00000002) != 0) {
        for (int i = 0; i < avatarSkill.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(avatarSkill.get(i));
        }
      }
      if ((bitField1_ & 0x00000004) != 0) {
        for (int i = 0; i < spAddSource.length(); i++) {
          output.writeRawLittleEndian16((short) 450);
          output.writeMessageNoTag(spAddSource.get(i));
        }
      }
      if ((bitField1_ & 0x00000008) != 0) {
        for (int i = 0; i < battleRelicList.length(); i++) {
          output.writeRawLittleEndian16((short) 658);
          output.writeMessageNoTag(battleRelicList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00002000) != 0) {
        size += 10;
      }
      if ((bitField0_ & 0x00004000) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(id);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(avatarLevel);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(avatarRank);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(avatarPromotion);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(totalTurns);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(stageId);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(stageType);
      }
      if ((bitField0_ & 0x00200000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(totalSpAdd);
      }
      if ((bitField0_ & 0x00400000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(totalBpCost);
      }
      if ((bitField0_ & 0x00800000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(dieTimes);
      }
      if ((bitField0_ & 0x01000000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(reviveTimes);
      }
      if ((bitField0_ & 0x02000000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(breakTimes);
      }
      if ((bitField0_ & 0x04000000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(extraTurns);
      }
      if ((bitField0_ & 0x08000000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(assistUid);
      }
      if ((bitField0_ & 0x10000000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(eINCNMLBFJD);
      }
      if ((bitField0_ & 0x20000000) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(jMOJBLEELFJ);
      }
      if ((bitField0_ & 0x40000000) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(avatarType);
      }
      if ((bitField0_ & 0x80000000) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(avatarStatus);
      }
      if ((bitField1_ & 0x00000001) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(initialStatus);
      }
      if ((bitField1_ & 0x00000002) != 0) {
        size += (1 * avatarSkill.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(avatarSkill);
      }
      if ((bitField1_ & 0x00000004) != 0) {
        size += (2 * spAddSource.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(spAddSource);
      }
      if ((bitField1_ & 0x00000008) != 0) {
        size += (2 * battleRelicList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(battleRelicList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public AvatarBattleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 81: {
            // totalDamage
            totalDamage = input.readDouble();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 89) {
              break;
            }
          }
          case 89: {
            // totalHeal
            totalHeal = input.readDouble();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 97) {
              break;
            }
          }
          case 97: {
            // totalDamageTaken
            totalDamageTaken = input.readDouble();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 105) {
              break;
            }
          }
          case 105: {
            // totalHpRecover
            totalHpRecover = input.readDouble();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 113) {
              break;
            }
          }
          case 113: {
            // totalSpCost
            totalSpCost = input.readDouble();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 137) {
              break;
            }
          }
          case 137: {
            // totalBreakDamage
            totalBreakDamage = input.readDouble();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 177) {
              break;
            }
          }
          case 177: {
            // delayCumulate
            delayCumulate = input.readDouble();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 241) {
              break;
            }
          }
          case 241: {
            // totalShield
            totalShield = input.readDouble();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 249) {
              break;
            }
          }
          case 249: {
            // totalShieldTaken
            totalShieldTaken = input.readDouble();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 257) {
              break;
            }
          }
          case 257: {
            // totalShieldDamage
            totalShieldDamage = input.readDouble();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 297) {
              break;
            }
          }
          case 297: {
            // gPHGHLGHNJF
            gPHGHLGHNJF = input.readDouble();
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 305) {
              break;
            }
          }
          case 305: {
            // hNMAEDKEMEO
            hNMAEDKEMEO = input.readDouble();
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 313) {
              break;
            }
          }
          case 313: {
            // kOKGBDEJBHL
            kOKGBDEJBHL = input.readDouble();
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 321) {
              break;
            }
          }
          case 321: {
            // fIICHEILPCF
            fIICHEILPCF = input.readDouble();
            bitField0_ |= 0x00002000;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // id
            id = input.readUInt32();
            bitField0_ |= 0x00004000;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // avatarLevel
            avatarLevel = input.readUInt32();
            bitField0_ |= 0x00008000;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // avatarRank
            avatarRank = input.readUInt32();
            bitField0_ |= 0x00010000;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // avatarPromotion
            avatarPromotion = input.readUInt32();
            bitField0_ |= 0x00020000;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // totalTurns
            totalTurns = input.readUInt32();
            bitField0_ |= 0x00040000;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // stageId
            stageId = input.readUInt32();
            bitField0_ |= 0x00080000;
            tag = input.readTag();
            if (tag != 128) {
              break;
            }
          }
          case 128: {
            // stageType
            stageType = input.readUInt32();
            bitField0_ |= 0x00100000;
            tag = input.readTag();
            if (tag != 184) {
              break;
            }
          }
          case 184: {
            // totalSpAdd
            totalSpAdd = input.readUInt32();
            bitField0_ |= 0x00200000;
            tag = input.readTag();
            if (tag != 200) {
              break;
            }
          }
          case 200: {
            // totalBpCost
            totalBpCost = input.readUInt32();
            bitField0_ |= 0x00400000;
            tag = input.readTag();
            if (tag != 208) {
              break;
            }
          }
          case 208: {
            // dieTimes
            dieTimes = input.readUInt32();
            bitField0_ |= 0x00800000;
            tag = input.readTag();
            if (tag != 216) {
              break;
            }
          }
          case 216: {
            // reviveTimes
            reviveTimes = input.readUInt32();
            bitField0_ |= 0x01000000;
            tag = input.readTag();
            if (tag != 224) {
              break;
            }
          }
          case 224: {
            // breakTimes
            breakTimes = input.readUInt32();
            bitField0_ |= 0x02000000;
            tag = input.readTag();
            if (tag != 232) {
              break;
            }
          }
          case 232: {
            // extraTurns
            extraTurns = input.readUInt32();
            bitField0_ |= 0x04000000;
            tag = input.readTag();
            if (tag != 280) {
              break;
            }
          }
          case 280: {
            // assistUid
            assistUid = input.readUInt32();
            bitField0_ |= 0x08000000;
            tag = input.readTag();
            if (tag != 336) {
              break;
            }
          }
          case 336: {
            // eINCNMLBFJD
            eINCNMLBFJD = input.readUInt32();
            bitField0_ |= 0x10000000;
            tag = input.readTag();
            if (tag != 344) {
              break;
            }
          }
          case 344: {
            // jMOJBLEELFJ
            jMOJBLEELFJ = input.readUInt32();
            bitField0_ |= 0x20000000;
            tag = input.readTag();
            if (tag != 8) {
              break;
            }
          }
          case 8: {
            // avatarType
            final int value = input.readInt32();
            if (AvatarTypeOuterClass.AvatarType.forNumber(value) != null) {
              avatarType = value;
              bitField0_ |= 0x40000000;
            }
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // avatarStatus
            input.readMessage(avatarStatus);
            bitField0_ |= 0x80000000;
            tag = input.readTag();
            if (tag != 266) {
              break;
            }
          }
          case 266: {
            // initialStatus
            input.readMessage(initialStatus);
            bitField1_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // avatarSkill
            tag = input.readRepeatedMessage(avatarSkill, tag);
            bitField1_ |= 0x00000002;
            if (tag != 194) {
              break;
            }
          }
          case 194: {
            // spAddSource
            tag = input.readRepeatedMessage(spAddSource, tag);
            bitField1_ |= 0x00000004;
            if (tag != 274) {
              break;
            }
          }
          case 274: {
            // battleRelicList
            tag = input.readRepeatedMessage(battleRelicList, tag);
            bitField1_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeDouble(FieldNames.totalDamage, totalDamage);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeDouble(FieldNames.totalHeal, totalHeal);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeDouble(FieldNames.totalDamageTaken, totalDamageTaken);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeDouble(FieldNames.totalHpRecover, totalHpRecover);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeDouble(FieldNames.totalSpCost, totalSpCost);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeDouble(FieldNames.totalBreakDamage, totalBreakDamage);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeDouble(FieldNames.delayCumulate, delayCumulate);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeDouble(FieldNames.totalShield, totalShield);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeDouble(FieldNames.totalShieldTaken, totalShieldTaken);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeDouble(FieldNames.totalShieldDamage, totalShieldDamage);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeDouble(FieldNames.gPHGHLGHNJF, gPHGHLGHNJF);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeDouble(FieldNames.hNMAEDKEMEO, hNMAEDKEMEO);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeDouble(FieldNames.kOKGBDEJBHL, kOKGBDEJBHL);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeDouble(FieldNames.fIICHEILPCF, fIICHEILPCF);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeUInt32(FieldNames.id, id);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeUInt32(FieldNames.avatarLevel, avatarLevel);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeUInt32(FieldNames.avatarRank, avatarRank);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeUInt32(FieldNames.avatarPromotion, avatarPromotion);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        output.writeUInt32(FieldNames.totalTurns, totalTurns);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        output.writeUInt32(FieldNames.stageId, stageId);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        output.writeUInt32(FieldNames.stageType, stageType);
      }
      if ((bitField0_ & 0x00200000) != 0) {
        output.writeUInt32(FieldNames.totalSpAdd, totalSpAdd);
      }
      if ((bitField0_ & 0x00400000) != 0) {
        output.writeUInt32(FieldNames.totalBpCost, totalBpCost);
      }
      if ((bitField0_ & 0x00800000) != 0) {
        output.writeUInt32(FieldNames.dieTimes, dieTimes);
      }
      if ((bitField0_ & 0x01000000) != 0) {
        output.writeUInt32(FieldNames.reviveTimes, reviveTimes);
      }
      if ((bitField0_ & 0x02000000) != 0) {
        output.writeUInt32(FieldNames.breakTimes, breakTimes);
      }
      if ((bitField0_ & 0x04000000) != 0) {
        output.writeUInt32(FieldNames.extraTurns, extraTurns);
      }
      if ((bitField0_ & 0x08000000) != 0) {
        output.writeUInt32(FieldNames.assistUid, assistUid);
      }
      if ((bitField0_ & 0x10000000) != 0) {
        output.writeUInt32(FieldNames.eINCNMLBFJD, eINCNMLBFJD);
      }
      if ((bitField0_ & 0x20000000) != 0) {
        output.writeUInt32(FieldNames.jMOJBLEELFJ, jMOJBLEELFJ);
      }
      if ((bitField0_ & 0x40000000) != 0) {
        output.writeEnum(FieldNames.avatarType, avatarType, AvatarTypeOuterClass.AvatarType.converter());
      }
      if ((bitField0_ & 0x80000000) != 0) {
        output.writeMessage(FieldNames.avatarStatus, avatarStatus);
      }
      if ((bitField1_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.initialStatus, initialStatus);
      }
      if ((bitField1_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.avatarSkill, avatarSkill);
      }
      if ((bitField1_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.spAddSource, spAddSource);
      }
      if ((bitField1_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.battleRelicList, battleRelicList);
      }
      output.endObject();
    }

    @Override
    public AvatarBattleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1182674989:
          case 259733706: {
            if (input.isAtField(FieldNames.totalDamage)) {
              if (!input.trySkipNullValue()) {
                totalDamage = input.readDouble();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -577643700:
          case -705751549: {
            if (input.isAtField(FieldNames.totalHeal)) {
              if (!input.trySkipNullValue()) {
                totalHeal = input.readDouble();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1222408012:
          case 176732434: {
            if (input.isAtField(FieldNames.totalDamageTaken)) {
              if (!input.trySkipNullValue()) {
                totalDamageTaken = input.readDouble();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2097926056:
          case 1292755208: {
            if (input.isAtField(FieldNames.totalHpRecover)) {
              if (!input.trySkipNullValue()) {
                totalHpRecover = input.readDouble();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -740622290:
          case 306039412: {
            if (input.isAtField(FieldNames.totalSpCost)) {
              if (!input.trySkipNullValue()) {
                totalSpCost = input.readDouble();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1071861910:
          case -1515528246: {
            if (input.isAtField(FieldNames.totalBreakDamage)) {
              if (!input.trySkipNullValue()) {
                totalBreakDamage = input.readDouble();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -961026589:
          case -1812302212: {
            if (input.isAtField(FieldNames.delayCumulate)) {
              if (!input.trySkipNullValue()) {
                delayCumulate = input.readDouble();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -746888243:
          case 695520452: {
            if (input.isAtField(FieldNames.totalShield)) {
              if (!input.trySkipNullValue()) {
                totalShield = input.readDouble();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1942577402:
          case -492967540: {
            if (input.isAtField(FieldNames.totalShieldTaken)) {
              if (!input.trySkipNullValue()) {
                totalShieldTaken = input.readDouble();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -367653476:
          case 1439864650: {
            if (input.isAtField(FieldNames.totalShieldDamage)) {
              if (!input.trySkipNullValue()) {
                totalShieldDamage = input.readDouble();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1953563043: {
            if (input.isAtField(FieldNames.gPHGHLGHNJF)) {
              if (!input.trySkipNullValue()) {
                gPHGHLGHNJF = input.readDouble();
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 30241412: {
            if (input.isAtField(FieldNames.hNMAEDKEMEO)) {
              if (!input.trySkipNullValue()) {
                hNMAEDKEMEO = input.readDouble();
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1551763775: {
            if (input.isAtField(FieldNames.kOKGBDEJBHL)) {
              if (!input.trySkipNullValue()) {
                kOKGBDEJBHL = input.readDouble();
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 831785494: {
            if (input.isAtField(FieldNames.fIICHEILPCF)) {
              if (!input.trySkipNullValue()) {
                fIICHEILPCF = input.readDouble();
                bitField0_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3355: {
            if (input.isAtField(FieldNames.id)) {
              if (!input.trySkipNullValue()) {
                id = input.readUInt32();
                bitField0_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 379312555:
          case -576284386: {
            if (input.isAtField(FieldNames.avatarLevel)) {
              if (!input.trySkipNullValue()) {
                avatarLevel = input.readUInt32();
                bitField0_ |= 0x00008000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -403231451:
          case 397226834: {
            if (input.isAtField(FieldNames.avatarRank)) {
              if (!input.trySkipNullValue()) {
                avatarRank = input.readUInt32();
                bitField0_ |= 0x00010000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2142097226:
          case 999660861: {
            if (input.isAtField(FieldNames.avatarPromotion)) {
              if (!input.trySkipNullValue()) {
                avatarPromotion = input.readUInt32();
                bitField0_ |= 0x00020000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -715510094:
          case -391886117: {
            if (input.isAtField(FieldNames.totalTurns)) {
              if (!input.trySkipNullValue()) {
                totalTurns = input.readUInt32();
                bitField0_ |= 0x00040000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1897528135:
          case 1306191356: {
            if (input.isAtField(FieldNames.stageId)) {
              if (!input.trySkipNullValue()) {
                stageId = input.readUInt32();
                bitField0_ |= 0x00080000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1836914520:
          case 1119794139: {
            if (input.isAtField(FieldNames.stageType)) {
              if (!input.trySkipNullValue()) {
                stageType = input.readUInt32();
                bitField0_ |= 0x00100000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -716629984:
          case 702606618: {
            if (input.isAtField(FieldNames.totalSpAdd)) {
              if (!input.trySkipNullValue()) {
                totalSpAdd = input.readUInt32();
                bitField0_ |= 0x00200000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1227317857:
          case -1896621277: {
            if (input.isAtField(FieldNames.totalBpCost)) {
              if (!input.trySkipNullValue()) {
                totalBpCost = input.readUInt32();
                bitField0_ |= 0x00400000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -141663578:
          case 228363975: {
            if (input.isAtField(FieldNames.dieTimes)) {
              if (!input.trySkipNullValue()) {
                dieTimes = input.readUInt32();
                bitField0_ |= 0x00800000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1258181903:
          case -23965732: {
            if (input.isAtField(FieldNames.reviveTimes)) {
              if (!input.trySkipNullValue()) {
                reviveTimes = input.readUInt32();
                bitField0_ |= 0x01000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1292993927:
          case 1753073670: {
            if (input.isAtField(FieldNames.breakTimes)) {
              if (!input.trySkipNullValue()) {
                breakTimes = input.readUInt32();
                bitField0_ |= 0x02000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 737744230:
          case 1709324967: {
            if (input.isAtField(FieldNames.extraTurns)) {
              if (!input.trySkipNullValue()) {
                extraTurns = input.readUInt32();
                bitField0_ |= 0x04000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1429816615:
          case 1374951802: {
            if (input.isAtField(FieldNames.assistUid)) {
              if (!input.trySkipNullValue()) {
                assistUid = input.readUInt32();
                bitField0_ |= 0x08000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -852016910: {
            if (input.isAtField(FieldNames.eINCNMLBFJD)) {
              if (!input.trySkipNullValue()) {
                eINCNMLBFJD = input.readUInt32();
                bitField0_ |= 0x10000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1969249096: {
            if (input.isAtField(FieldNames.jMOJBLEELFJ)) {
              if (!input.trySkipNullValue()) {
                jMOJBLEELFJ = input.readUInt32();
                bitField0_ |= 0x20000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -403148749:
          case 397309536: {
            if (input.isAtField(FieldNames.avatarType)) {
              if (!input.trySkipNullValue()) {
                final AvatarTypeOuterClass.AvatarType value = input.readEnum(AvatarTypeOuterClass.AvatarType.converter());
                if (value != null) {
                  avatarType = value.getNumber();
                  bitField0_ |= 0x40000000;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -912566613:
          case -471300712: {
            if (input.isAtField(FieldNames.avatarStatus)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(avatarStatus);
                bitField0_ |= 0x80000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -153186218:
          case 1594655053: {
            if (input.isAtField(FieldNames.initialStatus)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(initialStatus);
                bitField1_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 385943672:
          case -569653269: {
            if (input.isAtField(FieldNames.avatarSkill)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(avatarSkill);
                bitField1_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 974649919:
          case 1039646875: {
            if (input.isAtField(FieldNames.spAddSource)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(spAddSource);
                bitField1_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1073894617:
          case -839813167: {
            if (input.isAtField(FieldNames.battleRelicList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(battleRelicList);
                bitField1_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public AvatarBattleInfo clone() {
      return new AvatarBattleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_ | bitField1_) == 0);
    }

    public static AvatarBattleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new AvatarBattleInfo(), data).checkInitialized();
    }

    public static AvatarBattleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AvatarBattleInfo(), input).checkInitialized();
    }

    public static AvatarBattleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AvatarBattleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating AvatarBattleInfo messages
     */
    public static MessageFactory<AvatarBattleInfo> getFactory() {
      return AvatarBattleInfoFactory.INSTANCE;
    }

    private enum AvatarBattleInfoFactory implements MessageFactory<AvatarBattleInfo> {
      INSTANCE;

      @Override
      public AvatarBattleInfo create() {
        return AvatarBattleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName totalDamage = FieldName.forField("totalDamage", "total_damage");

      static final FieldName totalHeal = FieldName.forField("totalHeal", "total_heal");

      static final FieldName totalDamageTaken = FieldName.forField("totalDamageTaken", "total_damage_taken");

      static final FieldName totalHpRecover = FieldName.forField("totalHpRecover", "total_hp_recover");

      static final FieldName totalSpCost = FieldName.forField("totalSpCost", "total_sp_cost");

      static final FieldName totalBreakDamage = FieldName.forField("totalBreakDamage", "total_break_damage");

      static final FieldName delayCumulate = FieldName.forField("delayCumulate", "delay_cumulate");

      static final FieldName totalShield = FieldName.forField("totalShield", "total_shield");

      static final FieldName totalShieldTaken = FieldName.forField("totalShieldTaken", "total_shield_taken");

      static final FieldName totalShieldDamage = FieldName.forField("totalShieldDamage", "total_shield_damage");

      static final FieldName gPHGHLGHNJF = FieldName.forField("GPHGHLGHNJF");

      static final FieldName hNMAEDKEMEO = FieldName.forField("HNMAEDKEMEO");

      static final FieldName kOKGBDEJBHL = FieldName.forField("KOKGBDEJBHL");

      static final FieldName fIICHEILPCF = FieldName.forField("FIICHEILPCF");

      static final FieldName id = FieldName.forField("id");

      static final FieldName avatarLevel = FieldName.forField("avatarLevel", "avatar_level");

      static final FieldName avatarRank = FieldName.forField("avatarRank", "avatar_rank");

      static final FieldName avatarPromotion = FieldName.forField("avatarPromotion", "avatar_promotion");

      static final FieldName totalTurns = FieldName.forField("totalTurns", "total_turns");

      static final FieldName stageId = FieldName.forField("stageId", "stage_id");

      static final FieldName stageType = FieldName.forField("stageType", "stage_type");

      static final FieldName totalSpAdd = FieldName.forField("totalSpAdd", "total_sp_add");

      static final FieldName totalBpCost = FieldName.forField("totalBpCost", "total_bp_cost");

      static final FieldName dieTimes = FieldName.forField("dieTimes", "die_times");

      static final FieldName reviveTimes = FieldName.forField("reviveTimes", "revive_times");

      static final FieldName breakTimes = FieldName.forField("breakTimes", "break_times");

      static final FieldName extraTurns = FieldName.forField("extraTurns", "extra_turns");

      static final FieldName assistUid = FieldName.forField("assistUid", "assist_uid");

      static final FieldName eINCNMLBFJD = FieldName.forField("EINCNMLBFJD");

      static final FieldName jMOJBLEELFJ = FieldName.forField("JMOJBLEELFJ");

      static final FieldName avatarType = FieldName.forField("avatarType", "avatar_type");

      static final FieldName avatarStatus = FieldName.forField("avatarStatus", "avatar_status");

      static final FieldName initialStatus = FieldName.forField("initialStatus", "initial_status");

      static final FieldName avatarSkill = FieldName.forField("avatarSkill", "avatar_skill");

      static final FieldName spAddSource = FieldName.forField("spAddSource", "sp_add_source");

      static final FieldName battleRelicList = FieldName.forField("battleRelicList", "battle_relic_list");
    }
  }
}
