// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class SecretKeyInfoOuterClass {
  /**
   * Protobuf type {@code SecretKeyInfo}
   */
  public static final class SecretKeyInfo extends ProtoMessage<SecretKeyInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .SecretKeyType slot = 4;</code>
     */
    private int slot;

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     */
    private final Utf8String iCEGNEOLFAN = Utf8String.newEmptyInstance();

    private SecretKeyInfo() {
    }

    /**
     * @return a new empty instance of {@code SecretKeyInfo}
     */
    public static SecretKeyInfo newInstance() {
      return new SecretKeyInfo();
    }

    /**
     * <code>optional .SecretKeyType slot = 4;</code>
     * @return whether the slot field is set
     */
    public boolean hasSlot() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .SecretKeyType slot = 4;</code>
     * @return this
     */
    public SecretKeyInfo clearSlot() {
      bitField0_ &= ~0x00000001;
      slot = 0;
      return this;
    }

    /**
     * <code>optional .SecretKeyType slot = 4;</code>
     * @return the slot
     */
    public SecretKeyTypeOuterClass.SecretKeyType getSlot() {
      return SecretKeyTypeOuterClass.SecretKeyType.forNumber(slot);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SecretKeyInfo#getSlot()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getSlotValue() {
      return slot;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link SecretKeyTypeOuterClass.SecretKeyType}. Setting an invalid value
     * can cause {@link SecretKeyInfo#getSlot()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SecretKeyInfo setSlotValue(final int value) {
      bitField0_ |= 0x00000001;
      slot = value;
      return this;
    }

    /**
     * <code>optional .SecretKeyType slot = 4;</code>
     * @param value the slot to set
     * @return this
     */
    public SecretKeyInfo setSlot(final SecretKeyTypeOuterClass.SecretKeyType value) {
      bitField0_ |= 0x00000001;
      slot = value.getNumber();
      return this;
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @return whether the iCEGNEOLFAN field is set
     */
    public boolean hasICEGNEOLFAN() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @return this
     */
    public SecretKeyInfo clearICEGNEOLFAN() {
      bitField0_ &= ~0x00000002;
      iCEGNEOLFAN.clear();
      return this;
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @return the iCEGNEOLFAN
     */
    public String getICEGNEOLFAN() {
      return iCEGNEOLFAN.getString();
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @return internal {@code Utf8String} representation of iCEGNEOLFAN for reading
     */
    public Utf8String getICEGNEOLFANBytes() {
      return this.iCEGNEOLFAN;
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @return internal {@code Utf8String} representation of iCEGNEOLFAN for modifications
     */
    public Utf8String getMutableICEGNEOLFANBytes() {
      bitField0_ |= 0x00000002;
      return this.iCEGNEOLFAN;
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @param value the iCEGNEOLFAN to set
     * @return this
     */
    public SecretKeyInfo setICEGNEOLFAN(final CharSequence value) {
      bitField0_ |= 0x00000002;
      iCEGNEOLFAN.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ICEGNEOLFAN = 15;</code>
     * @param value the iCEGNEOLFAN to set
     * @return this
     */
    public SecretKeyInfo setICEGNEOLFAN(final Utf8String value) {
      bitField0_ |= 0x00000002;
      iCEGNEOLFAN.copyFrom(value);
      return this;
    }

    @Override
    public SecretKeyInfo copyFrom(final SecretKeyInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        slot = other.slot;
        iCEGNEOLFAN.copyFrom(other.iCEGNEOLFAN);
      }
      return this;
    }

    @Override
    public SecretKeyInfo mergeFrom(final SecretKeyInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSlot()) {
        setSlotValue(other.slot);
      }
      if (other.hasICEGNEOLFAN()) {
        getMutableICEGNEOLFANBytes().copyFrom(other.iCEGNEOLFAN);
      }
      return this;
    }

    @Override
    public SecretKeyInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      slot = 0;
      iCEGNEOLFAN.clear();
      return this;
    }

    @Override
    public SecretKeyInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iCEGNEOLFAN.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SecretKeyInfo)) {
        return false;
      }
      SecretKeyInfo other = (SecretKeyInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasSlot() || slot == other.slot)
        && (!hasICEGNEOLFAN() || iCEGNEOLFAN.equals(other.iCEGNEOLFAN));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeEnumNoTag(slot);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 122);
        output.writeStringNoTag(iCEGNEOLFAN);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(slot);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(iCEGNEOLFAN);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SecretKeyInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // slot
            final int value = input.readInt32();
            if (SecretKeyTypeOuterClass.SecretKeyType.forNumber(value) != null) {
              slot = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // iCEGNEOLFAN
            input.readString(iCEGNEOLFAN);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.slot, slot, SecretKeyTypeOuterClass.SecretKeyType.converter());
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeString(FieldNames.iCEGNEOLFAN, iCEGNEOLFAN);
      }
      output.endObject();
    }

    @Override
    public SecretKeyInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3533310: {
            if (input.isAtField(FieldNames.slot)) {
              if (!input.trySkipNullValue()) {
                final SecretKeyTypeOuterClass.SecretKeyType value = input.readEnum(SecretKeyTypeOuterClass.SecretKeyType.converter());
                if (value != null) {
                  slot = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1028243997: {
            if (input.isAtField(FieldNames.iCEGNEOLFAN)) {
              if (!input.trySkipNullValue()) {
                input.readString(iCEGNEOLFAN);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SecretKeyInfo clone() {
      return new SecretKeyInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SecretKeyInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SecretKeyInfo(), data).checkInitialized();
    }

    public static SecretKeyInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SecretKeyInfo(), input).checkInitialized();
    }

    public static SecretKeyInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SecretKeyInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating SecretKeyInfo messages
     */
    public static MessageFactory<SecretKeyInfo> getFactory() {
      return SecretKeyInfoFactory.INSTANCE;
    }

    private enum SecretKeyInfoFactory implements MessageFactory<SecretKeyInfo> {
      INSTANCE;

      @Override
      public SecretKeyInfo create() {
        return SecretKeyInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName slot = FieldName.forField("slot");

      static final FieldName iCEGNEOLFAN = FieldName.forField("ICEGNEOLFAN");
    }
  }
}
