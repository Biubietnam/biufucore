// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedByte;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetSecretKeyInfoScRspOuterClass {
  /**
   * Protobuf type {@code GetSecretKeyInfoScRsp}
   */
  public static final class GetSecretKeyInfoScRsp extends ProtoMessage<GetSecretKeyInfoScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 6;</code>
     */
    private int retcode;

    /**
     * <code>optional bytes rsp_key = 7;</code>
     */
    private final RepeatedByte rspKey = RepeatedByte.newEmptyInstance();

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     */
    private final RepeatedMessage<SecretKeyInfoOuterClass.SecretKeyInfo> keyInfo = RepeatedMessage.newEmptyInstance(SecretKeyInfoOuterClass.SecretKeyInfo.getFactory());

    private GetSecretKeyInfoScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetSecretKeyInfoScRsp}
     */
    public static GetSecretKeyInfoScRsp newInstance() {
      return new GetSecretKeyInfoScRsp();
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @return this
     */
    public GetSecretKeyInfoScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetSecretKeyInfoScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     * @return whether the rspKey field is set
     */
    public boolean hasRspKey() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     * @return this
     */
    public GetSecretKeyInfoScRsp clearRspKey() {
      bitField0_ &= ~0x00000002;
      rspKey.clear();
      return this;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRspKey()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedByte getRspKey() {
      return rspKey;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedByte getMutableRspKey() {
      bitField0_ |= 0x00000002;
      return rspKey;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     * @param value the rspKey to add
     * @return this
     */
    public GetSecretKeyInfoScRsp addRspKey(final byte value) {
      bitField0_ |= 0x00000002;
      rspKey.add(value);
      return this;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     * @param values the rspKey to add
     * @return this
     */
    public GetSecretKeyInfoScRsp addAllRspKey(final byte... values) {
      bitField0_ |= 0x00000002;
      rspKey.addAll(values);
      return this;
    }

    /**
     * <code>optional bytes rsp_key = 7;</code>
     * @param values the rspKey to set
     * @return this
     */
    public GetSecretKeyInfoScRsp setRspKey(final byte... values) {
      bitField0_ |= 0x00000002;
      rspKey.copyFrom(values);
      return this;
    }

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     * @return whether the keyInfo field is set
     */
    public boolean hasKeyInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     * @return this
     */
    public GetSecretKeyInfoScRsp clearKeyInfo() {
      bitField0_ &= ~0x00000004;
      keyInfo.clear();
      return this;
    }

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableKeyInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<SecretKeyInfoOuterClass.SecretKeyInfo> getKeyInfo() {
      return keyInfo;
    }

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<SecretKeyInfoOuterClass.SecretKeyInfo> getMutableKeyInfo() {
      bitField0_ |= 0x00000004;
      return keyInfo;
    }

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     * @param value the keyInfo to add
     * @return this
     */
    public GetSecretKeyInfoScRsp addKeyInfo(final SecretKeyInfoOuterClass.SecretKeyInfo value) {
      bitField0_ |= 0x00000004;
      keyInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .SecretKeyInfo key_info = 3;</code>
     * @param values the keyInfo to add
     * @return this
     */
    public GetSecretKeyInfoScRsp addAllKeyInfo(
        final SecretKeyInfoOuterClass.SecretKeyInfo... values) {
      bitField0_ |= 0x00000004;
      keyInfo.addAll(values);
      return this;
    }

    @Override
    public GetSecretKeyInfoScRsp copyFrom(final GetSecretKeyInfoScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        rspKey.copyFrom(other.rspKey);
        keyInfo.copyFrom(other.keyInfo);
      }
      return this;
    }

    @Override
    public GetSecretKeyInfoScRsp mergeFrom(final GetSecretKeyInfoScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasRspKey()) {
        getMutableRspKey().copyFrom(other.rspKey);
      }
      if (other.hasKeyInfo()) {
        getMutableKeyInfo().addAll(other.keyInfo);
      }
      return this;
    }

    @Override
    public GetSecretKeyInfoScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      rspKey.clear();
      keyInfo.clear();
      return this;
    }

    @Override
    public GetSecretKeyInfoScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rspKey.clear();
      keyInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetSecretKeyInfoScRsp)) {
        return false;
      }
      GetSecretKeyInfoScRsp other = (GetSecretKeyInfoScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasRspKey() || rspKey.equals(other.rspKey))
        && (!hasKeyInfo() || keyInfo.equals(other.keyInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 58);
        output.writeBytesNoTag(rspKey);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < keyInfo.length(); i++) {
          output.writeRawByte((byte) 26);
          output.writeMessageNoTag(keyInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeBytesSizeNoTag(rspKey);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * keyInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(keyInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetSecretKeyInfoScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 48: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // rspKey
            input.readBytes(rspKey);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // keyInfo
            tag = input.readRepeatedMessage(keyInfo, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBytes(FieldNames.rspKey, rspKey);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.keyInfo, keyInfo);
      }
      output.endObject();
    }

    @Override
    public GetSecretKeyInfoScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -921627248:
          case 1494927471: {
            if (input.isAtField(FieldNames.rspKey)) {
              if (!input.trySkipNullValue()) {
                input.readBytes(rspKey);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -815779923:
          case 500802190: {
            if (input.isAtField(FieldNames.keyInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(keyInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetSecretKeyInfoScRsp clone() {
      return new GetSecretKeyInfoScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetSecretKeyInfoScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetSecretKeyInfoScRsp(), data).checkInitialized();
    }

    public static GetSecretKeyInfoScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetSecretKeyInfoScRsp(), input).checkInitialized();
    }

    public static GetSecretKeyInfoScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetSecretKeyInfoScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetSecretKeyInfoScRsp messages
     */
    public static MessageFactory<GetSecretKeyInfoScRsp> getFactory() {
      return GetSecretKeyInfoScRspFactory.INSTANCE;
    }

    private enum GetSecretKeyInfoScRspFactory implements MessageFactory<GetSecretKeyInfoScRsp> {
      INSTANCE;

      @Override
      public GetSecretKeyInfoScRsp create() {
        return GetSecretKeyInfoScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName rspKey = FieldName.forField("rspKey", "rsp_key");

      static final FieldName keyInfo = FieldName.forField("keyInfo", "key_info");
    }
  }
}
