// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class SetPlayerInfoCsReqOuterClass {
  /**
   * <pre>
   *  MJEJLDGKELE
   * </pre>
   *
   * Protobuf type {@code SetPlayerInfoCsReq}
   */
  public static final class SetPlayerInfoCsReq extends ProtoMessage<SetPlayerInfoCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .Gender MLMJPADHNFE = 6;</code>
     */
    private int mLMJPADHNFE;

    /**
     * <code>optional bool is_modify = 7;</code>
     */
    private boolean isModify;

    /**
     * <code>optional string nickname = 5;</code>
     */
    private final Utf8String nickname = Utf8String.newEmptyInstance();

    private SetPlayerInfoCsReq() {
    }

    /**
     * <pre>
     *  MJEJLDGKELE
     * </pre>
     *
     * @return a new empty instance of {@code SetPlayerInfoCsReq}
     */
    public static SetPlayerInfoCsReq newInstance() {
      return new SetPlayerInfoCsReq();
    }

    /**
     * <code>optional .Gender MLMJPADHNFE = 6;</code>
     * @return whether the mLMJPADHNFE field is set
     */
    public boolean hasMLMJPADHNFE() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .Gender MLMJPADHNFE = 6;</code>
     * @return this
     */
    public SetPlayerInfoCsReq clearMLMJPADHNFE() {
      bitField0_ &= ~0x00000001;
      mLMJPADHNFE = 0;
      return this;
    }

    /**
     * <code>optional .Gender MLMJPADHNFE = 6;</code>
     * @return the mLMJPADHNFE
     */
    public GenderOuterClass.Gender getMLMJPADHNFE() {
      return GenderOuterClass.Gender.forNumber(mLMJPADHNFE);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SetPlayerInfoCsReq#getMLMJPADHNFE()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getMLMJPADHNFEValue() {
      return mLMJPADHNFE;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link GenderOuterClass.Gender}. Setting an invalid value
     * can cause {@link SetPlayerInfoCsReq#getMLMJPADHNFE()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SetPlayerInfoCsReq setMLMJPADHNFEValue(final int value) {
      bitField0_ |= 0x00000001;
      mLMJPADHNFE = value;
      return this;
    }

    /**
     * <code>optional .Gender MLMJPADHNFE = 6;</code>
     * @param value the mLMJPADHNFE to set
     * @return this
     */
    public SetPlayerInfoCsReq setMLMJPADHNFE(final GenderOuterClass.Gender value) {
      bitField0_ |= 0x00000001;
      mLMJPADHNFE = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool is_modify = 7;</code>
     * @return whether the isModify field is set
     */
    public boolean hasIsModify() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool is_modify = 7;</code>
     * @return this
     */
    public SetPlayerInfoCsReq clearIsModify() {
      bitField0_ &= ~0x00000002;
      isModify = false;
      return this;
    }

    /**
     * <code>optional bool is_modify = 7;</code>
     * @return the isModify
     */
    public boolean getIsModify() {
      return isModify;
    }

    /**
     * <code>optional bool is_modify = 7;</code>
     * @param value the isModify to set
     * @return this
     */
    public SetPlayerInfoCsReq setIsModify(final boolean value) {
      bitField0_ |= 0x00000002;
      isModify = value;
      return this;
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @return whether the nickname field is set
     */
    public boolean hasNickname() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @return this
     */
    public SetPlayerInfoCsReq clearNickname() {
      bitField0_ &= ~0x00000004;
      nickname.clear();
      return this;
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @return the nickname
     */
    public String getNickname() {
      return nickname.getString();
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @return internal {@code Utf8String} representation of nickname for reading
     */
    public Utf8String getNicknameBytes() {
      return this.nickname;
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @return internal {@code Utf8String} representation of nickname for modifications
     */
    public Utf8String getMutableNicknameBytes() {
      bitField0_ |= 0x00000004;
      return this.nickname;
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @param value the nickname to set
     * @return this
     */
    public SetPlayerInfoCsReq setNickname(final CharSequence value) {
      bitField0_ |= 0x00000004;
      nickname.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string nickname = 5;</code>
     * @param value the nickname to set
     * @return this
     */
    public SetPlayerInfoCsReq setNickname(final Utf8String value) {
      bitField0_ |= 0x00000004;
      nickname.copyFrom(value);
      return this;
    }

    @Override
    public SetPlayerInfoCsReq copyFrom(final SetPlayerInfoCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mLMJPADHNFE = other.mLMJPADHNFE;
        isModify = other.isModify;
        nickname.copyFrom(other.nickname);
      }
      return this;
    }

    @Override
    public SetPlayerInfoCsReq mergeFrom(final SetPlayerInfoCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMLMJPADHNFE()) {
        setMLMJPADHNFEValue(other.mLMJPADHNFE);
      }
      if (other.hasIsModify()) {
        setIsModify(other.isModify);
      }
      if (other.hasNickname()) {
        getMutableNicknameBytes().copyFrom(other.nickname);
      }
      return this;
    }

    @Override
    public SetPlayerInfoCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mLMJPADHNFE = 0;
      isModify = false;
      nickname.clear();
      return this;
    }

    @Override
    public SetPlayerInfoCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nickname.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SetPlayerInfoCsReq)) {
        return false;
      }
      SetPlayerInfoCsReq other = (SetPlayerInfoCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasMLMJPADHNFE() || mLMJPADHNFE == other.mLMJPADHNFE)
        && (!hasIsModify() || isModify == other.isModify)
        && (!hasNickname() || nickname.equals(other.nickname));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 48);
        output.writeEnumNoTag(mLMJPADHNFE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(isModify);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 42);
        output.writeStringNoTag(nickname);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(mLMJPADHNFE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(nickname);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SetPlayerInfoCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 48: {
            // mLMJPADHNFE
            final int value = input.readInt32();
            if (GenderOuterClass.Gender.forNumber(value) != null) {
              mLMJPADHNFE = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // isModify
            isModify = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // nickname
            input.readString(nickname);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.mLMJPADHNFE, mLMJPADHNFE, GenderOuterClass.Gender.converter());
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isModify, isModify);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeString(FieldNames.nickname, nickname);
      }
      output.endObject();
    }

    @Override
    public SetPlayerInfoCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -385785796: {
            if (input.isAtField(FieldNames.mLMJPADHNFE)) {
              if (!input.trySkipNullValue()) {
                final GenderOuterClass.Gender value = input.readEnum(GenderOuterClass.Gender.converter());
                if (value != null) {
                  mLMJPADHNFE = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -394761596:
          case -604756625: {
            if (input.isAtField(FieldNames.isModify)) {
              if (!input.trySkipNullValue()) {
                isModify = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 70690926: {
            if (input.isAtField(FieldNames.nickname)) {
              if (!input.trySkipNullValue()) {
                input.readString(nickname);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SetPlayerInfoCsReq clone() {
      return new SetPlayerInfoCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SetPlayerInfoCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SetPlayerInfoCsReq(), data).checkInitialized();
    }

    public static SetPlayerInfoCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetPlayerInfoCsReq(), input).checkInitialized();
    }

    public static SetPlayerInfoCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetPlayerInfoCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating SetPlayerInfoCsReq messages
     */
    public static MessageFactory<SetPlayerInfoCsReq> getFactory() {
      return SetPlayerInfoCsReqFactory.INSTANCE;
    }

    private enum SetPlayerInfoCsReqFactory implements MessageFactory<SetPlayerInfoCsReq> {
      INSTANCE;

      @Override
      public SetPlayerInfoCsReq create() {
        return SetPlayerInfoCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mLMJPADHNFE = FieldName.forField("MLMJPADHNFE");

      static final FieldName isModify = FieldName.forField("isModify", "is_modify");

      static final FieldName nickname = FieldName.forField("nickname");
    }
  }
}
