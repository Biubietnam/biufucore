// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class MusicRhythmDataScRspOuterClass {
  /**
   * Protobuf type {@code MusicRhythmDataScRsp}
   */
  public static final class MusicRhythmDataScRsp extends ProtoMessage<MusicRhythmDataScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 PEFCBMODPOI = 2;</code>
     */
    private int pEFCBMODPOI;

    /**
     * <code>optional uint32 BMJGCIILHCA = 10;</code>
     */
    private int bMJGCIILHCA;

    /**
     * <code>optional uint32 retcode = 12;</code>
     */
    private int retcode;

    /**
     * <code>optional bool FCLINCKMILK = 6;</code>
     */
    private boolean fCLINCKMILK;

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     */
    private final RepeatedInt fEAHHAMLDFB = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     */
    private final RepeatedInt oPFOILFDBKG = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     */
    private final RepeatedInt gBMLNHOCJMO = RepeatedInt.newEmptyInstance();

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     */
    private final RepeatedMessage<HEKPICHLMENOuterClass.HEKPICHLMEN> mFIFEBCDIMM = RepeatedMessage.newEmptyInstance(HEKPICHLMENOuterClass.HEKPICHLMEN.getFactory());

    private MusicRhythmDataScRsp() {
    }

    /**
     * @return a new empty instance of {@code MusicRhythmDataScRsp}
     */
    public static MusicRhythmDataScRsp newInstance() {
      return new MusicRhythmDataScRsp();
    }

    /**
     * <code>optional uint32 PEFCBMODPOI = 2;</code>
     * @return whether the pEFCBMODPOI field is set
     */
    public boolean hasPEFCBMODPOI() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 PEFCBMODPOI = 2;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearPEFCBMODPOI() {
      bitField0_ &= ~0x00000001;
      pEFCBMODPOI = 0;
      return this;
    }

    /**
     * <code>optional uint32 PEFCBMODPOI = 2;</code>
     * @return the pEFCBMODPOI
     */
    public int getPEFCBMODPOI() {
      return pEFCBMODPOI;
    }

    /**
     * <code>optional uint32 PEFCBMODPOI = 2;</code>
     * @param value the pEFCBMODPOI to set
     * @return this
     */
    public MusicRhythmDataScRsp setPEFCBMODPOI(final int value) {
      bitField0_ |= 0x00000001;
      pEFCBMODPOI = value;
      return this;
    }

    /**
     * <code>optional uint32 BMJGCIILHCA = 10;</code>
     * @return whether the bMJGCIILHCA field is set
     */
    public boolean hasBMJGCIILHCA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 BMJGCIILHCA = 10;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearBMJGCIILHCA() {
      bitField0_ &= ~0x00000002;
      bMJGCIILHCA = 0;
      return this;
    }

    /**
     * <code>optional uint32 BMJGCIILHCA = 10;</code>
     * @return the bMJGCIILHCA
     */
    public int getBMJGCIILHCA() {
      return bMJGCIILHCA;
    }

    /**
     * <code>optional uint32 BMJGCIILHCA = 10;</code>
     * @param value the bMJGCIILHCA to set
     * @return this
     */
    public MusicRhythmDataScRsp setBMJGCIILHCA(final int value) {
      bitField0_ |= 0x00000002;
      bMJGCIILHCA = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearRetcode() {
      bitField0_ &= ~0x00000004;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @param value the retcode to set
     * @return this
     */
    public MusicRhythmDataScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000004;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool FCLINCKMILK = 6;</code>
     * @return whether the fCLINCKMILK field is set
     */
    public boolean hasFCLINCKMILK() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool FCLINCKMILK = 6;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearFCLINCKMILK() {
      bitField0_ &= ~0x00000008;
      fCLINCKMILK = false;
      return this;
    }

    /**
     * <code>optional bool FCLINCKMILK = 6;</code>
     * @return the fCLINCKMILK
     */
    public boolean getFCLINCKMILK() {
      return fCLINCKMILK;
    }

    /**
     * <code>optional bool FCLINCKMILK = 6;</code>
     * @param value the fCLINCKMILK to set
     * @return this
     */
    public MusicRhythmDataScRsp setFCLINCKMILK(final boolean value) {
      bitField0_ |= 0x00000008;
      fCLINCKMILK = value;
      return this;
    }

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     * @return whether the fEAHHAMLDFB field is set
     */
    public boolean hasFEAHHAMLDFB() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearFEAHHAMLDFB() {
      bitField0_ &= ~0x00000010;
      fEAHHAMLDFB.clear();
      return this;
    }

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFEAHHAMLDFB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFEAHHAMLDFB() {
      return fEAHHAMLDFB;
    }

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFEAHHAMLDFB() {
      bitField0_ |= 0x00000010;
      return fEAHHAMLDFB;
    }

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     * @param value the fEAHHAMLDFB to add
     * @return this
     */
    public MusicRhythmDataScRsp addFEAHHAMLDFB(final int value) {
      bitField0_ |= 0x00000010;
      fEAHHAMLDFB.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 FEAHHAMLDFB = 5;</code>
     * @param values the fEAHHAMLDFB to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllFEAHHAMLDFB(final int... values) {
      bitField0_ |= 0x00000010;
      fEAHHAMLDFB.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     * @return whether the oPFOILFDBKG field is set
     */
    public boolean hasOPFOILFDBKG() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearOPFOILFDBKG() {
      bitField0_ &= ~0x00000020;
      oPFOILFDBKG.clear();
      return this;
    }

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableOPFOILFDBKG()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getOPFOILFDBKG() {
      return oPFOILFDBKG;
    }

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableOPFOILFDBKG() {
      bitField0_ |= 0x00000020;
      return oPFOILFDBKG;
    }

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     * @param value the oPFOILFDBKG to add
     * @return this
     */
    public MusicRhythmDataScRsp addOPFOILFDBKG(final int value) {
      bitField0_ |= 0x00000020;
      oPFOILFDBKG.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 OPFOILFDBKG = 8;</code>
     * @param values the oPFOILFDBKG to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllOPFOILFDBKG(final int... values) {
      bitField0_ |= 0x00000020;
      oPFOILFDBKG.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     * @return whether the gBMLNHOCJMO field is set
     */
    public boolean hasGBMLNHOCJMO() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearGBMLNHOCJMO() {
      bitField0_ &= ~0x00000040;
      gBMLNHOCJMO.clear();
      return this;
    }

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGBMLNHOCJMO()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getGBMLNHOCJMO() {
      return gBMLNHOCJMO;
    }

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableGBMLNHOCJMO() {
      bitField0_ |= 0x00000040;
      return gBMLNHOCJMO;
    }

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     * @param value the gBMLNHOCJMO to add
     * @return this
     */
    public MusicRhythmDataScRsp addGBMLNHOCJMO(final int value) {
      bitField0_ |= 0x00000040;
      gBMLNHOCJMO.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 GBMLNHOCJMO = 15;</code>
     * @param values the gBMLNHOCJMO to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllGBMLNHOCJMO(final int... values) {
      bitField0_ |= 0x00000040;
      gBMLNHOCJMO.addAll(values);
      return this;
    }

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     * @return whether the mFIFEBCDIMM field is set
     */
    public boolean hasMFIFEBCDIMM() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearMFIFEBCDIMM() {
      bitField0_ &= ~0x00000080;
      mFIFEBCDIMM.clear();
      return this;
    }

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMFIFEBCDIMM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<HEKPICHLMENOuterClass.HEKPICHLMEN> getMFIFEBCDIMM() {
      return mFIFEBCDIMM;
    }

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<HEKPICHLMENOuterClass.HEKPICHLMEN> getMutableMFIFEBCDIMM() {
      bitField0_ |= 0x00000080;
      return mFIFEBCDIMM;
    }

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     * @param value the mFIFEBCDIMM to add
     * @return this
     */
    public MusicRhythmDataScRsp addMFIFEBCDIMM(final HEKPICHLMENOuterClass.HEKPICHLMEN value) {
      bitField0_ |= 0x00000080;
      mFIFEBCDIMM.add(value);
      return this;
    }

    /**
     * <pre>
     * repeated MDHHFJGOJNG MEHKJJFJAPK = 1;
     * </pre>
     *
     * <code>repeated .HEKPICHLMEN MFIFEBCDIMM = 13;</code>
     * @param values the mFIFEBCDIMM to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllMFIFEBCDIMM(
        final HEKPICHLMENOuterClass.HEKPICHLMEN... values) {
      bitField0_ |= 0x00000080;
      mFIFEBCDIMM.addAll(values);
      return this;
    }

    @Override
    public MusicRhythmDataScRsp copyFrom(final MusicRhythmDataScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        pEFCBMODPOI = other.pEFCBMODPOI;
        bMJGCIILHCA = other.bMJGCIILHCA;
        retcode = other.retcode;
        fCLINCKMILK = other.fCLINCKMILK;
        fEAHHAMLDFB.copyFrom(other.fEAHHAMLDFB);
        oPFOILFDBKG.copyFrom(other.oPFOILFDBKG);
        gBMLNHOCJMO.copyFrom(other.gBMLNHOCJMO);
        mFIFEBCDIMM.copyFrom(other.mFIFEBCDIMM);
      }
      return this;
    }

    @Override
    public MusicRhythmDataScRsp mergeFrom(final MusicRhythmDataScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasPEFCBMODPOI()) {
        setPEFCBMODPOI(other.pEFCBMODPOI);
      }
      if (other.hasBMJGCIILHCA()) {
        setBMJGCIILHCA(other.bMJGCIILHCA);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasFCLINCKMILK()) {
        setFCLINCKMILK(other.fCLINCKMILK);
      }
      if (other.hasFEAHHAMLDFB()) {
        getMutableFEAHHAMLDFB().addAll(other.fEAHHAMLDFB);
      }
      if (other.hasOPFOILFDBKG()) {
        getMutableOPFOILFDBKG().addAll(other.oPFOILFDBKG);
      }
      if (other.hasGBMLNHOCJMO()) {
        getMutableGBMLNHOCJMO().addAll(other.gBMLNHOCJMO);
      }
      if (other.hasMFIFEBCDIMM()) {
        getMutableMFIFEBCDIMM().addAll(other.mFIFEBCDIMM);
      }
      return this;
    }

    @Override
    public MusicRhythmDataScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      pEFCBMODPOI = 0;
      bMJGCIILHCA = 0;
      retcode = 0;
      fCLINCKMILK = false;
      fEAHHAMLDFB.clear();
      oPFOILFDBKG.clear();
      gBMLNHOCJMO.clear();
      mFIFEBCDIMM.clear();
      return this;
    }

    @Override
    public MusicRhythmDataScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fEAHHAMLDFB.clear();
      oPFOILFDBKG.clear();
      gBMLNHOCJMO.clear();
      mFIFEBCDIMM.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MusicRhythmDataScRsp)) {
        return false;
      }
      MusicRhythmDataScRsp other = (MusicRhythmDataScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasPEFCBMODPOI() || pEFCBMODPOI == other.pEFCBMODPOI)
        && (!hasBMJGCIILHCA() || bMJGCIILHCA == other.bMJGCIILHCA)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasFCLINCKMILK() || fCLINCKMILK == other.fCLINCKMILK)
        && (!hasFEAHHAMLDFB() || fEAHHAMLDFB.equals(other.fEAHHAMLDFB))
        && (!hasOPFOILFDBKG() || oPFOILFDBKG.equals(other.oPFOILFDBKG))
        && (!hasGBMLNHOCJMO() || gBMLNHOCJMO.equals(other.gBMLNHOCJMO))
        && (!hasMFIFEBCDIMM() || mFIFEBCDIMM.equals(other.mFIFEBCDIMM));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(pEFCBMODPOI);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(bMJGCIILHCA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(fCLINCKMILK);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < fEAHHAMLDFB.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(fEAHHAMLDFB.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < oPFOILFDBKG.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(oPFOILFDBKG.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < gBMLNHOCJMO.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(gBMLNHOCJMO.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < mFIFEBCDIMM.length(); i++) {
          output.writeRawByte((byte) 106);
          output.writeMessageNoTag(mFIFEBCDIMM.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pEFCBMODPOI);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bMJGCIILHCA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * fEAHHAMLDFB.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(fEAHHAMLDFB);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * oPFOILFDBKG.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(oPFOILFDBKG);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * gBMLNHOCJMO.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(gBMLNHOCJMO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * mFIFEBCDIMM.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mFIFEBCDIMM);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MusicRhythmDataScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // pEFCBMODPOI
            pEFCBMODPOI = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // bMJGCIILHCA
            bMJGCIILHCA = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // fCLINCKMILK
            fCLINCKMILK = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // fEAHHAMLDFB [packed=true]
            input.readPackedUInt32(fEAHHAMLDFB, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // oPFOILFDBKG [packed=true]
            input.readPackedUInt32(oPFOILFDBKG, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // gBMLNHOCJMO [packed=true]
            input.readPackedUInt32(gBMLNHOCJMO, tag);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // mFIFEBCDIMM
            tag = input.readRepeatedMessage(mFIFEBCDIMM, tag);
            bitField0_ |= 0x00000080;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // fEAHHAMLDFB [packed=false]
            tag = input.readRepeatedUInt32(fEAHHAMLDFB, tag);
            bitField0_ |= 0x00000010;
            break;
          }
          case 64: {
            // oPFOILFDBKG [packed=false]
            tag = input.readRepeatedUInt32(oPFOILFDBKG, tag);
            bitField0_ |= 0x00000020;
            break;
          }
          case 120: {
            // gBMLNHOCJMO [packed=false]
            tag = input.readRepeatedUInt32(gBMLNHOCJMO, tag);
            bitField0_ |= 0x00000040;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.pEFCBMODPOI, pEFCBMODPOI);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.bMJGCIILHCA, bMJGCIILHCA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.fCLINCKMILK, fCLINCKMILK);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.fEAHHAMLDFB, fEAHHAMLDFB);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.oPFOILFDBKG, oPFOILFDBKG);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedUInt32(FieldNames.gBMLNHOCJMO, gBMLNHOCJMO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedMessage(FieldNames.mFIFEBCDIMM, mFIFEBCDIMM);
      }
      output.endObject();
    }

    @Override
    public MusicRhythmDataScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1159872792: {
            if (input.isAtField(FieldNames.pEFCBMODPOI)) {
              if (!input.trySkipNullValue()) {
                pEFCBMODPOI = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -515620299: {
            if (input.isAtField(FieldNames.bMJGCIILHCA)) {
              if (!input.trySkipNullValue()) {
                bMJGCIILHCA = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -569902569: {
            if (input.isAtField(FieldNames.fCLINCKMILK)) {
              if (!input.trySkipNullValue()) {
                fCLINCKMILK = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1089110846: {
            if (input.isAtField(FieldNames.fEAHHAMLDFB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(fEAHHAMLDFB);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2114667187: {
            if (input.isAtField(FieldNames.oPFOILFDBKG)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(oPFOILFDBKG);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1397179044: {
            if (input.isAtField(FieldNames.gBMLNHOCJMO)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(gBMLNHOCJMO);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -93152267: {
            if (input.isAtField(FieldNames.mFIFEBCDIMM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mFIFEBCDIMM);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MusicRhythmDataScRsp clone() {
      return new MusicRhythmDataScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MusicRhythmDataScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MusicRhythmDataScRsp(), data).checkInitialized();
    }

    public static MusicRhythmDataScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmDataScRsp(), input).checkInitialized();
    }

    public static MusicRhythmDataScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmDataScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating MusicRhythmDataScRsp messages
     */
    public static MessageFactory<MusicRhythmDataScRsp> getFactory() {
      return MusicRhythmDataScRspFactory.INSTANCE;
    }

    private enum MusicRhythmDataScRspFactory implements MessageFactory<MusicRhythmDataScRsp> {
      INSTANCE;

      @Override
      public MusicRhythmDataScRsp create() {
        return MusicRhythmDataScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName pEFCBMODPOI = FieldName.forField("PEFCBMODPOI");

      static final FieldName bMJGCIILHCA = FieldName.forField("BMJGCIILHCA");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName fCLINCKMILK = FieldName.forField("FCLINCKMILK");

      static final FieldName fEAHHAMLDFB = FieldName.forField("FEAHHAMLDFB");

      static final FieldName oPFOILFDBKG = FieldName.forField("OPFOILFDBKG");

      static final FieldName gBMLNHOCJMO = FieldName.forField("GBMLNHOCJMO");

      static final FieldName mFIFEBCDIMM = FieldName.forField("MFIFEBCDIMM");
    }
  }
}
