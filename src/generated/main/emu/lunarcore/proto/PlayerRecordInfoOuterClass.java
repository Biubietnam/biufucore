// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class PlayerRecordInfoOuterClass {
  /**
   * <pre>
   *  MAPBIMHMJLO
   * </pre>
   *
   * Protobuf type {@code PlayerRecordInfo}
   */
  public static final class PlayerRecordInfo extends ProtoMessage<PlayerRecordInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 FEENICFMNFP = 3;</code>
     */
    private int fEENICFMNFP;

    /**
     * <code>optional uint32 KNHNOJBEIAO = 4;</code>
     */
    private int kNHNOJBEIAO;

    /**
     * <code>optional uint32 FMCNFCIDMGA = 7;</code>
     */
    private int fMCNFCIDMGA;

    /**
     * <code>optional uint32 FOMHGACPACJ = 8;</code>
     */
    private int fOMHGACPACJ;

    /**
     * <code>optional uint32 DBPEJDKFEJD = 10;</code>
     */
    private int dBPEJDKFEJD;

    /**
     * <code>optional uint32 GODJBPLPPBC = 12;</code>
     */
    private int gODJBPLPPBC;

    /**
     * <code>optional uint32 GAJJGBMHLEO = 14;</code>
     */
    private int gAJJGBMHLEO;

    /**
     * <code>optional uint32 ALPBKKOPBFI = 15;</code>
     */
    private int aLPBKKOPBFI;

    /**
     * <pre>
     *  HBBLDIIGDGB
     * </pre>
     *
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     */
    private final PlayerCollectionInfoOuterClass.PlayerCollectionInfo collectionInfo = PlayerCollectionInfoOuterClass.PlayerCollectionInfo.newInstance();

    private PlayerRecordInfo() {
    }

    /**
     * <pre>
     *  MAPBIMHMJLO
     * </pre>
     *
     * @return a new empty instance of {@code PlayerRecordInfo}
     */
    public static PlayerRecordInfo newInstance() {
      return new PlayerRecordInfo();
    }

    /**
     * <code>optional uint32 FEENICFMNFP = 3;</code>
     * @return whether the fEENICFMNFP field is set
     */
    public boolean hasFEENICFMNFP() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 FEENICFMNFP = 3;</code>
     * @return this
     */
    public PlayerRecordInfo clearFEENICFMNFP() {
      bitField0_ &= ~0x00000001;
      fEENICFMNFP = 0;
      return this;
    }

    /**
     * <code>optional uint32 FEENICFMNFP = 3;</code>
     * @return the fEENICFMNFP
     */
    public int getFEENICFMNFP() {
      return fEENICFMNFP;
    }

    /**
     * <code>optional uint32 FEENICFMNFP = 3;</code>
     * @param value the fEENICFMNFP to set
     * @return this
     */
    public PlayerRecordInfo setFEENICFMNFP(final int value) {
      bitField0_ |= 0x00000001;
      fEENICFMNFP = value;
      return this;
    }

    /**
     * <code>optional uint32 KNHNOJBEIAO = 4;</code>
     * @return whether the kNHNOJBEIAO field is set
     */
    public boolean hasKNHNOJBEIAO() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 KNHNOJBEIAO = 4;</code>
     * @return this
     */
    public PlayerRecordInfo clearKNHNOJBEIAO() {
      bitField0_ &= ~0x00000002;
      kNHNOJBEIAO = 0;
      return this;
    }

    /**
     * <code>optional uint32 KNHNOJBEIAO = 4;</code>
     * @return the kNHNOJBEIAO
     */
    public int getKNHNOJBEIAO() {
      return kNHNOJBEIAO;
    }

    /**
     * <code>optional uint32 KNHNOJBEIAO = 4;</code>
     * @param value the kNHNOJBEIAO to set
     * @return this
     */
    public PlayerRecordInfo setKNHNOJBEIAO(final int value) {
      bitField0_ |= 0x00000002;
      kNHNOJBEIAO = value;
      return this;
    }

    /**
     * <code>optional uint32 FMCNFCIDMGA = 7;</code>
     * @return whether the fMCNFCIDMGA field is set
     */
    public boolean hasFMCNFCIDMGA() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 FMCNFCIDMGA = 7;</code>
     * @return this
     */
    public PlayerRecordInfo clearFMCNFCIDMGA() {
      bitField0_ &= ~0x00000004;
      fMCNFCIDMGA = 0;
      return this;
    }

    /**
     * <code>optional uint32 FMCNFCIDMGA = 7;</code>
     * @return the fMCNFCIDMGA
     */
    public int getFMCNFCIDMGA() {
      return fMCNFCIDMGA;
    }

    /**
     * <code>optional uint32 FMCNFCIDMGA = 7;</code>
     * @param value the fMCNFCIDMGA to set
     * @return this
     */
    public PlayerRecordInfo setFMCNFCIDMGA(final int value) {
      bitField0_ |= 0x00000004;
      fMCNFCIDMGA = value;
      return this;
    }

    /**
     * <code>optional uint32 FOMHGACPACJ = 8;</code>
     * @return whether the fOMHGACPACJ field is set
     */
    public boolean hasFOMHGACPACJ() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 FOMHGACPACJ = 8;</code>
     * @return this
     */
    public PlayerRecordInfo clearFOMHGACPACJ() {
      bitField0_ &= ~0x00000008;
      fOMHGACPACJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 FOMHGACPACJ = 8;</code>
     * @return the fOMHGACPACJ
     */
    public int getFOMHGACPACJ() {
      return fOMHGACPACJ;
    }

    /**
     * <code>optional uint32 FOMHGACPACJ = 8;</code>
     * @param value the fOMHGACPACJ to set
     * @return this
     */
    public PlayerRecordInfo setFOMHGACPACJ(final int value) {
      bitField0_ |= 0x00000008;
      fOMHGACPACJ = value;
      return this;
    }

    /**
     * <code>optional uint32 DBPEJDKFEJD = 10;</code>
     * @return whether the dBPEJDKFEJD field is set
     */
    public boolean hasDBPEJDKFEJD() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 DBPEJDKFEJD = 10;</code>
     * @return this
     */
    public PlayerRecordInfo clearDBPEJDKFEJD() {
      bitField0_ &= ~0x00000010;
      dBPEJDKFEJD = 0;
      return this;
    }

    /**
     * <code>optional uint32 DBPEJDKFEJD = 10;</code>
     * @return the dBPEJDKFEJD
     */
    public int getDBPEJDKFEJD() {
      return dBPEJDKFEJD;
    }

    /**
     * <code>optional uint32 DBPEJDKFEJD = 10;</code>
     * @param value the dBPEJDKFEJD to set
     * @return this
     */
    public PlayerRecordInfo setDBPEJDKFEJD(final int value) {
      bitField0_ |= 0x00000010;
      dBPEJDKFEJD = value;
      return this;
    }

    /**
     * <code>optional uint32 GODJBPLPPBC = 12;</code>
     * @return whether the gODJBPLPPBC field is set
     */
    public boolean hasGODJBPLPPBC() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 GODJBPLPPBC = 12;</code>
     * @return this
     */
    public PlayerRecordInfo clearGODJBPLPPBC() {
      bitField0_ &= ~0x00000020;
      gODJBPLPPBC = 0;
      return this;
    }

    /**
     * <code>optional uint32 GODJBPLPPBC = 12;</code>
     * @return the gODJBPLPPBC
     */
    public int getGODJBPLPPBC() {
      return gODJBPLPPBC;
    }

    /**
     * <code>optional uint32 GODJBPLPPBC = 12;</code>
     * @param value the gODJBPLPPBC to set
     * @return this
     */
    public PlayerRecordInfo setGODJBPLPPBC(final int value) {
      bitField0_ |= 0x00000020;
      gODJBPLPPBC = value;
      return this;
    }

    /**
     * <code>optional uint32 GAJJGBMHLEO = 14;</code>
     * @return whether the gAJJGBMHLEO field is set
     */
    public boolean hasGAJJGBMHLEO() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional uint32 GAJJGBMHLEO = 14;</code>
     * @return this
     */
    public PlayerRecordInfo clearGAJJGBMHLEO() {
      bitField0_ &= ~0x00000040;
      gAJJGBMHLEO = 0;
      return this;
    }

    /**
     * <code>optional uint32 GAJJGBMHLEO = 14;</code>
     * @return the gAJJGBMHLEO
     */
    public int getGAJJGBMHLEO() {
      return gAJJGBMHLEO;
    }

    /**
     * <code>optional uint32 GAJJGBMHLEO = 14;</code>
     * @param value the gAJJGBMHLEO to set
     * @return this
     */
    public PlayerRecordInfo setGAJJGBMHLEO(final int value) {
      bitField0_ |= 0x00000040;
      gAJJGBMHLEO = value;
      return this;
    }

    /**
     * <code>optional uint32 ALPBKKOPBFI = 15;</code>
     * @return whether the aLPBKKOPBFI field is set
     */
    public boolean hasALPBKKOPBFI() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional uint32 ALPBKKOPBFI = 15;</code>
     * @return this
     */
    public PlayerRecordInfo clearALPBKKOPBFI() {
      bitField0_ &= ~0x00000080;
      aLPBKKOPBFI = 0;
      return this;
    }

    /**
     * <code>optional uint32 ALPBKKOPBFI = 15;</code>
     * @return the aLPBKKOPBFI
     */
    public int getALPBKKOPBFI() {
      return aLPBKKOPBFI;
    }

    /**
     * <code>optional uint32 ALPBKKOPBFI = 15;</code>
     * @param value the aLPBKKOPBFI to set
     * @return this
     */
    public PlayerRecordInfo setALPBKKOPBFI(final int value) {
      bitField0_ |= 0x00000080;
      aLPBKKOPBFI = value;
      return this;
    }

    /**
     * <pre>
     *  HBBLDIIGDGB
     * </pre>
     *
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     * @return whether the collectionInfo field is set
     */
    public boolean hasCollectionInfo() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <pre>
     *  HBBLDIIGDGB
     * </pre>
     *
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     * @return this
     */
    public PlayerRecordInfo clearCollectionInfo() {
      bitField0_ &= ~0x00000100;
      collectionInfo.clear();
      return this;
    }

    /**
     * <pre>
     *  HBBLDIIGDGB
     * </pre>
     *
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCollectionInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public PlayerCollectionInfoOuterClass.PlayerCollectionInfo getCollectionInfo() {
      return collectionInfo;
    }

    /**
     * <pre>
     *  HBBLDIIGDGB
     * </pre>
     *
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public PlayerCollectionInfoOuterClass.PlayerCollectionInfo getMutableCollectionInfo() {
      bitField0_ |= 0x00000100;
      return collectionInfo;
    }

    /**
     * <pre>
     *  HBBLDIIGDGB
     * </pre>
     *
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     * @param value the collectionInfo to set
     * @return this
     */
    public PlayerRecordInfo setCollectionInfo(
        final PlayerCollectionInfoOuterClass.PlayerCollectionInfo value) {
      bitField0_ |= 0x00000100;
      collectionInfo.copyFrom(value);
      return this;
    }

    @Override
    public PlayerRecordInfo copyFrom(final PlayerRecordInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        fEENICFMNFP = other.fEENICFMNFP;
        kNHNOJBEIAO = other.kNHNOJBEIAO;
        fMCNFCIDMGA = other.fMCNFCIDMGA;
        fOMHGACPACJ = other.fOMHGACPACJ;
        dBPEJDKFEJD = other.dBPEJDKFEJD;
        gODJBPLPPBC = other.gODJBPLPPBC;
        gAJJGBMHLEO = other.gAJJGBMHLEO;
        aLPBKKOPBFI = other.aLPBKKOPBFI;
        collectionInfo.copyFrom(other.collectionInfo);
      }
      return this;
    }

    @Override
    public PlayerRecordInfo mergeFrom(final PlayerRecordInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFEENICFMNFP()) {
        setFEENICFMNFP(other.fEENICFMNFP);
      }
      if (other.hasKNHNOJBEIAO()) {
        setKNHNOJBEIAO(other.kNHNOJBEIAO);
      }
      if (other.hasFMCNFCIDMGA()) {
        setFMCNFCIDMGA(other.fMCNFCIDMGA);
      }
      if (other.hasFOMHGACPACJ()) {
        setFOMHGACPACJ(other.fOMHGACPACJ);
      }
      if (other.hasDBPEJDKFEJD()) {
        setDBPEJDKFEJD(other.dBPEJDKFEJD);
      }
      if (other.hasGODJBPLPPBC()) {
        setGODJBPLPPBC(other.gODJBPLPPBC);
      }
      if (other.hasGAJJGBMHLEO()) {
        setGAJJGBMHLEO(other.gAJJGBMHLEO);
      }
      if (other.hasALPBKKOPBFI()) {
        setALPBKKOPBFI(other.aLPBKKOPBFI);
      }
      if (other.hasCollectionInfo()) {
        getMutableCollectionInfo().mergeFrom(other.collectionInfo);
      }
      return this;
    }

    @Override
    public PlayerRecordInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fEENICFMNFP = 0;
      kNHNOJBEIAO = 0;
      fMCNFCIDMGA = 0;
      fOMHGACPACJ = 0;
      dBPEJDKFEJD = 0;
      gODJBPLPPBC = 0;
      gAJJGBMHLEO = 0;
      aLPBKKOPBFI = 0;
      collectionInfo.clear();
      return this;
    }

    @Override
    public PlayerRecordInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      collectionInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PlayerRecordInfo)) {
        return false;
      }
      PlayerRecordInfo other = (PlayerRecordInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasFEENICFMNFP() || fEENICFMNFP == other.fEENICFMNFP)
        && (!hasKNHNOJBEIAO() || kNHNOJBEIAO == other.kNHNOJBEIAO)
        && (!hasFMCNFCIDMGA() || fMCNFCIDMGA == other.fMCNFCIDMGA)
        && (!hasFOMHGACPACJ() || fOMHGACPACJ == other.fOMHGACPACJ)
        && (!hasDBPEJDKFEJD() || dBPEJDKFEJD == other.dBPEJDKFEJD)
        && (!hasGODJBPLPPBC() || gODJBPLPPBC == other.gODJBPLPPBC)
        && (!hasGAJJGBMHLEO() || gAJJGBMHLEO == other.gAJJGBMHLEO)
        && (!hasALPBKKOPBFI() || aLPBKKOPBFI == other.aLPBKKOPBFI)
        && (!hasCollectionInfo() || collectionInfo.equals(other.collectionInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(fEENICFMNFP);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(kNHNOJBEIAO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(fMCNFCIDMGA);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(fOMHGACPACJ);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(dBPEJDKFEJD);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(gODJBPLPPBC);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(gAJJGBMHLEO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(aLPBKKOPBFI);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(collectionInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fEENICFMNFP);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kNHNOJBEIAO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fMCNFCIDMGA);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fOMHGACPACJ);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dBPEJDKFEJD);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gODJBPLPPBC);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gAJJGBMHLEO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aLPBKKOPBFI);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(collectionInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PlayerRecordInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // fEENICFMNFP
            fEENICFMNFP = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // kNHNOJBEIAO
            kNHNOJBEIAO = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // fMCNFCIDMGA
            fMCNFCIDMGA = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // fOMHGACPACJ
            fOMHGACPACJ = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // dBPEJDKFEJD
            dBPEJDKFEJD = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // gODJBPLPPBC
            gODJBPLPPBC = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // gAJJGBMHLEO
            gAJJGBMHLEO = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // aLPBKKOPBFI
            aLPBKKOPBFI = input.readUInt32();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // collectionInfo
            input.readMessage(collectionInfo);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.fEENICFMNFP, fEENICFMNFP);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.kNHNOJBEIAO, kNHNOJBEIAO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.fMCNFCIDMGA, fMCNFCIDMGA);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.fOMHGACPACJ, fOMHGACPACJ);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.dBPEJDKFEJD, dBPEJDKFEJD);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.gODJBPLPPBC, gODJBPLPPBC);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.gAJJGBMHLEO, gAJJGBMHLEO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeUInt32(FieldNames.aLPBKKOPBFI, aLPBKKOPBFI);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.collectionInfo, collectionInfo);
      }
      output.endObject();
    }

    @Override
    public PlayerRecordInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1218697233: {
            if (input.isAtField(FieldNames.fEENICFMNFP)) {
              if (!input.trySkipNullValue()) {
                fEENICFMNFP = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1011951696: {
            if (input.isAtField(FieldNames.kNHNOJBEIAO)) {
              if (!input.trySkipNullValue()) {
                kNHNOJBEIAO = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1835905891: {
            if (input.isAtField(FieldNames.fMCNFCIDMGA)) {
              if (!input.trySkipNullValue()) {
                fMCNFCIDMGA = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 129481629: {
            if (input.isAtField(FieldNames.fOMHGACPACJ)) {
              if (!input.trySkipNullValue()) {
                fOMHGACPACJ = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1617241673: {
            if (input.isAtField(FieldNames.dBPEJDKFEJD)) {
              if (!input.trySkipNullValue()) {
                dBPEJDKFEJD = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1200584145: {
            if (input.isAtField(FieldNames.gODJBPLPPBC)) {
              if (!input.trySkipNullValue()) {
                gODJBPLPPBC = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1439405478: {
            if (input.isAtField(FieldNames.gAJJGBMHLEO)) {
              if (!input.trySkipNullValue()) {
                gAJJGBMHLEO = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1966910375: {
            if (input.isAtField(FieldNames.aLPBKKOPBFI)) {
              if (!input.trySkipNullValue()) {
                aLPBKKOPBFI = input.readUInt32();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 310642796:
          case 1060168111: {
            if (input.isAtField(FieldNames.collectionInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(collectionInfo);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PlayerRecordInfo clone() {
      return new PlayerRecordInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PlayerRecordInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), data).checkInitialized();
    }

    public static PlayerRecordInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), input).checkInitialized();
    }

    public static PlayerRecordInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating PlayerRecordInfo messages
     */
    public static MessageFactory<PlayerRecordInfo> getFactory() {
      return PlayerRecordInfoFactory.INSTANCE;
    }

    private enum PlayerRecordInfoFactory implements MessageFactory<PlayerRecordInfo> {
      INSTANCE;

      @Override
      public PlayerRecordInfo create() {
        return PlayerRecordInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName fEENICFMNFP = FieldName.forField("FEENICFMNFP");

      static final FieldName kNHNOJBEIAO = FieldName.forField("KNHNOJBEIAO");

      static final FieldName fMCNFCIDMGA = FieldName.forField("FMCNFCIDMGA");

      static final FieldName fOMHGACPACJ = FieldName.forField("FOMHGACPACJ");

      static final FieldName dBPEJDKFEJD = FieldName.forField("DBPEJDKFEJD");

      static final FieldName gODJBPLPPBC = FieldName.forField("GODJBPLPPBC");

      static final FieldName gAJJGBMHLEO = FieldName.forField("GAJJGBMHLEO");

      static final FieldName aLPBKKOPBFI = FieldName.forField("ALPBKKOPBFI");

      static final FieldName collectionInfo = FieldName.forField("collectionInfo", "collection_info");
    }
  }
}
