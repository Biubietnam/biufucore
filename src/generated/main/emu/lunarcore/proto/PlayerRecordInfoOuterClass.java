// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class PlayerRecordInfoOuterClass {
  /**
   * Protobuf type {@code PlayerRecordInfo}
   */
  public static final class PlayerRecordInfo extends ProtoMessage<PlayerRecordInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 GFODBFNNHLL = 3;</code>
     */
    private int gFODBFNNHLL;

    /**
     * <code>optional uint32 OHPJGNHDNCL = 6;</code>
     */
    private int oHPJGNHDNCL;

    /**
     * <code>optional uint32 KILECHIGGBF = 8;</code>
     */
    private int kILECHIGGBF;

    /**
     * <code>optional uint32 KBNBAAJACDC = 9;</code>
     */
    private int kBNBAAJACDC;

    /**
     * <code>optional uint32 DHLEJELLMEL = 10;</code>
     */
    private int dHLEJELLMEL;

    /**
     * <code>optional uint32 CGIBMLEGEFK = 13;</code>
     */
    private int cGIBMLEGEFK;

    /**
     * <code>optional uint32 CCJLPCEOAMO = 14;</code>
     */
    private int cCJLPCEOAMO;

    /**
     * <code>optional uint32 FKAGLHIHHJN = 15;</code>
     */
    private int fKAGLHIHHJN;

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 7;</code>
     */
    private final PlayerCollectionInfoOuterClass.PlayerCollectionInfo collectionInfo = PlayerCollectionInfoOuterClass.PlayerCollectionInfo.newInstance();

    private PlayerRecordInfo() {
    }

    /**
     * @return a new empty instance of {@code PlayerRecordInfo}
     */
    public static PlayerRecordInfo newInstance() {
      return new PlayerRecordInfo();
    }

    /**
     * <code>optional uint32 GFODBFNNHLL = 3;</code>
     * @return whether the gFODBFNNHLL field is set
     */
    public boolean hasGFODBFNNHLL() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 GFODBFNNHLL = 3;</code>
     * @return this
     */
    public PlayerRecordInfo clearGFODBFNNHLL() {
      bitField0_ &= ~0x00000001;
      gFODBFNNHLL = 0;
      return this;
    }

    /**
     * <code>optional uint32 GFODBFNNHLL = 3;</code>
     * @return the gFODBFNNHLL
     */
    public int getGFODBFNNHLL() {
      return gFODBFNNHLL;
    }

    /**
     * <code>optional uint32 GFODBFNNHLL = 3;</code>
     * @param value the gFODBFNNHLL to set
     * @return this
     */
    public PlayerRecordInfo setGFODBFNNHLL(final int value) {
      bitField0_ |= 0x00000001;
      gFODBFNNHLL = value;
      return this;
    }

    /**
     * <code>optional uint32 OHPJGNHDNCL = 6;</code>
     * @return whether the oHPJGNHDNCL field is set
     */
    public boolean hasOHPJGNHDNCL() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 OHPJGNHDNCL = 6;</code>
     * @return this
     */
    public PlayerRecordInfo clearOHPJGNHDNCL() {
      bitField0_ &= ~0x00000002;
      oHPJGNHDNCL = 0;
      return this;
    }

    /**
     * <code>optional uint32 OHPJGNHDNCL = 6;</code>
     * @return the oHPJGNHDNCL
     */
    public int getOHPJGNHDNCL() {
      return oHPJGNHDNCL;
    }

    /**
     * <code>optional uint32 OHPJGNHDNCL = 6;</code>
     * @param value the oHPJGNHDNCL to set
     * @return this
     */
    public PlayerRecordInfo setOHPJGNHDNCL(final int value) {
      bitField0_ |= 0x00000002;
      oHPJGNHDNCL = value;
      return this;
    }

    /**
     * <code>optional uint32 KILECHIGGBF = 8;</code>
     * @return whether the kILECHIGGBF field is set
     */
    public boolean hasKILECHIGGBF() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 KILECHIGGBF = 8;</code>
     * @return this
     */
    public PlayerRecordInfo clearKILECHIGGBF() {
      bitField0_ &= ~0x00000004;
      kILECHIGGBF = 0;
      return this;
    }

    /**
     * <code>optional uint32 KILECHIGGBF = 8;</code>
     * @return the kILECHIGGBF
     */
    public int getKILECHIGGBF() {
      return kILECHIGGBF;
    }

    /**
     * <code>optional uint32 KILECHIGGBF = 8;</code>
     * @param value the kILECHIGGBF to set
     * @return this
     */
    public PlayerRecordInfo setKILECHIGGBF(final int value) {
      bitField0_ |= 0x00000004;
      kILECHIGGBF = value;
      return this;
    }

    /**
     * <code>optional uint32 KBNBAAJACDC = 9;</code>
     * @return whether the kBNBAAJACDC field is set
     */
    public boolean hasKBNBAAJACDC() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 KBNBAAJACDC = 9;</code>
     * @return this
     */
    public PlayerRecordInfo clearKBNBAAJACDC() {
      bitField0_ &= ~0x00000008;
      kBNBAAJACDC = 0;
      return this;
    }

    /**
     * <code>optional uint32 KBNBAAJACDC = 9;</code>
     * @return the kBNBAAJACDC
     */
    public int getKBNBAAJACDC() {
      return kBNBAAJACDC;
    }

    /**
     * <code>optional uint32 KBNBAAJACDC = 9;</code>
     * @param value the kBNBAAJACDC to set
     * @return this
     */
    public PlayerRecordInfo setKBNBAAJACDC(final int value) {
      bitField0_ |= 0x00000008;
      kBNBAAJACDC = value;
      return this;
    }

    /**
     * <code>optional uint32 DHLEJELLMEL = 10;</code>
     * @return whether the dHLEJELLMEL field is set
     */
    public boolean hasDHLEJELLMEL() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 DHLEJELLMEL = 10;</code>
     * @return this
     */
    public PlayerRecordInfo clearDHLEJELLMEL() {
      bitField0_ &= ~0x00000010;
      dHLEJELLMEL = 0;
      return this;
    }

    /**
     * <code>optional uint32 DHLEJELLMEL = 10;</code>
     * @return the dHLEJELLMEL
     */
    public int getDHLEJELLMEL() {
      return dHLEJELLMEL;
    }

    /**
     * <code>optional uint32 DHLEJELLMEL = 10;</code>
     * @param value the dHLEJELLMEL to set
     * @return this
     */
    public PlayerRecordInfo setDHLEJELLMEL(final int value) {
      bitField0_ |= 0x00000010;
      dHLEJELLMEL = value;
      return this;
    }

    /**
     * <code>optional uint32 CGIBMLEGEFK = 13;</code>
     * @return whether the cGIBMLEGEFK field is set
     */
    public boolean hasCGIBMLEGEFK() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 CGIBMLEGEFK = 13;</code>
     * @return this
     */
    public PlayerRecordInfo clearCGIBMLEGEFK() {
      bitField0_ &= ~0x00000020;
      cGIBMLEGEFK = 0;
      return this;
    }

    /**
     * <code>optional uint32 CGIBMLEGEFK = 13;</code>
     * @return the cGIBMLEGEFK
     */
    public int getCGIBMLEGEFK() {
      return cGIBMLEGEFK;
    }

    /**
     * <code>optional uint32 CGIBMLEGEFK = 13;</code>
     * @param value the cGIBMLEGEFK to set
     * @return this
     */
    public PlayerRecordInfo setCGIBMLEGEFK(final int value) {
      bitField0_ |= 0x00000020;
      cGIBMLEGEFK = value;
      return this;
    }

    /**
     * <code>optional uint32 CCJLPCEOAMO = 14;</code>
     * @return whether the cCJLPCEOAMO field is set
     */
    public boolean hasCCJLPCEOAMO() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional uint32 CCJLPCEOAMO = 14;</code>
     * @return this
     */
    public PlayerRecordInfo clearCCJLPCEOAMO() {
      bitField0_ &= ~0x00000040;
      cCJLPCEOAMO = 0;
      return this;
    }

    /**
     * <code>optional uint32 CCJLPCEOAMO = 14;</code>
     * @return the cCJLPCEOAMO
     */
    public int getCCJLPCEOAMO() {
      return cCJLPCEOAMO;
    }

    /**
     * <code>optional uint32 CCJLPCEOAMO = 14;</code>
     * @param value the cCJLPCEOAMO to set
     * @return this
     */
    public PlayerRecordInfo setCCJLPCEOAMO(final int value) {
      bitField0_ |= 0x00000040;
      cCJLPCEOAMO = value;
      return this;
    }

    /**
     * <code>optional uint32 FKAGLHIHHJN = 15;</code>
     * @return whether the fKAGLHIHHJN field is set
     */
    public boolean hasFKAGLHIHHJN() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional uint32 FKAGLHIHHJN = 15;</code>
     * @return this
     */
    public PlayerRecordInfo clearFKAGLHIHHJN() {
      bitField0_ &= ~0x00000080;
      fKAGLHIHHJN = 0;
      return this;
    }

    /**
     * <code>optional uint32 FKAGLHIHHJN = 15;</code>
     * @return the fKAGLHIHHJN
     */
    public int getFKAGLHIHHJN() {
      return fKAGLHIHHJN;
    }

    /**
     * <code>optional uint32 FKAGLHIHHJN = 15;</code>
     * @param value the fKAGLHIHHJN to set
     * @return this
     */
    public PlayerRecordInfo setFKAGLHIHHJN(final int value) {
      bitField0_ |= 0x00000080;
      fKAGLHIHHJN = value;
      return this;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 7;</code>
     * @return whether the collectionInfo field is set
     */
    public boolean hasCollectionInfo() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 7;</code>
     * @return this
     */
    public PlayerRecordInfo clearCollectionInfo() {
      bitField0_ &= ~0x00000100;
      collectionInfo.clear();
      return this;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCollectionInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public PlayerCollectionInfoOuterClass.PlayerCollectionInfo getCollectionInfo() {
      return collectionInfo;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public PlayerCollectionInfoOuterClass.PlayerCollectionInfo getMutableCollectionInfo() {
      bitField0_ |= 0x00000100;
      return collectionInfo;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 7;</code>
     * @param value the collectionInfo to set
     * @return this
     */
    public PlayerRecordInfo setCollectionInfo(
        final PlayerCollectionInfoOuterClass.PlayerCollectionInfo value) {
      bitField0_ |= 0x00000100;
      collectionInfo.copyFrom(value);
      return this;
    }

    @Override
    public PlayerRecordInfo copyFrom(final PlayerRecordInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        gFODBFNNHLL = other.gFODBFNNHLL;
        oHPJGNHDNCL = other.oHPJGNHDNCL;
        kILECHIGGBF = other.kILECHIGGBF;
        kBNBAAJACDC = other.kBNBAAJACDC;
        dHLEJELLMEL = other.dHLEJELLMEL;
        cGIBMLEGEFK = other.cGIBMLEGEFK;
        cCJLPCEOAMO = other.cCJLPCEOAMO;
        fKAGLHIHHJN = other.fKAGLHIHHJN;
        collectionInfo.copyFrom(other.collectionInfo);
      }
      return this;
    }

    @Override
    public PlayerRecordInfo mergeFrom(final PlayerRecordInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGFODBFNNHLL()) {
        setGFODBFNNHLL(other.gFODBFNNHLL);
      }
      if (other.hasOHPJGNHDNCL()) {
        setOHPJGNHDNCL(other.oHPJGNHDNCL);
      }
      if (other.hasKILECHIGGBF()) {
        setKILECHIGGBF(other.kILECHIGGBF);
      }
      if (other.hasKBNBAAJACDC()) {
        setKBNBAAJACDC(other.kBNBAAJACDC);
      }
      if (other.hasDHLEJELLMEL()) {
        setDHLEJELLMEL(other.dHLEJELLMEL);
      }
      if (other.hasCGIBMLEGEFK()) {
        setCGIBMLEGEFK(other.cGIBMLEGEFK);
      }
      if (other.hasCCJLPCEOAMO()) {
        setCCJLPCEOAMO(other.cCJLPCEOAMO);
      }
      if (other.hasFKAGLHIHHJN()) {
        setFKAGLHIHHJN(other.fKAGLHIHHJN);
      }
      if (other.hasCollectionInfo()) {
        getMutableCollectionInfo().mergeFrom(other.collectionInfo);
      }
      return this;
    }

    @Override
    public PlayerRecordInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gFODBFNNHLL = 0;
      oHPJGNHDNCL = 0;
      kILECHIGGBF = 0;
      kBNBAAJACDC = 0;
      dHLEJELLMEL = 0;
      cGIBMLEGEFK = 0;
      cCJLPCEOAMO = 0;
      fKAGLHIHHJN = 0;
      collectionInfo.clear();
      return this;
    }

    @Override
    public PlayerRecordInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      collectionInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PlayerRecordInfo)) {
        return false;
      }
      PlayerRecordInfo other = (PlayerRecordInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasGFODBFNNHLL() || gFODBFNNHLL == other.gFODBFNNHLL)
        && (!hasOHPJGNHDNCL() || oHPJGNHDNCL == other.oHPJGNHDNCL)
        && (!hasKILECHIGGBF() || kILECHIGGBF == other.kILECHIGGBF)
        && (!hasKBNBAAJACDC() || kBNBAAJACDC == other.kBNBAAJACDC)
        && (!hasDHLEJELLMEL() || dHLEJELLMEL == other.dHLEJELLMEL)
        && (!hasCGIBMLEGEFK() || cGIBMLEGEFK == other.cGIBMLEGEFK)
        && (!hasCCJLPCEOAMO() || cCJLPCEOAMO == other.cCJLPCEOAMO)
        && (!hasFKAGLHIHHJN() || fKAGLHIHHJN == other.fKAGLHIHHJN)
        && (!hasCollectionInfo() || collectionInfo.equals(other.collectionInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(gFODBFNNHLL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(oHPJGNHDNCL);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(kILECHIGGBF);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(kBNBAAJACDC);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(dHLEJELLMEL);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(cGIBMLEGEFK);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(cCJLPCEOAMO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(fKAGLHIHHJN);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(collectionInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gFODBFNNHLL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oHPJGNHDNCL);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kILECHIGGBF);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kBNBAAJACDC);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dHLEJELLMEL);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cGIBMLEGEFK);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cCJLPCEOAMO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fKAGLHIHHJN);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(collectionInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PlayerRecordInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // gFODBFNNHLL
            gFODBFNNHLL = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // oHPJGNHDNCL
            oHPJGNHDNCL = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // kILECHIGGBF
            kILECHIGGBF = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // kBNBAAJACDC
            kBNBAAJACDC = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // dHLEJELLMEL
            dHLEJELLMEL = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // cGIBMLEGEFK
            cGIBMLEGEFK = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // cCJLPCEOAMO
            cCJLPCEOAMO = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // fKAGLHIHHJN
            fKAGLHIHHJN = input.readUInt32();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // collectionInfo
            input.readMessage(collectionInfo);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.gFODBFNNHLL, gFODBFNNHLL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oHPJGNHDNCL, oHPJGNHDNCL);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.kILECHIGGBF, kILECHIGGBF);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.kBNBAAJACDC, kBNBAAJACDC);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.dHLEJELLMEL, dHLEJELLMEL);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.cGIBMLEGEFK, cGIBMLEGEFK);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.cCJLPCEOAMO, cCJLPCEOAMO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeUInt32(FieldNames.fKAGLHIHHJN, fKAGLHIHHJN);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.collectionInfo, collectionInfo);
      }
      output.endObject();
    }

    @Override
    public PlayerRecordInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1884363056: {
            if (input.isAtField(FieldNames.gFODBFNNHLL)) {
              if (!input.trySkipNullValue()) {
                gFODBFNNHLL = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 952091969: {
            if (input.isAtField(FieldNames.oHPJGNHDNCL)) {
              if (!input.trySkipNullValue()) {
                oHPJGNHDNCL = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1556600719: {
            if (input.isAtField(FieldNames.kILECHIGGBF)) {
              if (!input.trySkipNullValue()) {
                kILECHIGGBF = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1885885344: {
            if (input.isAtField(FieldNames.kBNBAAJACDC)) {
              if (!input.trySkipNullValue()) {
                kBNBAAJACDC = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 168266812: {
            if (input.isAtField(FieldNames.dHLEJELLMEL)) {
              if (!input.trySkipNullValue()) {
                dHLEJELLMEL = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 916990604: {
            if (input.isAtField(FieldNames.cGIBMLEGEFK)) {
              if (!input.trySkipNullValue()) {
                cGIBMLEGEFK = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1746059580: {
            if (input.isAtField(FieldNames.cCJLPCEOAMO)) {
              if (!input.trySkipNullValue()) {
                cCJLPCEOAMO = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -264392698: {
            if (input.isAtField(FieldNames.fKAGLHIHHJN)) {
              if (!input.trySkipNullValue()) {
                fKAGLHIHHJN = input.readUInt32();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 310642796:
          case 1060168111: {
            if (input.isAtField(FieldNames.collectionInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(collectionInfo);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PlayerRecordInfo clone() {
      return new PlayerRecordInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PlayerRecordInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), data).checkInitialized();
    }

    public static PlayerRecordInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), input).checkInitialized();
    }

    public static PlayerRecordInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating PlayerRecordInfo messages
     */
    public static MessageFactory<PlayerRecordInfo> getFactory() {
      return PlayerRecordInfoFactory.INSTANCE;
    }

    private enum PlayerRecordInfoFactory implements MessageFactory<PlayerRecordInfo> {
      INSTANCE;

      @Override
      public PlayerRecordInfo create() {
        return PlayerRecordInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName gFODBFNNHLL = FieldName.forField("GFODBFNNHLL");

      static final FieldName oHPJGNHDNCL = FieldName.forField("OHPJGNHDNCL");

      static final FieldName kILECHIGGBF = FieldName.forField("KILECHIGGBF");

      static final FieldName kBNBAAJACDC = FieldName.forField("KBNBAAJACDC");

      static final FieldName dHLEJELLMEL = FieldName.forField("DHLEJELLMEL");

      static final FieldName cGIBMLEGEFK = FieldName.forField("CGIBMLEGEFK");

      static final FieldName cCJLPCEOAMO = FieldName.forField("CCJLPCEOAMO");

      static final FieldName fKAGLHIHHJN = FieldName.forField("FKAGLHIHHJN");

      static final FieldName collectionInfo = FieldName.forField("collectionInfo", "collection_info");
    }
  }
}
