// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedString;
import us.hebi.quickbuf.Utf8String;

public final class GateserverOuterClass {
  /**
   * Protobuf type {@code Gateserver}
   */
  public static final class Gateserver extends ProtoMessage<Gateserver> implements Cloneable {
    private static final long serialVersionUID = 0L;

    private int bitField1_;

    /**
     * <code>optional int64 MDAHNIKKAHI = 4;</code>
     */
    private long mDAHNIKKAHI;

    /**
     * <code>optional int64 GHENHJPJJLK = 15;</code>
     */
    private long gHENHJPJJLK;

    /**
     * <code>optional uint32 retcode = 2;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 IGKDKFJIDPP = 7;</code>
     */
    private int iGKDKFJIDPP;

    /**
     * <code>optional uint32 port = 11;</code>
     */
    private int port;

    /**
     * <code>optional uint32 HNDPOHGEIPM = 13;</code>
     */
    private int hNDPOHGEIPM;

    /**
     * <code>optional uint32 CLCFLOAMGBL = 1243;</code>
     */
    private int cLCFLOAMGBL;

    /**
     * <code>optional bool unk1 = 6;</code>
     */
    private boolean unk1;

    /**
     * <code>optional bool unk2 = 10;</code>
     */
    private boolean unk2;

    /**
     * <code>optional bool unk3 = 62;</code>
     */
    private boolean unk3;

    /**
     * <code>optional bool unk4 = 326;</code>
     */
    private boolean unk4;

    /**
     * <code>optional bool unk5 = 340;</code>
     */
    private boolean unk5;

    /**
     * <code>optional bool CNAKLGMDLPE = 422;</code>
     */
    private boolean cNAKLGMDLPE;

    /**
     * <code>optional bool APJECJMGAKC = 577;</code>
     */
    private boolean aPJECJMGAKC;

    /**
     * <code>optional bool JGCIILJEHHE = 673;</code>
     */
    private boolean jGCIILJEHHE;

    /**
     * <code>optional bool FIOHEKDJNCG = 837;</code>
     */
    private boolean fIOHEKDJNCG;

    /**
     * <code>optional bool MCEIPIBAMDB = 1574;</code>
     */
    private boolean mCEIPIBAMDB;

    /**
     * <code>optional bool EBKBNEKCOHI = 1575;</code>
     */
    private boolean eBKBNEKCOHI;

    /**
     * <code>optional bool LAABLMNKLLD = 1703;</code>
     */
    private boolean lAABLMNKLLD;

    /**
     * <code>optional bool OFJAKNEDMDM = 1782;</code>
     */
    private boolean oFJAKNEDMDM;

    /**
     * <code>optional bool NPHDIMJOKNI = 1866;</code>
     */
    private boolean nPHDIMJOKNI;

    /**
     * <code>optional bool NNGLEBKCMLA = 2018;</code>
     */
    private boolean nNGLEBKCMLA;

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     */
    private final Utf8String exResourceUrl = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     */
    private final Utf8String luaUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ip = 5;</code>
     */
    private final Utf8String ip = Utf8String.newEmptyInstance();

    /**
     * <code>optional string msg = 8;</code>
     */
    private final Utf8String msg = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     */
    private final Utf8String assetBundleUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string region_name = 12;</code>
     */
    private final Utf8String regionName = Utf8String.newEmptyInstance();

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     */
    private final Utf8String iOKEPIEDBNE = Utf8String.newEmptyInstance();

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     */
    private final Utf8String fCMMMPKJJIL = Utf8String.newEmptyInstance();

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     */
    private final Utf8String iPKLAMMKNNG = Utf8String.newEmptyInstance();

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     */
    private final Utf8String iIJLFILFMDF = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     */
    private final Utf8String oDOCFCJMBCL = Utf8String.newEmptyInstance();

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     */
    private final Utf8String bBFOAJGLLBC = Utf8String.newEmptyInstance();

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     */
    private final Utf8String kKHFKMIKFIB = Utf8String.newEmptyInstance();

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     */
    private final Utf8String mKCNEFHHAOG = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     */
    private final Utf8String ifixUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     */
    private final Utf8String nPPCGBIFDMN = Utf8String.newEmptyInstance();

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     */
    private final Utf8String nPIGPBEKEKO = Utf8String.newEmptyInstance();

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     */
    private final Utf8String aIPNJNLHFBP = Utf8String.newEmptyInstance();

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     */
    private final Utf8String fHALNCIHMGA = Utf8String.newEmptyInstance();

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     */
    private final Utf8String lKDFCHNEFBB = Utf8String.newEmptyInstance();

    /**
     * <code>optional string msg2 = 659;</code>
     */
    private final Utf8String msg2 = Utf8String.newEmptyInstance();

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     */
    private final Utf8String lHGKDGDJIHC = Utf8String.newEmptyInstance();

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     */
    private final Utf8String oGJIECMHHHG = Utf8String.newEmptyInstance();

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     */
    private final Utf8String pMABNNEDCCG = Utf8String.newEmptyInstance();

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     */
    private final Utf8String nECFMBFGPML = Utf8String.newEmptyInstance();

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     */
    private final Utf8String kDBAGALHEDC = Utf8String.newEmptyInstance();

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     */
    private final Utf8String fDGFFCMALPI = Utf8String.newEmptyInstance();

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     */
    private final Utf8String kLIAGHGOFML = Utf8String.newEmptyInstance();

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     */
    private final Utf8String pNALJLBMILJ = Utf8String.newEmptyInstance();

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     */
    private final Utf8String bJOCANIBBKI = Utf8String.newEmptyInstance();

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     */
    private final Utf8String eICAECNMDIB = Utf8String.newEmptyInstance();

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     */
    private final Utf8String lLFDDPLHGBM = Utf8String.newEmptyInstance();

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     */
    private final Utf8String oBOPKJFGDIC = Utf8String.newEmptyInstance();

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     */
    private final Utf8String mDKDJLNHGKN = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     */
    private final Utf8String eLJIMGJLHBC = Utf8String.newEmptyInstance();

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     */
    private final Utf8String gKPLIAPPLCO = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ipv6 = 1952;</code>
     */
    private final Utf8String ipv6 = Utf8String.newEmptyInstance();

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     */
    private final RepeatedString gBONLDEMBEN = RepeatedString.newEmptyInstance();

    private Gateserver() {
    }

    /**
     * @return a new empty instance of {@code Gateserver}
     */
    public static Gateserver newInstance() {
      return new Gateserver();
    }

    /**
     * <code>optional int64 MDAHNIKKAHI = 4;</code>
     * @return whether the mDAHNIKKAHI field is set
     */
    public boolean hasMDAHNIKKAHI() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 MDAHNIKKAHI = 4;</code>
     * @return this
     */
    public Gateserver clearMDAHNIKKAHI() {
      bitField0_ &= ~0x00000001;
      mDAHNIKKAHI = 0L;
      return this;
    }

    /**
     * <code>optional int64 MDAHNIKKAHI = 4;</code>
     * @return the mDAHNIKKAHI
     */
    public long getMDAHNIKKAHI() {
      return mDAHNIKKAHI;
    }

    /**
     * <code>optional int64 MDAHNIKKAHI = 4;</code>
     * @param value the mDAHNIKKAHI to set
     * @return this
     */
    public Gateserver setMDAHNIKKAHI(final long value) {
      bitField0_ |= 0x00000001;
      mDAHNIKKAHI = value;
      return this;
    }

    /**
     * <code>optional int64 GHENHJPJJLK = 15;</code>
     * @return whether the gHENHJPJJLK field is set
     */
    public boolean hasGHENHJPJJLK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional int64 GHENHJPJJLK = 15;</code>
     * @return this
     */
    public Gateserver clearGHENHJPJJLK() {
      bitField0_ &= ~0x00000002;
      gHENHJPJJLK = 0L;
      return this;
    }

    /**
     * <code>optional int64 GHENHJPJJLK = 15;</code>
     * @return the gHENHJPJJLK
     */
    public long getGHENHJPJJLK() {
      return gHENHJPJJLK;
    }

    /**
     * <code>optional int64 GHENHJPJJLK = 15;</code>
     * @param value the gHENHJPJJLK to set
     * @return this
     */
    public Gateserver setGHENHJPJJLK(final long value) {
      bitField0_ |= 0x00000002;
      gHENHJPJJLK = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return this
     */
    public Gateserver clearRetcode() {
      bitField0_ &= ~0x00000004;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @param value the retcode to set
     * @return this
     */
    public Gateserver setRetcode(final int value) {
      bitField0_ |= 0x00000004;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 IGKDKFJIDPP = 7;</code>
     * @return whether the iGKDKFJIDPP field is set
     */
    public boolean hasIGKDKFJIDPP() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 IGKDKFJIDPP = 7;</code>
     * @return this
     */
    public Gateserver clearIGKDKFJIDPP() {
      bitField0_ &= ~0x00000008;
      iGKDKFJIDPP = 0;
      return this;
    }

    /**
     * <code>optional uint32 IGKDKFJIDPP = 7;</code>
     * @return the iGKDKFJIDPP
     */
    public int getIGKDKFJIDPP() {
      return iGKDKFJIDPP;
    }

    /**
     * <code>optional uint32 IGKDKFJIDPP = 7;</code>
     * @param value the iGKDKFJIDPP to set
     * @return this
     */
    public Gateserver setIGKDKFJIDPP(final int value) {
      bitField0_ |= 0x00000008;
      iGKDKFJIDPP = value;
      return this;
    }

    /**
     * <code>optional uint32 port = 11;</code>
     * @return whether the port field is set
     */
    public boolean hasPort() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 port = 11;</code>
     * @return this
     */
    public Gateserver clearPort() {
      bitField0_ &= ~0x00000010;
      port = 0;
      return this;
    }

    /**
     * <code>optional uint32 port = 11;</code>
     * @return the port
     */
    public int getPort() {
      return port;
    }

    /**
     * <code>optional uint32 port = 11;</code>
     * @param value the port to set
     * @return this
     */
    public Gateserver setPort(final int value) {
      bitField0_ |= 0x00000010;
      port = value;
      return this;
    }

    /**
     * <code>optional uint32 HNDPOHGEIPM = 13;</code>
     * @return whether the hNDPOHGEIPM field is set
     */
    public boolean hasHNDPOHGEIPM() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 HNDPOHGEIPM = 13;</code>
     * @return this
     */
    public Gateserver clearHNDPOHGEIPM() {
      bitField0_ &= ~0x00000020;
      hNDPOHGEIPM = 0;
      return this;
    }

    /**
     * <code>optional uint32 HNDPOHGEIPM = 13;</code>
     * @return the hNDPOHGEIPM
     */
    public int getHNDPOHGEIPM() {
      return hNDPOHGEIPM;
    }

    /**
     * <code>optional uint32 HNDPOHGEIPM = 13;</code>
     * @param value the hNDPOHGEIPM to set
     * @return this
     */
    public Gateserver setHNDPOHGEIPM(final int value) {
      bitField0_ |= 0x00000020;
      hNDPOHGEIPM = value;
      return this;
    }

    /**
     * <code>optional uint32 CLCFLOAMGBL = 1243;</code>
     * @return whether the cLCFLOAMGBL field is set
     */
    public boolean hasCLCFLOAMGBL() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional uint32 CLCFLOAMGBL = 1243;</code>
     * @return this
     */
    public Gateserver clearCLCFLOAMGBL() {
      bitField0_ &= ~0x00000040;
      cLCFLOAMGBL = 0;
      return this;
    }

    /**
     * <code>optional uint32 CLCFLOAMGBL = 1243;</code>
     * @return the cLCFLOAMGBL
     */
    public int getCLCFLOAMGBL() {
      return cLCFLOAMGBL;
    }

    /**
     * <code>optional uint32 CLCFLOAMGBL = 1243;</code>
     * @param value the cLCFLOAMGBL to set
     * @return this
     */
    public Gateserver setCLCFLOAMGBL(final int value) {
      bitField0_ |= 0x00000040;
      cLCFLOAMGBL = value;
      return this;
    }

    /**
     * <code>optional bool unk1 = 6;</code>
     * @return whether the unk1 field is set
     */
    public boolean hasUnk1() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool unk1 = 6;</code>
     * @return this
     */
    public Gateserver clearUnk1() {
      bitField0_ &= ~0x00000080;
      unk1 = false;
      return this;
    }

    /**
     * <code>optional bool unk1 = 6;</code>
     * @return the unk1
     */
    public boolean getUnk1() {
      return unk1;
    }

    /**
     * <code>optional bool unk1 = 6;</code>
     * @param value the unk1 to set
     * @return this
     */
    public Gateserver setUnk1(final boolean value) {
      bitField0_ |= 0x00000080;
      unk1 = value;
      return this;
    }

    /**
     * <code>optional bool unk2 = 10;</code>
     * @return whether the unk2 field is set
     */
    public boolean hasUnk2() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional bool unk2 = 10;</code>
     * @return this
     */
    public Gateserver clearUnk2() {
      bitField0_ &= ~0x00000100;
      unk2 = false;
      return this;
    }

    /**
     * <code>optional bool unk2 = 10;</code>
     * @return the unk2
     */
    public boolean getUnk2() {
      return unk2;
    }

    /**
     * <code>optional bool unk2 = 10;</code>
     * @param value the unk2 to set
     * @return this
     */
    public Gateserver setUnk2(final boolean value) {
      bitField0_ |= 0x00000100;
      unk2 = value;
      return this;
    }

    /**
     * <code>optional bool unk3 = 62;</code>
     * @return whether the unk3 field is set
     */
    public boolean hasUnk3() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional bool unk3 = 62;</code>
     * @return this
     */
    public Gateserver clearUnk3() {
      bitField0_ &= ~0x00000200;
      unk3 = false;
      return this;
    }

    /**
     * <code>optional bool unk3 = 62;</code>
     * @return the unk3
     */
    public boolean getUnk3() {
      return unk3;
    }

    /**
     * <code>optional bool unk3 = 62;</code>
     * @param value the unk3 to set
     * @return this
     */
    public Gateserver setUnk3(final boolean value) {
      bitField0_ |= 0x00000200;
      unk3 = value;
      return this;
    }

    /**
     * <code>optional bool unk4 = 326;</code>
     * @return whether the unk4 field is set
     */
    public boolean hasUnk4() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>optional bool unk4 = 326;</code>
     * @return this
     */
    public Gateserver clearUnk4() {
      bitField0_ &= ~0x00000400;
      unk4 = false;
      return this;
    }

    /**
     * <code>optional bool unk4 = 326;</code>
     * @return the unk4
     */
    public boolean getUnk4() {
      return unk4;
    }

    /**
     * <code>optional bool unk4 = 326;</code>
     * @param value the unk4 to set
     * @return this
     */
    public Gateserver setUnk4(final boolean value) {
      bitField0_ |= 0x00000400;
      unk4 = value;
      return this;
    }

    /**
     * <code>optional bool unk5 = 340;</code>
     * @return whether the unk5 field is set
     */
    public boolean hasUnk5() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>optional bool unk5 = 340;</code>
     * @return this
     */
    public Gateserver clearUnk5() {
      bitField0_ &= ~0x00000800;
      unk5 = false;
      return this;
    }

    /**
     * <code>optional bool unk5 = 340;</code>
     * @return the unk5
     */
    public boolean getUnk5() {
      return unk5;
    }

    /**
     * <code>optional bool unk5 = 340;</code>
     * @param value the unk5 to set
     * @return this
     */
    public Gateserver setUnk5(final boolean value) {
      bitField0_ |= 0x00000800;
      unk5 = value;
      return this;
    }

    /**
     * <code>optional bool CNAKLGMDLPE = 422;</code>
     * @return whether the cNAKLGMDLPE field is set
     */
    public boolean hasCNAKLGMDLPE() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <code>optional bool CNAKLGMDLPE = 422;</code>
     * @return this
     */
    public Gateserver clearCNAKLGMDLPE() {
      bitField0_ &= ~0x00001000;
      cNAKLGMDLPE = false;
      return this;
    }

    /**
     * <code>optional bool CNAKLGMDLPE = 422;</code>
     * @return the cNAKLGMDLPE
     */
    public boolean getCNAKLGMDLPE() {
      return cNAKLGMDLPE;
    }

    /**
     * <code>optional bool CNAKLGMDLPE = 422;</code>
     * @param value the cNAKLGMDLPE to set
     * @return this
     */
    public Gateserver setCNAKLGMDLPE(final boolean value) {
      bitField0_ |= 0x00001000;
      cNAKLGMDLPE = value;
      return this;
    }

    /**
     * <code>optional bool APJECJMGAKC = 577;</code>
     * @return whether the aPJECJMGAKC field is set
     */
    public boolean hasAPJECJMGAKC() {
      return (bitField0_ & 0x00002000) != 0;
    }

    /**
     * <code>optional bool APJECJMGAKC = 577;</code>
     * @return this
     */
    public Gateserver clearAPJECJMGAKC() {
      bitField0_ &= ~0x00002000;
      aPJECJMGAKC = false;
      return this;
    }

    /**
     * <code>optional bool APJECJMGAKC = 577;</code>
     * @return the aPJECJMGAKC
     */
    public boolean getAPJECJMGAKC() {
      return aPJECJMGAKC;
    }

    /**
     * <code>optional bool APJECJMGAKC = 577;</code>
     * @param value the aPJECJMGAKC to set
     * @return this
     */
    public Gateserver setAPJECJMGAKC(final boolean value) {
      bitField0_ |= 0x00002000;
      aPJECJMGAKC = value;
      return this;
    }

    /**
     * <code>optional bool JGCIILJEHHE = 673;</code>
     * @return whether the jGCIILJEHHE field is set
     */
    public boolean hasJGCIILJEHHE() {
      return (bitField0_ & 0x00004000) != 0;
    }

    /**
     * <code>optional bool JGCIILJEHHE = 673;</code>
     * @return this
     */
    public Gateserver clearJGCIILJEHHE() {
      bitField0_ &= ~0x00004000;
      jGCIILJEHHE = false;
      return this;
    }

    /**
     * <code>optional bool JGCIILJEHHE = 673;</code>
     * @return the jGCIILJEHHE
     */
    public boolean getJGCIILJEHHE() {
      return jGCIILJEHHE;
    }

    /**
     * <code>optional bool JGCIILJEHHE = 673;</code>
     * @param value the jGCIILJEHHE to set
     * @return this
     */
    public Gateserver setJGCIILJEHHE(final boolean value) {
      bitField0_ |= 0x00004000;
      jGCIILJEHHE = value;
      return this;
    }

    /**
     * <code>optional bool FIOHEKDJNCG = 837;</code>
     * @return whether the fIOHEKDJNCG field is set
     */
    public boolean hasFIOHEKDJNCG() {
      return (bitField0_ & 0x00008000) != 0;
    }

    /**
     * <code>optional bool FIOHEKDJNCG = 837;</code>
     * @return this
     */
    public Gateserver clearFIOHEKDJNCG() {
      bitField0_ &= ~0x00008000;
      fIOHEKDJNCG = false;
      return this;
    }

    /**
     * <code>optional bool FIOHEKDJNCG = 837;</code>
     * @return the fIOHEKDJNCG
     */
    public boolean getFIOHEKDJNCG() {
      return fIOHEKDJNCG;
    }

    /**
     * <code>optional bool FIOHEKDJNCG = 837;</code>
     * @param value the fIOHEKDJNCG to set
     * @return this
     */
    public Gateserver setFIOHEKDJNCG(final boolean value) {
      bitField0_ |= 0x00008000;
      fIOHEKDJNCG = value;
      return this;
    }

    /**
     * <code>optional bool MCEIPIBAMDB = 1574;</code>
     * @return whether the mCEIPIBAMDB field is set
     */
    public boolean hasMCEIPIBAMDB() {
      return (bitField0_ & 0x00010000) != 0;
    }

    /**
     * <code>optional bool MCEIPIBAMDB = 1574;</code>
     * @return this
     */
    public Gateserver clearMCEIPIBAMDB() {
      bitField0_ &= ~0x00010000;
      mCEIPIBAMDB = false;
      return this;
    }

    /**
     * <code>optional bool MCEIPIBAMDB = 1574;</code>
     * @return the mCEIPIBAMDB
     */
    public boolean getMCEIPIBAMDB() {
      return mCEIPIBAMDB;
    }

    /**
     * <code>optional bool MCEIPIBAMDB = 1574;</code>
     * @param value the mCEIPIBAMDB to set
     * @return this
     */
    public Gateserver setMCEIPIBAMDB(final boolean value) {
      bitField0_ |= 0x00010000;
      mCEIPIBAMDB = value;
      return this;
    }

    /**
     * <code>optional bool EBKBNEKCOHI = 1575;</code>
     * @return whether the eBKBNEKCOHI field is set
     */
    public boolean hasEBKBNEKCOHI() {
      return (bitField0_ & 0x00020000) != 0;
    }

    /**
     * <code>optional bool EBKBNEKCOHI = 1575;</code>
     * @return this
     */
    public Gateserver clearEBKBNEKCOHI() {
      bitField0_ &= ~0x00020000;
      eBKBNEKCOHI = false;
      return this;
    }

    /**
     * <code>optional bool EBKBNEKCOHI = 1575;</code>
     * @return the eBKBNEKCOHI
     */
    public boolean getEBKBNEKCOHI() {
      return eBKBNEKCOHI;
    }

    /**
     * <code>optional bool EBKBNEKCOHI = 1575;</code>
     * @param value the eBKBNEKCOHI to set
     * @return this
     */
    public Gateserver setEBKBNEKCOHI(final boolean value) {
      bitField0_ |= 0x00020000;
      eBKBNEKCOHI = value;
      return this;
    }

    /**
     * <code>optional bool LAABLMNKLLD = 1703;</code>
     * @return whether the lAABLMNKLLD field is set
     */
    public boolean hasLAABLMNKLLD() {
      return (bitField0_ & 0x00040000) != 0;
    }

    /**
     * <code>optional bool LAABLMNKLLD = 1703;</code>
     * @return this
     */
    public Gateserver clearLAABLMNKLLD() {
      bitField0_ &= ~0x00040000;
      lAABLMNKLLD = false;
      return this;
    }

    /**
     * <code>optional bool LAABLMNKLLD = 1703;</code>
     * @return the lAABLMNKLLD
     */
    public boolean getLAABLMNKLLD() {
      return lAABLMNKLLD;
    }

    /**
     * <code>optional bool LAABLMNKLLD = 1703;</code>
     * @param value the lAABLMNKLLD to set
     * @return this
     */
    public Gateserver setLAABLMNKLLD(final boolean value) {
      bitField0_ |= 0x00040000;
      lAABLMNKLLD = value;
      return this;
    }

    /**
     * <code>optional bool OFJAKNEDMDM = 1782;</code>
     * @return whether the oFJAKNEDMDM field is set
     */
    public boolean hasOFJAKNEDMDM() {
      return (bitField0_ & 0x00080000) != 0;
    }

    /**
     * <code>optional bool OFJAKNEDMDM = 1782;</code>
     * @return this
     */
    public Gateserver clearOFJAKNEDMDM() {
      bitField0_ &= ~0x00080000;
      oFJAKNEDMDM = false;
      return this;
    }

    /**
     * <code>optional bool OFJAKNEDMDM = 1782;</code>
     * @return the oFJAKNEDMDM
     */
    public boolean getOFJAKNEDMDM() {
      return oFJAKNEDMDM;
    }

    /**
     * <code>optional bool OFJAKNEDMDM = 1782;</code>
     * @param value the oFJAKNEDMDM to set
     * @return this
     */
    public Gateserver setOFJAKNEDMDM(final boolean value) {
      bitField0_ |= 0x00080000;
      oFJAKNEDMDM = value;
      return this;
    }

    /**
     * <code>optional bool NPHDIMJOKNI = 1866;</code>
     * @return whether the nPHDIMJOKNI field is set
     */
    public boolean hasNPHDIMJOKNI() {
      return (bitField0_ & 0x00100000) != 0;
    }

    /**
     * <code>optional bool NPHDIMJOKNI = 1866;</code>
     * @return this
     */
    public Gateserver clearNPHDIMJOKNI() {
      bitField0_ &= ~0x00100000;
      nPHDIMJOKNI = false;
      return this;
    }

    /**
     * <code>optional bool NPHDIMJOKNI = 1866;</code>
     * @return the nPHDIMJOKNI
     */
    public boolean getNPHDIMJOKNI() {
      return nPHDIMJOKNI;
    }

    /**
     * <code>optional bool NPHDIMJOKNI = 1866;</code>
     * @param value the nPHDIMJOKNI to set
     * @return this
     */
    public Gateserver setNPHDIMJOKNI(final boolean value) {
      bitField0_ |= 0x00100000;
      nPHDIMJOKNI = value;
      return this;
    }

    /**
     * <code>optional bool NNGLEBKCMLA = 2018;</code>
     * @return whether the nNGLEBKCMLA field is set
     */
    public boolean hasNNGLEBKCMLA() {
      return (bitField0_ & 0x00200000) != 0;
    }

    /**
     * <code>optional bool NNGLEBKCMLA = 2018;</code>
     * @return this
     */
    public Gateserver clearNNGLEBKCMLA() {
      bitField0_ &= ~0x00200000;
      nNGLEBKCMLA = false;
      return this;
    }

    /**
     * <code>optional bool NNGLEBKCMLA = 2018;</code>
     * @return the nNGLEBKCMLA
     */
    public boolean getNNGLEBKCMLA() {
      return nNGLEBKCMLA;
    }

    /**
     * <code>optional bool NNGLEBKCMLA = 2018;</code>
     * @param value the nNGLEBKCMLA to set
     * @return this
     */
    public Gateserver setNNGLEBKCMLA(final boolean value) {
      bitField0_ |= 0x00200000;
      nNGLEBKCMLA = value;
      return this;
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @return whether the exResourceUrl field is set
     */
    public boolean hasExResourceUrl() {
      return (bitField0_ & 0x00400000) != 0;
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @return this
     */
    public Gateserver clearExResourceUrl() {
      bitField0_ &= ~0x00400000;
      exResourceUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @return the exResourceUrl
     */
    public String getExResourceUrl() {
      return exResourceUrl.getString();
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @return internal {@code Utf8String} representation of exResourceUrl for reading
     */
    public Utf8String getExResourceUrlBytes() {
      return this.exResourceUrl;
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @return internal {@code Utf8String} representation of exResourceUrl for modifications
     */
    public Utf8String getMutableExResourceUrlBytes() {
      bitField0_ |= 0x00400000;
      return this.exResourceUrl;
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @param value the exResourceUrl to set
     * @return this
     */
    public Gateserver setExResourceUrl(final CharSequence value) {
      bitField0_ |= 0x00400000;
      exResourceUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Design Data
     * </pre>
     *
     * <code>optional string ex_resource_url = 1;</code>
     * @param value the exResourceUrl to set
     * @return this
     */
    public Gateserver setExResourceUrl(final Utf8String value) {
      bitField0_ |= 0x00400000;
      exResourceUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @return whether the luaUrl field is set
     */
    public boolean hasLuaUrl() {
      return (bitField0_ & 0x00800000) != 0;
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @return this
     */
    public Gateserver clearLuaUrl() {
      bitField0_ &= ~0x00800000;
      luaUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @return the luaUrl
     */
    public String getLuaUrl() {
      return luaUrl.getString();
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @return internal {@code Utf8String} representation of luaUrl for reading
     */
    public Utf8String getLuaUrlBytes() {
      return this.luaUrl;
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @return internal {@code Utf8String} representation of luaUrl for modifications
     */
    public Utf8String getMutableLuaUrlBytes() {
      bitField0_ |= 0x00800000;
      return this.luaUrl;
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @param value the luaUrl to set
     * @return this
     */
    public Gateserver setLuaUrl(final CharSequence value) {
      bitField0_ |= 0x00800000;
      luaUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Lua
     * </pre>
     *
     * <code>optional string lua_url = 3;</code>
     * @param value the luaUrl to set
     * @return this
     */
    public Gateserver setLuaUrl(final Utf8String value) {
      bitField0_ |= 0x00800000;
      luaUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ip = 5;</code>
     * @return whether the ip field is set
     */
    public boolean hasIp() {
      return (bitField0_ & 0x01000000) != 0;
    }

    /**
     * <code>optional string ip = 5;</code>
     * @return this
     */
    public Gateserver clearIp() {
      bitField0_ &= ~0x01000000;
      ip.clear();
      return this;
    }

    /**
     * <code>optional string ip = 5;</code>
     * @return the ip
     */
    public String getIp() {
      return ip.getString();
    }

    /**
     * <code>optional string ip = 5;</code>
     * @return internal {@code Utf8String} representation of ip for reading
     */
    public Utf8String getIpBytes() {
      return this.ip;
    }

    /**
     * <code>optional string ip = 5;</code>
     * @return internal {@code Utf8String} representation of ip for modifications
     */
    public Utf8String getMutableIpBytes() {
      bitField0_ |= 0x01000000;
      return this.ip;
    }

    /**
     * <code>optional string ip = 5;</code>
     * @param value the ip to set
     * @return this
     */
    public Gateserver setIp(final CharSequence value) {
      bitField0_ |= 0x01000000;
      ip.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ip = 5;</code>
     * @param value the ip to set
     * @return this
     */
    public Gateserver setIp(final Utf8String value) {
      bitField0_ |= 0x01000000;
      ip.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg = 8;</code>
     * @return whether the msg field is set
     */
    public boolean hasMsg() {
      return (bitField0_ & 0x02000000) != 0;
    }

    /**
     * <code>optional string msg = 8;</code>
     * @return this
     */
    public Gateserver clearMsg() {
      bitField0_ &= ~0x02000000;
      msg.clear();
      return this;
    }

    /**
     * <code>optional string msg = 8;</code>
     * @return the msg
     */
    public String getMsg() {
      return msg.getString();
    }

    /**
     * <code>optional string msg = 8;</code>
     * @return internal {@code Utf8String} representation of msg for reading
     */
    public Utf8String getMsgBytes() {
      return this.msg;
    }

    /**
     * <code>optional string msg = 8;</code>
     * @return internal {@code Utf8String} representation of msg for modifications
     */
    public Utf8String getMutableMsgBytes() {
      bitField0_ |= 0x02000000;
      return this.msg;
    }

    /**
     * <code>optional string msg = 8;</code>
     * @param value the msg to set
     * @return this
     */
    public Gateserver setMsg(final CharSequence value) {
      bitField0_ |= 0x02000000;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg = 8;</code>
     * @param value the msg to set
     * @return this
     */
    public Gateserver setMsg(final Utf8String value) {
      bitField0_ |= 0x02000000;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @return whether the assetBundleUrl field is set
     */
    public boolean hasAssetBundleUrl() {
      return (bitField0_ & 0x04000000) != 0;
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @return this
     */
    public Gateserver clearAssetBundleUrl() {
      bitField0_ &= ~0x04000000;
      assetBundleUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @return the assetBundleUrl
     */
    public String getAssetBundleUrl() {
      return assetBundleUrl.getString();
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @return internal {@code Utf8String} representation of assetBundleUrl for reading
     */
    public Utf8String getAssetBundleUrlBytes() {
      return this.assetBundleUrl;
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @return internal {@code Utf8String} representation of assetBundleUrl for modifications
     */
    public Utf8String getMutableAssetBundleUrlBytes() {
      bitField0_ |= 0x04000000;
      return this.assetBundleUrl;
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @param value the assetBundleUrl to set
     * @return this
     */
    public Gateserver setAssetBundleUrl(final CharSequence value) {
      bitField0_ |= 0x04000000;
      assetBundleUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Asb
     * </pre>
     *
     * <code>optional string asset_bundle_url = 9;</code>
     * @param value the assetBundleUrl to set
     * @return this
     */
    public Gateserver setAssetBundleUrl(final Utf8String value) {
      bitField0_ |= 0x04000000;
      assetBundleUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @return whether the regionName field is set
     */
    public boolean hasRegionName() {
      return (bitField0_ & 0x08000000) != 0;
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @return this
     */
    public Gateserver clearRegionName() {
      bitField0_ &= ~0x08000000;
      regionName.clear();
      return this;
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @return the regionName
     */
    public String getRegionName() {
      return regionName.getString();
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @return internal {@code Utf8String} representation of regionName for reading
     */
    public Utf8String getRegionNameBytes() {
      return this.regionName;
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @return internal {@code Utf8String} representation of regionName for modifications
     */
    public Utf8String getMutableRegionNameBytes() {
      bitField0_ |= 0x08000000;
      return this.regionName;
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @param value the regionName to set
     * @return this
     */
    public Gateserver setRegionName(final CharSequence value) {
      bitField0_ |= 0x08000000;
      regionName.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string region_name = 12;</code>
     * @param value the regionName to set
     * @return this
     */
    public Gateserver setRegionName(final Utf8String value) {
      bitField0_ |= 0x08000000;
      regionName.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @return whether the iOKEPIEDBNE field is set
     */
    public boolean hasIOKEPIEDBNE() {
      return (bitField0_ & 0x10000000) != 0;
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @return this
     */
    public Gateserver clearIOKEPIEDBNE() {
      bitField0_ &= ~0x10000000;
      iOKEPIEDBNE.clear();
      return this;
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @return the iOKEPIEDBNE
     */
    public String getIOKEPIEDBNE() {
      return iOKEPIEDBNE.getString();
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @return internal {@code Utf8String} representation of iOKEPIEDBNE for reading
     */
    public Utf8String getIOKEPIEDBNEBytes() {
      return this.iOKEPIEDBNE;
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @return internal {@code Utf8String} representation of iOKEPIEDBNE for modifications
     */
    public Utf8String getMutableIOKEPIEDBNEBytes() {
      bitField0_ |= 0x10000000;
      return this.iOKEPIEDBNE;
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @param value the iOKEPIEDBNE to set
     * @return this
     */
    public Gateserver setIOKEPIEDBNE(final CharSequence value) {
      bitField0_ |= 0x10000000;
      iOKEPIEDBNE.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string IOKEPIEDBNE = 14;</code>
     * @param value the iOKEPIEDBNE to set
     * @return this
     */
    public Gateserver setIOKEPIEDBNE(final Utf8String value) {
      bitField0_ |= 0x10000000;
      iOKEPIEDBNE.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @return whether the fCMMMPKJJIL field is set
     */
    public boolean hasFCMMMPKJJIL() {
      return (bitField0_ & 0x20000000) != 0;
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @return this
     */
    public Gateserver clearFCMMMPKJJIL() {
      bitField0_ &= ~0x20000000;
      fCMMMPKJJIL.clear();
      return this;
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @return the fCMMMPKJJIL
     */
    public String getFCMMMPKJJIL() {
      return fCMMMPKJJIL.getString();
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @return internal {@code Utf8String} representation of fCMMMPKJJIL for reading
     */
    public Utf8String getFCMMMPKJJILBytes() {
      return this.fCMMMPKJJIL;
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @return internal {@code Utf8String} representation of fCMMMPKJJIL for modifications
     */
    public Utf8String getMutableFCMMMPKJJILBytes() {
      bitField0_ |= 0x20000000;
      return this.fCMMMPKJJIL;
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @param value the fCMMMPKJJIL to set
     * @return this
     */
    public Gateserver setFCMMMPKJJIL(final CharSequence value) {
      bitField0_ |= 0x20000000;
      fCMMMPKJJIL.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string FCMMMPKJJIL = 20;</code>
     * @param value the fCMMMPKJJIL to set
     * @return this
     */
    public Gateserver setFCMMMPKJJIL(final Utf8String value) {
      bitField0_ |= 0x20000000;
      fCMMMPKJJIL.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @return whether the iPKLAMMKNNG field is set
     */
    public boolean hasIPKLAMMKNNG() {
      return (bitField0_ & 0x40000000) != 0;
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @return this
     */
    public Gateserver clearIPKLAMMKNNG() {
      bitField0_ &= ~0x40000000;
      iPKLAMMKNNG.clear();
      return this;
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @return the iPKLAMMKNNG
     */
    public String getIPKLAMMKNNG() {
      return iPKLAMMKNNG.getString();
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @return internal {@code Utf8String} representation of iPKLAMMKNNG for reading
     */
    public Utf8String getIPKLAMMKNNGBytes() {
      return this.iPKLAMMKNNG;
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @return internal {@code Utf8String} representation of iPKLAMMKNNG for modifications
     */
    public Utf8String getMutableIPKLAMMKNNGBytes() {
      bitField0_ |= 0x40000000;
      return this.iPKLAMMKNNG;
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @param value the iPKLAMMKNNG to set
     * @return this
     */
    public Gateserver setIPKLAMMKNNG(final CharSequence value) {
      bitField0_ |= 0x40000000;
      iPKLAMMKNNG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string IPKLAMMKNNG = 117;</code>
     * @param value the iPKLAMMKNNG to set
     * @return this
     */
    public Gateserver setIPKLAMMKNNG(final Utf8String value) {
      bitField0_ |= 0x40000000;
      iPKLAMMKNNG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @return whether the iIJLFILFMDF field is set
     */
    public boolean hasIIJLFILFMDF() {
      return (bitField0_ & 0x80000000) != 0;
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @return this
     */
    public Gateserver clearIIJLFILFMDF() {
      bitField0_ &= ~0x80000000;
      iIJLFILFMDF.clear();
      return this;
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @return the iIJLFILFMDF
     */
    public String getIIJLFILFMDF() {
      return iIJLFILFMDF.getString();
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @return internal {@code Utf8String} representation of iIJLFILFMDF for reading
     */
    public Utf8String getIIJLFILFMDFBytes() {
      return this.iIJLFILFMDF;
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @return internal {@code Utf8String} representation of iIJLFILFMDF for modifications
     */
    public Utf8String getMutableIIJLFILFMDFBytes() {
      bitField0_ |= 0x80000000;
      return this.iIJLFILFMDF;
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @param value the iIJLFILFMDF to set
     * @return this
     */
    public Gateserver setIIJLFILFMDF(final CharSequence value) {
      bitField0_ |= 0x80000000;
      iIJLFILFMDF.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string IIJLFILFMDF = 138;</code>
     * @param value the iIJLFILFMDF to set
     * @return this
     */
    public Gateserver setIIJLFILFMDF(final Utf8String value) {
      bitField0_ |= 0x80000000;
      iIJLFILFMDF.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @return whether the oDOCFCJMBCL field is set
     */
    public boolean hasODOCFCJMBCL() {
      return (bitField1_ & 0x00000001) != 0;
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @return this
     */
    public Gateserver clearODOCFCJMBCL() {
      bitField1_ &= ~0x00000001;
      oDOCFCJMBCL.clear();
      return this;
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @return the oDOCFCJMBCL
     */
    public String getODOCFCJMBCL() {
      return oDOCFCJMBCL.getString();
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @return internal {@code Utf8String} representation of oDOCFCJMBCL for reading
     */
    public Utf8String getODOCFCJMBCLBytes() {
      return this.oDOCFCJMBCL;
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @return internal {@code Utf8String} representation of oDOCFCJMBCL for modifications
     */
    public Utf8String getMutableODOCFCJMBCLBytes() {
      bitField1_ |= 0x00000001;
      return this.oDOCFCJMBCL;
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @param value the oDOCFCJMBCL to set
     * @return this
     */
    public Gateserver setODOCFCJMBCL(final CharSequence value) {
      bitField1_ |= 0x00000001;
      oDOCFCJMBCL.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ODOCFCJMBCL = 337;</code>
     * @param value the oDOCFCJMBCL to set
     * @return this
     */
    public Gateserver setODOCFCJMBCL(final Utf8String value) {
      bitField1_ |= 0x00000001;
      oDOCFCJMBCL.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @return whether the bBFOAJGLLBC field is set
     */
    public boolean hasBBFOAJGLLBC() {
      return (bitField1_ & 0x00000002) != 0;
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @return this
     */
    public Gateserver clearBBFOAJGLLBC() {
      bitField1_ &= ~0x00000002;
      bBFOAJGLLBC.clear();
      return this;
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @return the bBFOAJGLLBC
     */
    public String getBBFOAJGLLBC() {
      return bBFOAJGLLBC.getString();
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @return internal {@code Utf8String} representation of bBFOAJGLLBC for reading
     */
    public Utf8String getBBFOAJGLLBCBytes() {
      return this.bBFOAJGLLBC;
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @return internal {@code Utf8String} representation of bBFOAJGLLBC for modifications
     */
    public Utf8String getMutableBBFOAJGLLBCBytes() {
      bitField1_ |= 0x00000002;
      return this.bBFOAJGLLBC;
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @param value the bBFOAJGLLBC to set
     * @return this
     */
    public Gateserver setBBFOAJGLLBC(final CharSequence value) {
      bitField1_ |= 0x00000002;
      bBFOAJGLLBC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string BBFOAJGLLBC = 355;</code>
     * @param value the bBFOAJGLLBC to set
     * @return this
     */
    public Gateserver setBBFOAJGLLBC(final Utf8String value) {
      bitField1_ |= 0x00000002;
      bBFOAJGLLBC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @return whether the kKHFKMIKFIB field is set
     */
    public boolean hasKKHFKMIKFIB() {
      return (bitField1_ & 0x00000004) != 0;
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @return this
     */
    public Gateserver clearKKHFKMIKFIB() {
      bitField1_ &= ~0x00000004;
      kKHFKMIKFIB.clear();
      return this;
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @return the kKHFKMIKFIB
     */
    public String getKKHFKMIKFIB() {
      return kKHFKMIKFIB.getString();
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @return internal {@code Utf8String} representation of kKHFKMIKFIB for reading
     */
    public Utf8String getKKHFKMIKFIBBytes() {
      return this.kKHFKMIKFIB;
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @return internal {@code Utf8String} representation of kKHFKMIKFIB for modifications
     */
    public Utf8String getMutableKKHFKMIKFIBBytes() {
      bitField1_ |= 0x00000004;
      return this.kKHFKMIKFIB;
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @param value the kKHFKMIKFIB to set
     * @return this
     */
    public Gateserver setKKHFKMIKFIB(final CharSequence value) {
      bitField1_ |= 0x00000004;
      kKHFKMIKFIB.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string KKHFKMIKFIB = 362;</code>
     * @param value the kKHFKMIKFIB to set
     * @return this
     */
    public Gateserver setKKHFKMIKFIB(final Utf8String value) {
      bitField1_ |= 0x00000004;
      kKHFKMIKFIB.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @return whether the mKCNEFHHAOG field is set
     */
    public boolean hasMKCNEFHHAOG() {
      return (bitField1_ & 0x00000008) != 0;
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @return this
     */
    public Gateserver clearMKCNEFHHAOG() {
      bitField1_ &= ~0x00000008;
      mKCNEFHHAOG.clear();
      return this;
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @return the mKCNEFHHAOG
     */
    public String getMKCNEFHHAOG() {
      return mKCNEFHHAOG.getString();
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @return internal {@code Utf8String} representation of mKCNEFHHAOG for reading
     */
    public Utf8String getMKCNEFHHAOGBytes() {
      return this.mKCNEFHHAOG;
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @return internal {@code Utf8String} representation of mKCNEFHHAOG for modifications
     */
    public Utf8String getMutableMKCNEFHHAOGBytes() {
      bitField1_ |= 0x00000008;
      return this.mKCNEFHHAOG;
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @param value the mKCNEFHHAOG to set
     * @return this
     */
    public Gateserver setMKCNEFHHAOG(final CharSequence value) {
      bitField1_ |= 0x00000008;
      mKCNEFHHAOG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string MKCNEFHHAOG = 365;</code>
     * @param value the mKCNEFHHAOG to set
     * @return this
     */
    public Gateserver setMKCNEFHHAOG(final Utf8String value) {
      bitField1_ |= 0x00000008;
      mKCNEFHHAOG.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @return whether the ifixUrl field is set
     */
    public boolean hasIfixUrl() {
      return (bitField1_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @return this
     */
    public Gateserver clearIfixUrl() {
      bitField1_ &= ~0x00000010;
      ifixUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @return the ifixUrl
     */
    public String getIfixUrl() {
      return ifixUrl.getString();
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @return internal {@code Utf8String} representation of ifixUrl for reading
     */
    public Utf8String getIfixUrlBytes() {
      return this.ifixUrl;
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @return internal {@code Utf8String} representation of ifixUrl for modifications
     */
    public Utf8String getMutableIfixUrlBytes() {
      bitField1_ |= 0x00000010;
      return this.ifixUrl;
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @param value the ifixUrl to set
     * @return this
     */
    public Gateserver setIfixUrl(final CharSequence value) {
      bitField1_ |= 0x00000010;
      ifixUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  Ifix
     * </pre>
     *
     * <code>optional string ifix_url = 370;</code>
     * @param value the ifixUrl to set
     * @return this
     */
    public Gateserver setIfixUrl(final Utf8String value) {
      bitField1_ |= 0x00000010;
      ifixUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @return whether the nPPCGBIFDMN field is set
     */
    public boolean hasNPPCGBIFDMN() {
      return (bitField1_ & 0x00000020) != 0;
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @return this
     */
    public Gateserver clearNPPCGBIFDMN() {
      bitField1_ &= ~0x00000020;
      nPPCGBIFDMN.clear();
      return this;
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @return the nPPCGBIFDMN
     */
    public String getNPPCGBIFDMN() {
      return nPPCGBIFDMN.getString();
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @return internal {@code Utf8String} representation of nPPCGBIFDMN for reading
     */
    public Utf8String getNPPCGBIFDMNBytes() {
      return this.nPPCGBIFDMN;
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @return internal {@code Utf8String} representation of nPPCGBIFDMN for modifications
     */
    public Utf8String getMutableNPPCGBIFDMNBytes() {
      bitField1_ |= 0x00000020;
      return this.nPPCGBIFDMN;
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @param value the nPPCGBIFDMN to set
     * @return this
     */
    public Gateserver setNPPCGBIFDMN(final CharSequence value) {
      bitField1_ |= 0x00000020;
      nPPCGBIFDMN.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NPPCGBIFDMN = 452;</code>
     * @param value the nPPCGBIFDMN to set
     * @return this
     */
    public Gateserver setNPPCGBIFDMN(final Utf8String value) {
      bitField1_ |= 0x00000020;
      nPPCGBIFDMN.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @return whether the nPIGPBEKEKO field is set
     */
    public boolean hasNPIGPBEKEKO() {
      return (bitField1_ & 0x00000040) != 0;
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @return this
     */
    public Gateserver clearNPIGPBEKEKO() {
      bitField1_ &= ~0x00000040;
      nPIGPBEKEKO.clear();
      return this;
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @return the nPIGPBEKEKO
     */
    public String getNPIGPBEKEKO() {
      return nPIGPBEKEKO.getString();
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @return internal {@code Utf8String} representation of nPIGPBEKEKO for reading
     */
    public Utf8String getNPIGPBEKEKOBytes() {
      return this.nPIGPBEKEKO;
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @return internal {@code Utf8String} representation of nPIGPBEKEKO for modifications
     */
    public Utf8String getMutableNPIGPBEKEKOBytes() {
      bitField1_ |= 0x00000040;
      return this.nPIGPBEKEKO;
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @param value the nPIGPBEKEKO to set
     * @return this
     */
    public Gateserver setNPIGPBEKEKO(final CharSequence value) {
      bitField1_ |= 0x00000040;
      nPIGPBEKEKO.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NPIGPBEKEKO = 464;</code>
     * @param value the nPIGPBEKEKO to set
     * @return this
     */
    public Gateserver setNPIGPBEKEKO(final Utf8String value) {
      bitField1_ |= 0x00000040;
      nPIGPBEKEKO.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @return whether the aIPNJNLHFBP field is set
     */
    public boolean hasAIPNJNLHFBP() {
      return (bitField1_ & 0x00000080) != 0;
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @return this
     */
    public Gateserver clearAIPNJNLHFBP() {
      bitField1_ &= ~0x00000080;
      aIPNJNLHFBP.clear();
      return this;
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @return the aIPNJNLHFBP
     */
    public String getAIPNJNLHFBP() {
      return aIPNJNLHFBP.getString();
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @return internal {@code Utf8String} representation of aIPNJNLHFBP for reading
     */
    public Utf8String getAIPNJNLHFBPBytes() {
      return this.aIPNJNLHFBP;
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @return internal {@code Utf8String} representation of aIPNJNLHFBP for modifications
     */
    public Utf8String getMutableAIPNJNLHFBPBytes() {
      bitField1_ |= 0x00000080;
      return this.aIPNJNLHFBP;
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @param value the aIPNJNLHFBP to set
     * @return this
     */
    public Gateserver setAIPNJNLHFBP(final CharSequence value) {
      bitField1_ |= 0x00000080;
      aIPNJNLHFBP.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string AIPNJNLHFBP = 569;</code>
     * @param value the aIPNJNLHFBP to set
     * @return this
     */
    public Gateserver setAIPNJNLHFBP(final Utf8String value) {
      bitField1_ |= 0x00000080;
      aIPNJNLHFBP.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @return whether the fHALNCIHMGA field is set
     */
    public boolean hasFHALNCIHMGA() {
      return (bitField1_ & 0x00000100) != 0;
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @return this
     */
    public Gateserver clearFHALNCIHMGA() {
      bitField1_ &= ~0x00000100;
      fHALNCIHMGA.clear();
      return this;
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @return the fHALNCIHMGA
     */
    public String getFHALNCIHMGA() {
      return fHALNCIHMGA.getString();
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @return internal {@code Utf8String} representation of fHALNCIHMGA for reading
     */
    public Utf8String getFHALNCIHMGABytes() {
      return this.fHALNCIHMGA;
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @return internal {@code Utf8String} representation of fHALNCIHMGA for modifications
     */
    public Utf8String getMutableFHALNCIHMGABytes() {
      bitField1_ |= 0x00000100;
      return this.fHALNCIHMGA;
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @param value the fHALNCIHMGA to set
     * @return this
     */
    public Gateserver setFHALNCIHMGA(final CharSequence value) {
      bitField1_ |= 0x00000100;
      fHALNCIHMGA.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string FHALNCIHMGA = 592;</code>
     * @param value the fHALNCIHMGA to set
     * @return this
     */
    public Gateserver setFHALNCIHMGA(final Utf8String value) {
      bitField1_ |= 0x00000100;
      fHALNCIHMGA.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @return whether the lKDFCHNEFBB field is set
     */
    public boolean hasLKDFCHNEFBB() {
      return (bitField1_ & 0x00000200) != 0;
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @return this
     */
    public Gateserver clearLKDFCHNEFBB() {
      bitField1_ &= ~0x00000200;
      lKDFCHNEFBB.clear();
      return this;
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @return the lKDFCHNEFBB
     */
    public String getLKDFCHNEFBB() {
      return lKDFCHNEFBB.getString();
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @return internal {@code Utf8String} representation of lKDFCHNEFBB for reading
     */
    public Utf8String getLKDFCHNEFBBBytes() {
      return this.lKDFCHNEFBB;
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @return internal {@code Utf8String} representation of lKDFCHNEFBB for modifications
     */
    public Utf8String getMutableLKDFCHNEFBBBytes() {
      bitField1_ |= 0x00000200;
      return this.lKDFCHNEFBB;
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @param value the lKDFCHNEFBB to set
     * @return this
     */
    public Gateserver setLKDFCHNEFBB(final CharSequence value) {
      bitField1_ |= 0x00000200;
      lKDFCHNEFBB.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string LKDFCHNEFBB = 614;</code>
     * @param value the lKDFCHNEFBB to set
     * @return this
     */
    public Gateserver setLKDFCHNEFBB(final Utf8String value) {
      bitField1_ |= 0x00000200;
      lKDFCHNEFBB.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @return whether the msg2 field is set
     */
    public boolean hasMsg2() {
      return (bitField1_ & 0x00000400) != 0;
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @return this
     */
    public Gateserver clearMsg2() {
      bitField1_ &= ~0x00000400;
      msg2.clear();
      return this;
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @return the msg2
     */
    public String getMsg2() {
      return msg2.getString();
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @return internal {@code Utf8String} representation of msg2 for reading
     */
    public Utf8String getMsg2Bytes() {
      return this.msg2;
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @return internal {@code Utf8String} representation of msg2 for modifications
     */
    public Utf8String getMutableMsg2Bytes() {
      bitField1_ |= 0x00000400;
      return this.msg2;
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @param value the msg2 to set
     * @return this
     */
    public Gateserver setMsg2(final CharSequence value) {
      bitField1_ |= 0x00000400;
      msg2.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg2 = 659;</code>
     * @param value the msg2 to set
     * @return this
     */
    public Gateserver setMsg2(final Utf8String value) {
      bitField1_ |= 0x00000400;
      msg2.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @return whether the lHGKDGDJIHC field is set
     */
    public boolean hasLHGKDGDJIHC() {
      return (bitField1_ & 0x00000800) != 0;
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @return this
     */
    public Gateserver clearLHGKDGDJIHC() {
      bitField1_ &= ~0x00000800;
      lHGKDGDJIHC.clear();
      return this;
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @return the lHGKDGDJIHC
     */
    public String getLHGKDGDJIHC() {
      return lHGKDGDJIHC.getString();
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @return internal {@code Utf8String} representation of lHGKDGDJIHC for reading
     */
    public Utf8String getLHGKDGDJIHCBytes() {
      return this.lHGKDGDJIHC;
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @return internal {@code Utf8String} representation of lHGKDGDJIHC for modifications
     */
    public Utf8String getMutableLHGKDGDJIHCBytes() {
      bitField1_ |= 0x00000800;
      return this.lHGKDGDJIHC;
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @param value the lHGKDGDJIHC to set
     * @return this
     */
    public Gateserver setLHGKDGDJIHC(final CharSequence value) {
      bitField1_ |= 0x00000800;
      lHGKDGDJIHC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string LHGKDGDJIHC = 784;</code>
     * @param value the lHGKDGDJIHC to set
     * @return this
     */
    public Gateserver setLHGKDGDJIHC(final Utf8String value) {
      bitField1_ |= 0x00000800;
      lHGKDGDJIHC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @return whether the oGJIECMHHHG field is set
     */
    public boolean hasOGJIECMHHHG() {
      return (bitField1_ & 0x00001000) != 0;
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @return this
     */
    public Gateserver clearOGJIECMHHHG() {
      bitField1_ &= ~0x00001000;
      oGJIECMHHHG.clear();
      return this;
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @return the oGJIECMHHHG
     */
    public String getOGJIECMHHHG() {
      return oGJIECMHHHG.getString();
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @return internal {@code Utf8String} representation of oGJIECMHHHG for reading
     */
    public Utf8String getOGJIECMHHHGBytes() {
      return this.oGJIECMHHHG;
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @return internal {@code Utf8String} representation of oGJIECMHHHG for modifications
     */
    public Utf8String getMutableOGJIECMHHHGBytes() {
      bitField1_ |= 0x00001000;
      return this.oGJIECMHHHG;
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @param value the oGJIECMHHHG to set
     * @return this
     */
    public Gateserver setOGJIECMHHHG(final CharSequence value) {
      bitField1_ |= 0x00001000;
      oGJIECMHHHG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string OGJIECMHHHG = 962;</code>
     * @param value the oGJIECMHHHG to set
     * @return this
     */
    public Gateserver setOGJIECMHHHG(final Utf8String value) {
      bitField1_ |= 0x00001000;
      oGJIECMHHHG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @return whether the pMABNNEDCCG field is set
     */
    public boolean hasPMABNNEDCCG() {
      return (bitField1_ & 0x00002000) != 0;
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @return this
     */
    public Gateserver clearPMABNNEDCCG() {
      bitField1_ &= ~0x00002000;
      pMABNNEDCCG.clear();
      return this;
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @return the pMABNNEDCCG
     */
    public String getPMABNNEDCCG() {
      return pMABNNEDCCG.getString();
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @return internal {@code Utf8String} representation of pMABNNEDCCG for reading
     */
    public Utf8String getPMABNNEDCCGBytes() {
      return this.pMABNNEDCCG;
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @return internal {@code Utf8String} representation of pMABNNEDCCG for modifications
     */
    public Utf8String getMutablePMABNNEDCCGBytes() {
      bitField1_ |= 0x00002000;
      return this.pMABNNEDCCG;
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @param value the pMABNNEDCCG to set
     * @return this
     */
    public Gateserver setPMABNNEDCCG(final CharSequence value) {
      bitField1_ |= 0x00002000;
      pMABNNEDCCG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string PMABNNEDCCG = 1012;</code>
     * @param value the pMABNNEDCCG to set
     * @return this
     */
    public Gateserver setPMABNNEDCCG(final Utf8String value) {
      bitField1_ |= 0x00002000;
      pMABNNEDCCG.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @return whether the nECFMBFGPML field is set
     */
    public boolean hasNECFMBFGPML() {
      return (bitField1_ & 0x00004000) != 0;
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @return this
     */
    public Gateserver clearNECFMBFGPML() {
      bitField1_ &= ~0x00004000;
      nECFMBFGPML.clear();
      return this;
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @return the nECFMBFGPML
     */
    public String getNECFMBFGPML() {
      return nECFMBFGPML.getString();
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @return internal {@code Utf8String} representation of nECFMBFGPML for reading
     */
    public Utf8String getNECFMBFGPMLBytes() {
      return this.nECFMBFGPML;
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @return internal {@code Utf8String} representation of nECFMBFGPML for modifications
     */
    public Utf8String getMutableNECFMBFGPMLBytes() {
      bitField1_ |= 0x00004000;
      return this.nECFMBFGPML;
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @param value the nECFMBFGPML to set
     * @return this
     */
    public Gateserver setNECFMBFGPML(final CharSequence value) {
      bitField1_ |= 0x00004000;
      nECFMBFGPML.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NECFMBFGPML = 1035;</code>
     * @param value the nECFMBFGPML to set
     * @return this
     */
    public Gateserver setNECFMBFGPML(final Utf8String value) {
      bitField1_ |= 0x00004000;
      nECFMBFGPML.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @return whether the kDBAGALHEDC field is set
     */
    public boolean hasKDBAGALHEDC() {
      return (bitField1_ & 0x00008000) != 0;
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @return this
     */
    public Gateserver clearKDBAGALHEDC() {
      bitField1_ &= ~0x00008000;
      kDBAGALHEDC.clear();
      return this;
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @return the kDBAGALHEDC
     */
    public String getKDBAGALHEDC() {
      return kDBAGALHEDC.getString();
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @return internal {@code Utf8String} representation of kDBAGALHEDC for reading
     */
    public Utf8String getKDBAGALHEDCBytes() {
      return this.kDBAGALHEDC;
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @return internal {@code Utf8String} representation of kDBAGALHEDC for modifications
     */
    public Utf8String getMutableKDBAGALHEDCBytes() {
      bitField1_ |= 0x00008000;
      return this.kDBAGALHEDC;
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @param value the kDBAGALHEDC to set
     * @return this
     */
    public Gateserver setKDBAGALHEDC(final CharSequence value) {
      bitField1_ |= 0x00008000;
      kDBAGALHEDC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string KDBAGALHEDC = 1122;</code>
     * @param value the kDBAGALHEDC to set
     * @return this
     */
    public Gateserver setKDBAGALHEDC(final Utf8String value) {
      bitField1_ |= 0x00008000;
      kDBAGALHEDC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @return whether the fDGFFCMALPI field is set
     */
    public boolean hasFDGFFCMALPI() {
      return (bitField1_ & 0x00010000) != 0;
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @return this
     */
    public Gateserver clearFDGFFCMALPI() {
      bitField1_ &= ~0x00010000;
      fDGFFCMALPI.clear();
      return this;
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @return the fDGFFCMALPI
     */
    public String getFDGFFCMALPI() {
      return fDGFFCMALPI.getString();
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @return internal {@code Utf8String} representation of fDGFFCMALPI for reading
     */
    public Utf8String getFDGFFCMALPIBytes() {
      return this.fDGFFCMALPI;
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @return internal {@code Utf8String} representation of fDGFFCMALPI for modifications
     */
    public Utf8String getMutableFDGFFCMALPIBytes() {
      bitField1_ |= 0x00010000;
      return this.fDGFFCMALPI;
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @param value the fDGFFCMALPI to set
     * @return this
     */
    public Gateserver setFDGFFCMALPI(final CharSequence value) {
      bitField1_ |= 0x00010000;
      fDGFFCMALPI.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string FDGFFCMALPI = 1134;</code>
     * @param value the fDGFFCMALPI to set
     * @return this
     */
    public Gateserver setFDGFFCMALPI(final Utf8String value) {
      bitField1_ |= 0x00010000;
      fDGFFCMALPI.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @return whether the kLIAGHGOFML field is set
     */
    public boolean hasKLIAGHGOFML() {
      return (bitField1_ & 0x00020000) != 0;
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @return this
     */
    public Gateserver clearKLIAGHGOFML() {
      bitField1_ &= ~0x00020000;
      kLIAGHGOFML.clear();
      return this;
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @return the kLIAGHGOFML
     */
    public String getKLIAGHGOFML() {
      return kLIAGHGOFML.getString();
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @return internal {@code Utf8String} representation of kLIAGHGOFML for reading
     */
    public Utf8String getKLIAGHGOFMLBytes() {
      return this.kLIAGHGOFML;
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @return internal {@code Utf8String} representation of kLIAGHGOFML for modifications
     */
    public Utf8String getMutableKLIAGHGOFMLBytes() {
      bitField1_ |= 0x00020000;
      return this.kLIAGHGOFML;
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @param value the kLIAGHGOFML to set
     * @return this
     */
    public Gateserver setKLIAGHGOFML(final CharSequence value) {
      bitField1_ |= 0x00020000;
      kLIAGHGOFML.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string KLIAGHGOFML = 1245;</code>
     * @param value the kLIAGHGOFML to set
     * @return this
     */
    public Gateserver setKLIAGHGOFML(final Utf8String value) {
      bitField1_ |= 0x00020000;
      kLIAGHGOFML.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @return whether the pNALJLBMILJ field is set
     */
    public boolean hasPNALJLBMILJ() {
      return (bitField1_ & 0x00040000) != 0;
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @return this
     */
    public Gateserver clearPNALJLBMILJ() {
      bitField1_ &= ~0x00040000;
      pNALJLBMILJ.clear();
      return this;
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @return the pNALJLBMILJ
     */
    public String getPNALJLBMILJ() {
      return pNALJLBMILJ.getString();
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @return internal {@code Utf8String} representation of pNALJLBMILJ for reading
     */
    public Utf8String getPNALJLBMILJBytes() {
      return this.pNALJLBMILJ;
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @return internal {@code Utf8String} representation of pNALJLBMILJ for modifications
     */
    public Utf8String getMutablePNALJLBMILJBytes() {
      bitField1_ |= 0x00040000;
      return this.pNALJLBMILJ;
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @param value the pNALJLBMILJ to set
     * @return this
     */
    public Gateserver setPNALJLBMILJ(final CharSequence value) {
      bitField1_ |= 0x00040000;
      pNALJLBMILJ.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string PNALJLBMILJ = 1307;</code>
     * @param value the pNALJLBMILJ to set
     * @return this
     */
    public Gateserver setPNALJLBMILJ(final Utf8String value) {
      bitField1_ |= 0x00040000;
      pNALJLBMILJ.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @return whether the bJOCANIBBKI field is set
     */
    public boolean hasBJOCANIBBKI() {
      return (bitField1_ & 0x00080000) != 0;
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @return this
     */
    public Gateserver clearBJOCANIBBKI() {
      bitField1_ &= ~0x00080000;
      bJOCANIBBKI.clear();
      return this;
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @return the bJOCANIBBKI
     */
    public String getBJOCANIBBKI() {
      return bJOCANIBBKI.getString();
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @return internal {@code Utf8String} representation of bJOCANIBBKI for reading
     */
    public Utf8String getBJOCANIBBKIBytes() {
      return this.bJOCANIBBKI;
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @return internal {@code Utf8String} representation of bJOCANIBBKI for modifications
     */
    public Utf8String getMutableBJOCANIBBKIBytes() {
      bitField1_ |= 0x00080000;
      return this.bJOCANIBBKI;
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @param value the bJOCANIBBKI to set
     * @return this
     */
    public Gateserver setBJOCANIBBKI(final CharSequence value) {
      bitField1_ |= 0x00080000;
      bJOCANIBBKI.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string BJOCANIBBKI = 1332;</code>
     * @param value the bJOCANIBBKI to set
     * @return this
     */
    public Gateserver setBJOCANIBBKI(final Utf8String value) {
      bitField1_ |= 0x00080000;
      bJOCANIBBKI.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @return whether the eICAECNMDIB field is set
     */
    public boolean hasEICAECNMDIB() {
      return (bitField1_ & 0x00100000) != 0;
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @return this
     */
    public Gateserver clearEICAECNMDIB() {
      bitField1_ &= ~0x00100000;
      eICAECNMDIB.clear();
      return this;
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @return the eICAECNMDIB
     */
    public String getEICAECNMDIB() {
      return eICAECNMDIB.getString();
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @return internal {@code Utf8String} representation of eICAECNMDIB for reading
     */
    public Utf8String getEICAECNMDIBBytes() {
      return this.eICAECNMDIB;
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @return internal {@code Utf8String} representation of eICAECNMDIB for modifications
     */
    public Utf8String getMutableEICAECNMDIBBytes() {
      bitField1_ |= 0x00100000;
      return this.eICAECNMDIB;
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @param value the eICAECNMDIB to set
     * @return this
     */
    public Gateserver setEICAECNMDIB(final CharSequence value) {
      bitField1_ |= 0x00100000;
      eICAECNMDIB.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string EICAECNMDIB = 1334;</code>
     * @param value the eICAECNMDIB to set
     * @return this
     */
    public Gateserver setEICAECNMDIB(final Utf8String value) {
      bitField1_ |= 0x00100000;
      eICAECNMDIB.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @return whether the lLFDDPLHGBM field is set
     */
    public boolean hasLLFDDPLHGBM() {
      return (bitField1_ & 0x00200000) != 0;
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @return this
     */
    public Gateserver clearLLFDDPLHGBM() {
      bitField1_ &= ~0x00200000;
      lLFDDPLHGBM.clear();
      return this;
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @return the lLFDDPLHGBM
     */
    public String getLLFDDPLHGBM() {
      return lLFDDPLHGBM.getString();
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @return internal {@code Utf8String} representation of lLFDDPLHGBM for reading
     */
    public Utf8String getLLFDDPLHGBMBytes() {
      return this.lLFDDPLHGBM;
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @return internal {@code Utf8String} representation of lLFDDPLHGBM for modifications
     */
    public Utf8String getMutableLLFDDPLHGBMBytes() {
      bitField1_ |= 0x00200000;
      return this.lLFDDPLHGBM;
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @param value the lLFDDPLHGBM to set
     * @return this
     */
    public Gateserver setLLFDDPLHGBM(final CharSequence value) {
      bitField1_ |= 0x00200000;
      lLFDDPLHGBM.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string LLFDDPLHGBM = 1359;</code>
     * @param value the lLFDDPLHGBM to set
     * @return this
     */
    public Gateserver setLLFDDPLHGBM(final Utf8String value) {
      bitField1_ |= 0x00200000;
      lLFDDPLHGBM.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @return whether the oBOPKJFGDIC field is set
     */
    public boolean hasOBOPKJFGDIC() {
      return (bitField1_ & 0x00400000) != 0;
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @return this
     */
    public Gateserver clearOBOPKJFGDIC() {
      bitField1_ &= ~0x00400000;
      oBOPKJFGDIC.clear();
      return this;
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @return the oBOPKJFGDIC
     */
    public String getOBOPKJFGDIC() {
      return oBOPKJFGDIC.getString();
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @return internal {@code Utf8String} representation of oBOPKJFGDIC for reading
     */
    public Utf8String getOBOPKJFGDICBytes() {
      return this.oBOPKJFGDIC;
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @return internal {@code Utf8String} representation of oBOPKJFGDIC for modifications
     */
    public Utf8String getMutableOBOPKJFGDICBytes() {
      bitField1_ |= 0x00400000;
      return this.oBOPKJFGDIC;
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @param value the oBOPKJFGDIC to set
     * @return this
     */
    public Gateserver setOBOPKJFGDIC(final CharSequence value) {
      bitField1_ |= 0x00400000;
      oBOPKJFGDIC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string OBOPKJFGDIC = 1556;</code>
     * @param value the oBOPKJFGDIC to set
     * @return this
     */
    public Gateserver setOBOPKJFGDIC(final Utf8String value) {
      bitField1_ |= 0x00400000;
      oBOPKJFGDIC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @return whether the mDKDJLNHGKN field is set
     */
    public boolean hasMDKDJLNHGKN() {
      return (bitField1_ & 0x00800000) != 0;
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @return this
     */
    public Gateserver clearMDKDJLNHGKN() {
      bitField1_ &= ~0x00800000;
      mDKDJLNHGKN.clear();
      return this;
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @return the mDKDJLNHGKN
     */
    public String getMDKDJLNHGKN() {
      return mDKDJLNHGKN.getString();
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @return internal {@code Utf8String} representation of mDKDJLNHGKN for reading
     */
    public Utf8String getMDKDJLNHGKNBytes() {
      return this.mDKDJLNHGKN;
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @return internal {@code Utf8String} representation of mDKDJLNHGKN for modifications
     */
    public Utf8String getMutableMDKDJLNHGKNBytes() {
      bitField1_ |= 0x00800000;
      return this.mDKDJLNHGKN;
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @param value the mDKDJLNHGKN to set
     * @return this
     */
    public Gateserver setMDKDJLNHGKN(final CharSequence value) {
      bitField1_ |= 0x00800000;
      mDKDJLNHGKN.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string MDKDJLNHGKN = 1624;</code>
     * @param value the mDKDJLNHGKN to set
     * @return this
     */
    public Gateserver setMDKDJLNHGKN(final Utf8String value) {
      bitField1_ |= 0x00800000;
      mDKDJLNHGKN.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @return whether the eLJIMGJLHBC field is set
     */
    public boolean hasELJIMGJLHBC() {
      return (bitField1_ & 0x01000000) != 0;
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @return this
     */
    public Gateserver clearELJIMGJLHBC() {
      bitField1_ &= ~0x01000000;
      eLJIMGJLHBC.clear();
      return this;
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @return the eLJIMGJLHBC
     */
    public String getELJIMGJLHBC() {
      return eLJIMGJLHBC.getString();
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @return internal {@code Utf8String} representation of eLJIMGJLHBC for reading
     */
    public Utf8String getELJIMGJLHBCBytes() {
      return this.eLJIMGJLHBC;
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @return internal {@code Utf8String} representation of eLJIMGJLHBC for modifications
     */
    public Utf8String getMutableELJIMGJLHBCBytes() {
      bitField1_ |= 0x01000000;
      return this.eLJIMGJLHBC;
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @param value the eLJIMGJLHBC to set
     * @return this
     */
    public Gateserver setELJIMGJLHBC(final CharSequence value) {
      bitField1_ |= 0x01000000;
      eLJIMGJLHBC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ELJIMGJLHBC = 1779;</code>
     * @param value the eLJIMGJLHBC to set
     * @return this
     */
    public Gateserver setELJIMGJLHBC(final Utf8String value) {
      bitField1_ |= 0x01000000;
      eLJIMGJLHBC.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @return whether the gKPLIAPPLCO field is set
     */
    public boolean hasGKPLIAPPLCO() {
      return (bitField1_ & 0x02000000) != 0;
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @return this
     */
    public Gateserver clearGKPLIAPPLCO() {
      bitField1_ &= ~0x02000000;
      gKPLIAPPLCO.clear();
      return this;
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @return the gKPLIAPPLCO
     */
    public String getGKPLIAPPLCO() {
      return gKPLIAPPLCO.getString();
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @return internal {@code Utf8String} representation of gKPLIAPPLCO for reading
     */
    public Utf8String getGKPLIAPPLCOBytes() {
      return this.gKPLIAPPLCO;
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @return internal {@code Utf8String} representation of gKPLIAPPLCO for modifications
     */
    public Utf8String getMutableGKPLIAPPLCOBytes() {
      bitField1_ |= 0x02000000;
      return this.gKPLIAPPLCO;
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @param value the gKPLIAPPLCO to set
     * @return this
     */
    public Gateserver setGKPLIAPPLCO(final CharSequence value) {
      bitField1_ |= 0x02000000;
      gKPLIAPPLCO.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string GKPLIAPPLCO = 1893;</code>
     * @param value the gKPLIAPPLCO to set
     * @return this
     */
    public Gateserver setGKPLIAPPLCO(final Utf8String value) {
      bitField1_ |= 0x02000000;
      gKPLIAPPLCO.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @return whether the ipv6 field is set
     */
    public boolean hasIpv6() {
      return (bitField1_ & 0x04000000) != 0;
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @return this
     */
    public Gateserver clearIpv6() {
      bitField1_ &= ~0x04000000;
      ipv6.clear();
      return this;
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @return the ipv6
     */
    public String getIpv6() {
      return ipv6.getString();
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @return internal {@code Utf8String} representation of ipv6 for reading
     */
    public Utf8String getIpv6Bytes() {
      return this.ipv6;
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @return internal {@code Utf8String} representation of ipv6 for modifications
     */
    public Utf8String getMutableIpv6Bytes() {
      bitField1_ |= 0x04000000;
      return this.ipv6;
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @param value the ipv6 to set
     * @return this
     */
    public Gateserver setIpv6(final CharSequence value) {
      bitField1_ |= 0x04000000;
      ipv6.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ipv6 = 1952;</code>
     * @param value the ipv6 to set
     * @return this
     */
    public Gateserver setIpv6(final Utf8String value) {
      bitField1_ |= 0x04000000;
      ipv6.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     * @return whether the gBONLDEMBEN field is set
     */
    public boolean hasGBONLDEMBEN() {
      return (bitField1_ & 0x08000000) != 0;
    }

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     * @return this
     */
    public Gateserver clearGBONLDEMBEN() {
      bitField1_ &= ~0x08000000;
      gBONLDEMBEN.clear();
      return this;
    }

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGBONLDEMBEN()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedString getGBONLDEMBEN() {
      return gBONLDEMBEN;
    }

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedString getMutableGBONLDEMBEN() {
      bitField1_ |= 0x08000000;
      return gBONLDEMBEN;
    }

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     * @param value the gBONLDEMBEN to add
     * @return this
     */
    public Gateserver addGBONLDEMBEN(final CharSequence value) {
      bitField1_ |= 0x08000000;
      gBONLDEMBEN.add(value);
      return this;
    }

    /**
     * <code>repeated string GBONLDEMBEN = 1588;</code>
     * @param values the gBONLDEMBEN to add
     * @return this
     */
    public Gateserver addAllGBONLDEMBEN(final CharSequence... values) {
      bitField1_ |= 0x08000000;
      gBONLDEMBEN.addAll(values);
      return this;
    }

    @Override
    public Gateserver copyFrom(final Gateserver other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mDAHNIKKAHI = other.mDAHNIKKAHI;
        gHENHJPJJLK = other.gHENHJPJJLK;
        retcode = other.retcode;
        iGKDKFJIDPP = other.iGKDKFJIDPP;
        port = other.port;
        hNDPOHGEIPM = other.hNDPOHGEIPM;
        cLCFLOAMGBL = other.cLCFLOAMGBL;
        unk1 = other.unk1;
        unk2 = other.unk2;
        unk3 = other.unk3;
        unk4 = other.unk4;
        unk5 = other.unk5;
        cNAKLGMDLPE = other.cNAKLGMDLPE;
        aPJECJMGAKC = other.aPJECJMGAKC;
        jGCIILJEHHE = other.jGCIILJEHHE;
        fIOHEKDJNCG = other.fIOHEKDJNCG;
        mCEIPIBAMDB = other.mCEIPIBAMDB;
        eBKBNEKCOHI = other.eBKBNEKCOHI;
        lAABLMNKLLD = other.lAABLMNKLLD;
        oFJAKNEDMDM = other.oFJAKNEDMDM;
        nPHDIMJOKNI = other.nPHDIMJOKNI;
        nNGLEBKCMLA = other.nNGLEBKCMLA;
        exResourceUrl.copyFrom(other.exResourceUrl);
        luaUrl.copyFrom(other.luaUrl);
        ip.copyFrom(other.ip);
        msg.copyFrom(other.msg);
        assetBundleUrl.copyFrom(other.assetBundleUrl);
        regionName.copyFrom(other.regionName);
        iOKEPIEDBNE.copyFrom(other.iOKEPIEDBNE);
        fCMMMPKJJIL.copyFrom(other.fCMMMPKJJIL);
        iPKLAMMKNNG.copyFrom(other.iPKLAMMKNNG);
        iIJLFILFMDF.copyFrom(other.iIJLFILFMDF);
      }
      if ((bitField1_ | other.bitField1_) != 0) {
        bitField1_ = other.bitField1_;
        oDOCFCJMBCL.copyFrom(other.oDOCFCJMBCL);
        bBFOAJGLLBC.copyFrom(other.bBFOAJGLLBC);
        kKHFKMIKFIB.copyFrom(other.kKHFKMIKFIB);
        mKCNEFHHAOG.copyFrom(other.mKCNEFHHAOG);
        ifixUrl.copyFrom(other.ifixUrl);
        nPPCGBIFDMN.copyFrom(other.nPPCGBIFDMN);
        nPIGPBEKEKO.copyFrom(other.nPIGPBEKEKO);
        aIPNJNLHFBP.copyFrom(other.aIPNJNLHFBP);
        fHALNCIHMGA.copyFrom(other.fHALNCIHMGA);
        lKDFCHNEFBB.copyFrom(other.lKDFCHNEFBB);
        msg2.copyFrom(other.msg2);
        lHGKDGDJIHC.copyFrom(other.lHGKDGDJIHC);
        oGJIECMHHHG.copyFrom(other.oGJIECMHHHG);
        pMABNNEDCCG.copyFrom(other.pMABNNEDCCG);
        nECFMBFGPML.copyFrom(other.nECFMBFGPML);
        kDBAGALHEDC.copyFrom(other.kDBAGALHEDC);
        fDGFFCMALPI.copyFrom(other.fDGFFCMALPI);
        kLIAGHGOFML.copyFrom(other.kLIAGHGOFML);
        pNALJLBMILJ.copyFrom(other.pNALJLBMILJ);
        bJOCANIBBKI.copyFrom(other.bJOCANIBBKI);
        eICAECNMDIB.copyFrom(other.eICAECNMDIB);
        lLFDDPLHGBM.copyFrom(other.lLFDDPLHGBM);
        oBOPKJFGDIC.copyFrom(other.oBOPKJFGDIC);
        mDKDJLNHGKN.copyFrom(other.mDKDJLNHGKN);
        eLJIMGJLHBC.copyFrom(other.eLJIMGJLHBC);
        gKPLIAPPLCO.copyFrom(other.gKPLIAPPLCO);
        ipv6.copyFrom(other.ipv6);
        gBONLDEMBEN.copyFrom(other.gBONLDEMBEN);
      }
      return this;
    }

    @Override
    public Gateserver mergeFrom(final Gateserver other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMDAHNIKKAHI()) {
        setMDAHNIKKAHI(other.mDAHNIKKAHI);
      }
      if (other.hasGHENHJPJJLK()) {
        setGHENHJPJJLK(other.gHENHJPJJLK);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasIGKDKFJIDPP()) {
        setIGKDKFJIDPP(other.iGKDKFJIDPP);
      }
      if (other.hasPort()) {
        setPort(other.port);
      }
      if (other.hasHNDPOHGEIPM()) {
        setHNDPOHGEIPM(other.hNDPOHGEIPM);
      }
      if (other.hasCLCFLOAMGBL()) {
        setCLCFLOAMGBL(other.cLCFLOAMGBL);
      }
      if (other.hasUnk1()) {
        setUnk1(other.unk1);
      }
      if (other.hasUnk2()) {
        setUnk2(other.unk2);
      }
      if (other.hasUnk3()) {
        setUnk3(other.unk3);
      }
      if (other.hasUnk4()) {
        setUnk4(other.unk4);
      }
      if (other.hasUnk5()) {
        setUnk5(other.unk5);
      }
      if (other.hasCNAKLGMDLPE()) {
        setCNAKLGMDLPE(other.cNAKLGMDLPE);
      }
      if (other.hasAPJECJMGAKC()) {
        setAPJECJMGAKC(other.aPJECJMGAKC);
      }
      if (other.hasJGCIILJEHHE()) {
        setJGCIILJEHHE(other.jGCIILJEHHE);
      }
      if (other.hasFIOHEKDJNCG()) {
        setFIOHEKDJNCG(other.fIOHEKDJNCG);
      }
      if (other.hasMCEIPIBAMDB()) {
        setMCEIPIBAMDB(other.mCEIPIBAMDB);
      }
      if (other.hasEBKBNEKCOHI()) {
        setEBKBNEKCOHI(other.eBKBNEKCOHI);
      }
      if (other.hasLAABLMNKLLD()) {
        setLAABLMNKLLD(other.lAABLMNKLLD);
      }
      if (other.hasOFJAKNEDMDM()) {
        setOFJAKNEDMDM(other.oFJAKNEDMDM);
      }
      if (other.hasNPHDIMJOKNI()) {
        setNPHDIMJOKNI(other.nPHDIMJOKNI);
      }
      if (other.hasNNGLEBKCMLA()) {
        setNNGLEBKCMLA(other.nNGLEBKCMLA);
      }
      if (other.hasExResourceUrl()) {
        getMutableExResourceUrlBytes().copyFrom(other.exResourceUrl);
      }
      if (other.hasLuaUrl()) {
        getMutableLuaUrlBytes().copyFrom(other.luaUrl);
      }
      if (other.hasIp()) {
        getMutableIpBytes().copyFrom(other.ip);
      }
      if (other.hasMsg()) {
        getMutableMsgBytes().copyFrom(other.msg);
      }
      if (other.hasAssetBundleUrl()) {
        getMutableAssetBundleUrlBytes().copyFrom(other.assetBundleUrl);
      }
      if (other.hasRegionName()) {
        getMutableRegionNameBytes().copyFrom(other.regionName);
      }
      if (other.hasIOKEPIEDBNE()) {
        getMutableIOKEPIEDBNEBytes().copyFrom(other.iOKEPIEDBNE);
      }
      if (other.hasFCMMMPKJJIL()) {
        getMutableFCMMMPKJJILBytes().copyFrom(other.fCMMMPKJJIL);
      }
      if (other.hasIPKLAMMKNNG()) {
        getMutableIPKLAMMKNNGBytes().copyFrom(other.iPKLAMMKNNG);
      }
      if (other.hasIIJLFILFMDF()) {
        getMutableIIJLFILFMDFBytes().copyFrom(other.iIJLFILFMDF);
      }
      if (other.hasODOCFCJMBCL()) {
        getMutableODOCFCJMBCLBytes().copyFrom(other.oDOCFCJMBCL);
      }
      if (other.hasBBFOAJGLLBC()) {
        getMutableBBFOAJGLLBCBytes().copyFrom(other.bBFOAJGLLBC);
      }
      if (other.hasKKHFKMIKFIB()) {
        getMutableKKHFKMIKFIBBytes().copyFrom(other.kKHFKMIKFIB);
      }
      if (other.hasMKCNEFHHAOG()) {
        getMutableMKCNEFHHAOGBytes().copyFrom(other.mKCNEFHHAOG);
      }
      if (other.hasIfixUrl()) {
        getMutableIfixUrlBytes().copyFrom(other.ifixUrl);
      }
      if (other.hasNPPCGBIFDMN()) {
        getMutableNPPCGBIFDMNBytes().copyFrom(other.nPPCGBIFDMN);
      }
      if (other.hasNPIGPBEKEKO()) {
        getMutableNPIGPBEKEKOBytes().copyFrom(other.nPIGPBEKEKO);
      }
      if (other.hasAIPNJNLHFBP()) {
        getMutableAIPNJNLHFBPBytes().copyFrom(other.aIPNJNLHFBP);
      }
      if (other.hasFHALNCIHMGA()) {
        getMutableFHALNCIHMGABytes().copyFrom(other.fHALNCIHMGA);
      }
      if (other.hasLKDFCHNEFBB()) {
        getMutableLKDFCHNEFBBBytes().copyFrom(other.lKDFCHNEFBB);
      }
      if (other.hasMsg2()) {
        getMutableMsg2Bytes().copyFrom(other.msg2);
      }
      if (other.hasLHGKDGDJIHC()) {
        getMutableLHGKDGDJIHCBytes().copyFrom(other.lHGKDGDJIHC);
      }
      if (other.hasOGJIECMHHHG()) {
        getMutableOGJIECMHHHGBytes().copyFrom(other.oGJIECMHHHG);
      }
      if (other.hasPMABNNEDCCG()) {
        getMutablePMABNNEDCCGBytes().copyFrom(other.pMABNNEDCCG);
      }
      if (other.hasNECFMBFGPML()) {
        getMutableNECFMBFGPMLBytes().copyFrom(other.nECFMBFGPML);
      }
      if (other.hasKDBAGALHEDC()) {
        getMutableKDBAGALHEDCBytes().copyFrom(other.kDBAGALHEDC);
      }
      if (other.hasFDGFFCMALPI()) {
        getMutableFDGFFCMALPIBytes().copyFrom(other.fDGFFCMALPI);
      }
      if (other.hasKLIAGHGOFML()) {
        getMutableKLIAGHGOFMLBytes().copyFrom(other.kLIAGHGOFML);
      }
      if (other.hasPNALJLBMILJ()) {
        getMutablePNALJLBMILJBytes().copyFrom(other.pNALJLBMILJ);
      }
      if (other.hasBJOCANIBBKI()) {
        getMutableBJOCANIBBKIBytes().copyFrom(other.bJOCANIBBKI);
      }
      if (other.hasEICAECNMDIB()) {
        getMutableEICAECNMDIBBytes().copyFrom(other.eICAECNMDIB);
      }
      if (other.hasLLFDDPLHGBM()) {
        getMutableLLFDDPLHGBMBytes().copyFrom(other.lLFDDPLHGBM);
      }
      if (other.hasOBOPKJFGDIC()) {
        getMutableOBOPKJFGDICBytes().copyFrom(other.oBOPKJFGDIC);
      }
      if (other.hasMDKDJLNHGKN()) {
        getMutableMDKDJLNHGKNBytes().copyFrom(other.mDKDJLNHGKN);
      }
      if (other.hasELJIMGJLHBC()) {
        getMutableELJIMGJLHBCBytes().copyFrom(other.eLJIMGJLHBC);
      }
      if (other.hasGKPLIAPPLCO()) {
        getMutableGKPLIAPPLCOBytes().copyFrom(other.gKPLIAPPLCO);
      }
      if (other.hasIpv6()) {
        getMutableIpv6Bytes().copyFrom(other.ipv6);
      }
      if (other.hasGBONLDEMBEN()) {
        getMutableGBONLDEMBEN().addAll(other.gBONLDEMBEN);
      }
      return this;
    }

    @Override
    public Gateserver clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bitField1_ = 0;
      mDAHNIKKAHI = 0L;
      gHENHJPJJLK = 0L;
      retcode = 0;
      iGKDKFJIDPP = 0;
      port = 0;
      hNDPOHGEIPM = 0;
      cLCFLOAMGBL = 0;
      unk1 = false;
      unk2 = false;
      unk3 = false;
      unk4 = false;
      unk5 = false;
      cNAKLGMDLPE = false;
      aPJECJMGAKC = false;
      jGCIILJEHHE = false;
      fIOHEKDJNCG = false;
      mCEIPIBAMDB = false;
      eBKBNEKCOHI = false;
      lAABLMNKLLD = false;
      oFJAKNEDMDM = false;
      nPHDIMJOKNI = false;
      nNGLEBKCMLA = false;
      exResourceUrl.clear();
      luaUrl.clear();
      ip.clear();
      msg.clear();
      assetBundleUrl.clear();
      regionName.clear();
      iOKEPIEDBNE.clear();
      fCMMMPKJJIL.clear();
      iPKLAMMKNNG.clear();
      iIJLFILFMDF.clear();
      oDOCFCJMBCL.clear();
      bBFOAJGLLBC.clear();
      kKHFKMIKFIB.clear();
      mKCNEFHHAOG.clear();
      ifixUrl.clear();
      nPPCGBIFDMN.clear();
      nPIGPBEKEKO.clear();
      aIPNJNLHFBP.clear();
      fHALNCIHMGA.clear();
      lKDFCHNEFBB.clear();
      msg2.clear();
      lHGKDGDJIHC.clear();
      oGJIECMHHHG.clear();
      pMABNNEDCCG.clear();
      nECFMBFGPML.clear();
      kDBAGALHEDC.clear();
      fDGFFCMALPI.clear();
      kLIAGHGOFML.clear();
      pNALJLBMILJ.clear();
      bJOCANIBBKI.clear();
      eICAECNMDIB.clear();
      lLFDDPLHGBM.clear();
      oBOPKJFGDIC.clear();
      mDKDJLNHGKN.clear();
      eLJIMGJLHBC.clear();
      gKPLIAPPLCO.clear();
      ipv6.clear();
      gBONLDEMBEN.clear();
      return this;
    }

    @Override
    public Gateserver clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bitField1_ = 0;
      exResourceUrl.clear();
      luaUrl.clear();
      ip.clear();
      msg.clear();
      assetBundleUrl.clear();
      regionName.clear();
      iOKEPIEDBNE.clear();
      fCMMMPKJJIL.clear();
      iPKLAMMKNNG.clear();
      iIJLFILFMDF.clear();
      oDOCFCJMBCL.clear();
      bBFOAJGLLBC.clear();
      kKHFKMIKFIB.clear();
      mKCNEFHHAOG.clear();
      ifixUrl.clear();
      nPPCGBIFDMN.clear();
      nPIGPBEKEKO.clear();
      aIPNJNLHFBP.clear();
      fHALNCIHMGA.clear();
      lKDFCHNEFBB.clear();
      msg2.clear();
      lHGKDGDJIHC.clear();
      oGJIECMHHHG.clear();
      pMABNNEDCCG.clear();
      nECFMBFGPML.clear();
      kDBAGALHEDC.clear();
      fDGFFCMALPI.clear();
      kLIAGHGOFML.clear();
      pNALJLBMILJ.clear();
      bJOCANIBBKI.clear();
      eICAECNMDIB.clear();
      lLFDDPLHGBM.clear();
      oBOPKJFGDIC.clear();
      mDKDJLNHGKN.clear();
      eLJIMGJLHBC.clear();
      gKPLIAPPLCO.clear();
      ipv6.clear();
      gBONLDEMBEN.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof Gateserver)) {
        return false;
      }
      Gateserver other = (Gateserver) o;
      return bitField0_ == other.bitField0_
        && bitField1_ == other.bitField1_
        && (!hasMDAHNIKKAHI() || mDAHNIKKAHI == other.mDAHNIKKAHI)
        && (!hasGHENHJPJJLK() || gHENHJPJJLK == other.gHENHJPJJLK)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasIGKDKFJIDPP() || iGKDKFJIDPP == other.iGKDKFJIDPP)
        && (!hasPort() || port == other.port)
        && (!hasHNDPOHGEIPM() || hNDPOHGEIPM == other.hNDPOHGEIPM)
        && (!hasCLCFLOAMGBL() || cLCFLOAMGBL == other.cLCFLOAMGBL)
        && (!hasUnk1() || unk1 == other.unk1)
        && (!hasUnk2() || unk2 == other.unk2)
        && (!hasUnk3() || unk3 == other.unk3)
        && (!hasUnk4() || unk4 == other.unk4)
        && (!hasUnk5() || unk5 == other.unk5)
        && (!hasCNAKLGMDLPE() || cNAKLGMDLPE == other.cNAKLGMDLPE)
        && (!hasAPJECJMGAKC() || aPJECJMGAKC == other.aPJECJMGAKC)
        && (!hasJGCIILJEHHE() || jGCIILJEHHE == other.jGCIILJEHHE)
        && (!hasFIOHEKDJNCG() || fIOHEKDJNCG == other.fIOHEKDJNCG)
        && (!hasMCEIPIBAMDB() || mCEIPIBAMDB == other.mCEIPIBAMDB)
        && (!hasEBKBNEKCOHI() || eBKBNEKCOHI == other.eBKBNEKCOHI)
        && (!hasLAABLMNKLLD() || lAABLMNKLLD == other.lAABLMNKLLD)
        && (!hasOFJAKNEDMDM() || oFJAKNEDMDM == other.oFJAKNEDMDM)
        && (!hasNPHDIMJOKNI() || nPHDIMJOKNI == other.nPHDIMJOKNI)
        && (!hasNNGLEBKCMLA() || nNGLEBKCMLA == other.nNGLEBKCMLA)
        && (!hasExResourceUrl() || exResourceUrl.equals(other.exResourceUrl))
        && (!hasLuaUrl() || luaUrl.equals(other.luaUrl))
        && (!hasIp() || ip.equals(other.ip))
        && (!hasMsg() || msg.equals(other.msg))
        && (!hasAssetBundleUrl() || assetBundleUrl.equals(other.assetBundleUrl))
        && (!hasRegionName() || regionName.equals(other.regionName))
        && (!hasIOKEPIEDBNE() || iOKEPIEDBNE.equals(other.iOKEPIEDBNE))
        && (!hasFCMMMPKJJIL() || fCMMMPKJJIL.equals(other.fCMMMPKJJIL))
        && (!hasIPKLAMMKNNG() || iPKLAMMKNNG.equals(other.iPKLAMMKNNG))
        && (!hasIIJLFILFMDF() || iIJLFILFMDF.equals(other.iIJLFILFMDF))
        && (!hasODOCFCJMBCL() || oDOCFCJMBCL.equals(other.oDOCFCJMBCL))
        && (!hasBBFOAJGLLBC() || bBFOAJGLLBC.equals(other.bBFOAJGLLBC))
        && (!hasKKHFKMIKFIB() || kKHFKMIKFIB.equals(other.kKHFKMIKFIB))
        && (!hasMKCNEFHHAOG() || mKCNEFHHAOG.equals(other.mKCNEFHHAOG))
        && (!hasIfixUrl() || ifixUrl.equals(other.ifixUrl))
        && (!hasNPPCGBIFDMN() || nPPCGBIFDMN.equals(other.nPPCGBIFDMN))
        && (!hasNPIGPBEKEKO() || nPIGPBEKEKO.equals(other.nPIGPBEKEKO))
        && (!hasAIPNJNLHFBP() || aIPNJNLHFBP.equals(other.aIPNJNLHFBP))
        && (!hasFHALNCIHMGA() || fHALNCIHMGA.equals(other.fHALNCIHMGA))
        && (!hasLKDFCHNEFBB() || lKDFCHNEFBB.equals(other.lKDFCHNEFBB))
        && (!hasMsg2() || msg2.equals(other.msg2))
        && (!hasLHGKDGDJIHC() || lHGKDGDJIHC.equals(other.lHGKDGDJIHC))
        && (!hasOGJIECMHHHG() || oGJIECMHHHG.equals(other.oGJIECMHHHG))
        && (!hasPMABNNEDCCG() || pMABNNEDCCG.equals(other.pMABNNEDCCG))
        && (!hasNECFMBFGPML() || nECFMBFGPML.equals(other.nECFMBFGPML))
        && (!hasKDBAGALHEDC() || kDBAGALHEDC.equals(other.kDBAGALHEDC))
        && (!hasFDGFFCMALPI() || fDGFFCMALPI.equals(other.fDGFFCMALPI))
        && (!hasKLIAGHGOFML() || kLIAGHGOFML.equals(other.kLIAGHGOFML))
        && (!hasPNALJLBMILJ() || pNALJLBMILJ.equals(other.pNALJLBMILJ))
        && (!hasBJOCANIBBKI() || bJOCANIBBKI.equals(other.bJOCANIBBKI))
        && (!hasEICAECNMDIB() || eICAECNMDIB.equals(other.eICAECNMDIB))
        && (!hasLLFDDPLHGBM() || lLFDDPLHGBM.equals(other.lLFDDPLHGBM))
        && (!hasOBOPKJFGDIC() || oBOPKJFGDIC.equals(other.oBOPKJFGDIC))
        && (!hasMDKDJLNHGKN() || mDKDJLNHGKN.equals(other.mDKDJLNHGKN))
        && (!hasELJIMGJLHBC() || eLJIMGJLHBC.equals(other.eLJIMGJLHBC))
        && (!hasGKPLIAPPLCO() || gKPLIAPPLCO.equals(other.gKPLIAPPLCO))
        && (!hasIpv6() || ipv6.equals(other.ipv6))
        && (!hasGBONLDEMBEN() || gBONLDEMBEN.equals(other.gBONLDEMBEN));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeInt64NoTag(mDAHNIKKAHI);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeInt64NoTag(gHENHJPJJLK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(iGKDKFJIDPP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(port);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(hNDPOHGEIPM);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawLittleEndian16((short) 19928);
        output.writeUInt32NoTag(cLCFLOAMGBL);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(unk1);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 80);
        output.writeBoolNoTag(unk2);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawLittleEndian16((short) 1008);
        output.writeBoolNoTag(unk3);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawLittleEndian16((short) 5296);
        output.writeBoolNoTag(unk4);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawLittleEndian16((short) 5536);
        output.writeBoolNoTag(unk5);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawLittleEndian16((short) 6832);
        output.writeBoolNoTag(cNAKLGMDLPE);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeRawLittleEndian16((short) 9352);
        output.writeBoolNoTag(aPJECJMGAKC);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeRawLittleEndian16((short) 10888);
        output.writeBoolNoTag(jGCIILJEHHE);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeRawLittleEndian16((short) 13480);
        output.writeBoolNoTag(fIOHEKDJNCG);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeRawLittleEndian16((short) 25264);
        output.writeBoolNoTag(mCEIPIBAMDB);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeRawLittleEndian16((short) 25272);
        output.writeBoolNoTag(eBKBNEKCOHI);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        output.writeRawLittleEndian16((short) 27320);
        output.writeBoolNoTag(lAABLMNKLLD);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        output.writeRawLittleEndian16((short) 28592);
        output.writeBoolNoTag(oFJAKNEDMDM);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        output.writeRawLittleEndian16((short) 29904);
        output.writeBoolNoTag(nPHDIMJOKNI);
      }
      if ((bitField0_ & 0x00200000) != 0) {
        output.writeRawLittleEndian16((short) 32400);
        output.writeBoolNoTag(nNGLEBKCMLA);
      }
      if ((bitField0_ & 0x00400000) != 0) {
        output.writeRawByte((byte) 10);
        output.writeStringNoTag(exResourceUrl);
      }
      if ((bitField0_ & 0x00800000) != 0) {
        output.writeRawByte((byte) 26);
        output.writeStringNoTag(luaUrl);
      }
      if ((bitField0_ & 0x01000000) != 0) {
        output.writeRawByte((byte) 42);
        output.writeStringNoTag(ip);
      }
      if ((bitField0_ & 0x02000000) != 0) {
        output.writeRawByte((byte) 66);
        output.writeStringNoTag(msg);
      }
      if ((bitField0_ & 0x04000000) != 0) {
        output.writeRawByte((byte) 74);
        output.writeStringNoTag(assetBundleUrl);
      }
      if ((bitField0_ & 0x08000000) != 0) {
        output.writeRawByte((byte) 98);
        output.writeStringNoTag(regionName);
      }
      if ((bitField0_ & 0x10000000) != 0) {
        output.writeRawByte((byte) 114);
        output.writeStringNoTag(iOKEPIEDBNE);
      }
      if ((bitField0_ & 0x20000000) != 0) {
        output.writeRawLittleEndian16((short) 418);
        output.writeStringNoTag(fCMMMPKJJIL);
      }
      if ((bitField0_ & 0x40000000) != 0) {
        output.writeRawLittleEndian16((short) 1962);
        output.writeStringNoTag(iPKLAMMKNNG);
      }
      if ((bitField0_ & 0x80000000) != 0) {
        output.writeRawLittleEndian16((short) 2258);
        output.writeStringNoTag(iIJLFILFMDF);
      }
      if ((bitField1_ & 0x00000001) != 0) {
        output.writeRawLittleEndian16((short) 5514);
        output.writeStringNoTag(oDOCFCJMBCL);
      }
      if ((bitField1_ & 0x00000002) != 0) {
        output.writeRawLittleEndian16((short) 5786);
        output.writeStringNoTag(bBFOAJGLLBC);
      }
      if ((bitField1_ & 0x00000004) != 0) {
        output.writeRawLittleEndian16((short) 5842);
        output.writeStringNoTag(kKHFKMIKFIB);
      }
      if ((bitField1_ & 0x00000008) != 0) {
        output.writeRawLittleEndian16((short) 5866);
        output.writeStringNoTag(mKCNEFHHAOG);
      }
      if ((bitField1_ & 0x00000010) != 0) {
        output.writeRawLittleEndian16((short) 6034);
        output.writeStringNoTag(ifixUrl);
      }
      if ((bitField1_ & 0x00000020) != 0) {
        output.writeRawLittleEndian16((short) 7330);
        output.writeStringNoTag(nPPCGBIFDMN);
      }
      if ((bitField1_ & 0x00000040) != 0) {
        output.writeRawLittleEndian16((short) 7554);
        output.writeStringNoTag(nPIGPBEKEKO);
      }
      if ((bitField1_ & 0x00000080) != 0) {
        output.writeRawLittleEndian16((short) 9162);
        output.writeStringNoTag(aIPNJNLHFBP);
      }
      if ((bitField1_ & 0x00000100) != 0) {
        output.writeRawLittleEndian16((short) 9602);
        output.writeStringNoTag(fHALNCIHMGA);
      }
      if ((bitField1_ & 0x00000200) != 0) {
        output.writeRawLittleEndian16((short) 9906);
        output.writeStringNoTag(lKDFCHNEFBB);
      }
      if ((bitField1_ & 0x00000400) != 0) {
        output.writeRawLittleEndian16((short) 10650);
        output.writeStringNoTag(msg2);
      }
      if ((bitField1_ & 0x00000800) != 0) {
        output.writeRawLittleEndian16((short) 12674);
        output.writeStringNoTag(lHGKDGDJIHC);
      }
      if ((bitField1_ & 0x00001000) != 0) {
        output.writeRawLittleEndian16((short) 15506);
        output.writeStringNoTag(oGJIECMHHHG);
      }
      if ((bitField1_ & 0x00002000) != 0) {
        output.writeRawLittleEndian16((short) 16290);
        output.writeStringNoTag(pMABNNEDCCG);
      }
      if ((bitField1_ & 0x00004000) != 0) {
        output.writeRawLittleEndian16((short) 16602);
        output.writeStringNoTag(nECFMBFGPML);
      }
      if ((bitField1_ & 0x00008000) != 0) {
        output.writeRawLittleEndian16((short) 18066);
        output.writeStringNoTag(kDBAGALHEDC);
      }
      if ((bitField1_ & 0x00010000) != 0) {
        output.writeRawLittleEndian16((short) 18162);
        output.writeStringNoTag(fDGFFCMALPI);
      }
      if ((bitField1_ & 0x00020000) != 0) {
        output.writeRawLittleEndian16((short) 19946);
        output.writeStringNoTag(kLIAGHGOFML);
      }
      if ((bitField1_ & 0x00040000) != 0) {
        output.writeRawLittleEndian16((short) 20954);
        output.writeStringNoTag(pNALJLBMILJ);
      }
      if ((bitField1_ & 0x00080000) != 0) {
        output.writeRawLittleEndian16((short) 21410);
        output.writeStringNoTag(bJOCANIBBKI);
      }
      if ((bitField1_ & 0x00100000) != 0) {
        output.writeRawLittleEndian16((short) 21426);
        output.writeStringNoTag(eICAECNMDIB);
      }
      if ((bitField1_ & 0x00200000) != 0) {
        output.writeRawLittleEndian16((short) 21754);
        output.writeStringNoTag(lLFDDPLHGBM);
      }
      if ((bitField1_ & 0x00400000) != 0) {
        output.writeRawLittleEndian16((short) 24994);
        output.writeStringNoTag(oBOPKJFGDIC);
      }
      if ((bitField1_ & 0x00800000) != 0) {
        output.writeRawLittleEndian16((short) 26050);
        output.writeStringNoTag(mDKDJLNHGKN);
      }
      if ((bitField1_ & 0x01000000) != 0) {
        output.writeRawLittleEndian16((short) 28570);
        output.writeStringNoTag(eLJIMGJLHBC);
      }
      if ((bitField1_ & 0x02000000) != 0) {
        output.writeRawLittleEndian16((short) 30378);
        output.writeStringNoTag(gKPLIAPPLCO);
      }
      if ((bitField1_ & 0x04000000) != 0) {
        output.writeRawLittleEndian16((short) 31362);
        output.writeStringNoTag(ipv6);
      }
      if ((bitField1_ & 0x08000000) != 0) {
        for (int i = 0; i < gBONLDEMBEN.length(); i++) {
          output.writeRawLittleEndian16((short) 25506);
          output.writeStringNoTag(gBONLDEMBEN.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(mDAHNIKKAHI);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(gHENHJPJJLK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(iGKDKFJIDPP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(port);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(hNDPOHGEIPM);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(cLCFLOAMGBL);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00002000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00004000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00008000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00010000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00020000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00040000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00080000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00100000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00200000) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00400000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(exResourceUrl);
      }
      if ((bitField0_ & 0x00800000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(luaUrl);
      }
      if ((bitField0_ & 0x01000000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(ip);
      }
      if ((bitField0_ & 0x02000000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(msg);
      }
      if ((bitField0_ & 0x04000000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(assetBundleUrl);
      }
      if ((bitField0_ & 0x08000000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(regionName);
      }
      if ((bitField0_ & 0x10000000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(iOKEPIEDBNE);
      }
      if ((bitField0_ & 0x20000000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(fCMMMPKJJIL);
      }
      if ((bitField0_ & 0x40000000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(iPKLAMMKNNG);
      }
      if ((bitField0_ & 0x80000000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(iIJLFILFMDF);
      }
      if ((bitField1_ & 0x00000001) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(oDOCFCJMBCL);
      }
      if ((bitField1_ & 0x00000002) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(bBFOAJGLLBC);
      }
      if ((bitField1_ & 0x00000004) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(kKHFKMIKFIB);
      }
      if ((bitField1_ & 0x00000008) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(mKCNEFHHAOG);
      }
      if ((bitField1_ & 0x00000010) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(ifixUrl);
      }
      if ((bitField1_ & 0x00000020) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(nPPCGBIFDMN);
      }
      if ((bitField1_ & 0x00000040) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(nPIGPBEKEKO);
      }
      if ((bitField1_ & 0x00000080) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(aIPNJNLHFBP);
      }
      if ((bitField1_ & 0x00000100) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(fHALNCIHMGA);
      }
      if ((bitField1_ & 0x00000200) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(lKDFCHNEFBB);
      }
      if ((bitField1_ & 0x00000400) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(msg2);
      }
      if ((bitField1_ & 0x00000800) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(lHGKDGDJIHC);
      }
      if ((bitField1_ & 0x00001000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(oGJIECMHHHG);
      }
      if ((bitField1_ & 0x00002000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(pMABNNEDCCG);
      }
      if ((bitField1_ & 0x00004000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(nECFMBFGPML);
      }
      if ((bitField1_ & 0x00008000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(kDBAGALHEDC);
      }
      if ((bitField1_ & 0x00010000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(fDGFFCMALPI);
      }
      if ((bitField1_ & 0x00020000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(kLIAGHGOFML);
      }
      if ((bitField1_ & 0x00040000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(pNALJLBMILJ);
      }
      if ((bitField1_ & 0x00080000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(bJOCANIBBKI);
      }
      if ((bitField1_ & 0x00100000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(eICAECNMDIB);
      }
      if ((bitField1_ & 0x00200000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(lLFDDPLHGBM);
      }
      if ((bitField1_ & 0x00400000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(oBOPKJFGDIC);
      }
      if ((bitField1_ & 0x00800000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(mDKDJLNHGKN);
      }
      if ((bitField1_ & 0x01000000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(eLJIMGJLHBC);
      }
      if ((bitField1_ & 0x02000000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(gKPLIAPPLCO);
      }
      if ((bitField1_ & 0x04000000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(ipv6);
      }
      if ((bitField1_ & 0x08000000) != 0) {
        size += (2 * gBONLDEMBEN.length()) + ProtoSink.computeRepeatedStringSizeNoTag(gBONLDEMBEN);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public Gateserver mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // mDAHNIKKAHI
            mDAHNIKKAHI = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // gHENHJPJJLK
            gHENHJPJJLK = input.readInt64();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // iGKDKFJIDPP
            iGKDKFJIDPP = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // port
            port = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // hNDPOHGEIPM
            hNDPOHGEIPM = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 9944) {
              break;
            }
          }
          case 9944: {
            // cLCFLOAMGBL
            cLCFLOAMGBL = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // unk1
            unk1 = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // unk2
            unk2 = input.readBool();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 496) {
              break;
            }
          }
          case 496: {
            // unk3
            unk3 = input.readBool();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 2608) {
              break;
            }
          }
          case 2608: {
            // unk4
            unk4 = input.readBool();
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 2720) {
              break;
            }
          }
          case 2720: {
            // unk5
            unk5 = input.readBool();
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 3376) {
              break;
            }
          }
          case 3376: {
            // cNAKLGMDLPE
            cNAKLGMDLPE = input.readBool();
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 4616) {
              break;
            }
          }
          case 4616: {
            // aPJECJMGAKC
            aPJECJMGAKC = input.readBool();
            bitField0_ |= 0x00002000;
            tag = input.readTag();
            if (tag != 5384) {
              break;
            }
          }
          case 5384: {
            // jGCIILJEHHE
            jGCIILJEHHE = input.readBool();
            bitField0_ |= 0x00004000;
            tag = input.readTag();
            if (tag != 6696) {
              break;
            }
          }
          case 6696: {
            // fIOHEKDJNCG
            fIOHEKDJNCG = input.readBool();
            bitField0_ |= 0x00008000;
            tag = input.readTag();
            if (tag != 12592) {
              break;
            }
          }
          case 12592: {
            // mCEIPIBAMDB
            mCEIPIBAMDB = input.readBool();
            bitField0_ |= 0x00010000;
            tag = input.readTag();
            if (tag != 12600) {
              break;
            }
          }
          case 12600: {
            // eBKBNEKCOHI
            eBKBNEKCOHI = input.readBool();
            bitField0_ |= 0x00020000;
            tag = input.readTag();
            if (tag != 13624) {
              break;
            }
          }
          case 13624: {
            // lAABLMNKLLD
            lAABLMNKLLD = input.readBool();
            bitField0_ |= 0x00040000;
            tag = input.readTag();
            if (tag != 14256) {
              break;
            }
          }
          case 14256: {
            // oFJAKNEDMDM
            oFJAKNEDMDM = input.readBool();
            bitField0_ |= 0x00080000;
            tag = input.readTag();
            if (tag != 14928) {
              break;
            }
          }
          case 14928: {
            // nPHDIMJOKNI
            nPHDIMJOKNI = input.readBool();
            bitField0_ |= 0x00100000;
            tag = input.readTag();
            if (tag != 16144) {
              break;
            }
          }
          case 16144: {
            // nNGLEBKCMLA
            nNGLEBKCMLA = input.readBool();
            bitField0_ |= 0x00200000;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // exResourceUrl
            input.readString(exResourceUrl);
            bitField0_ |= 0x00400000;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // luaUrl
            input.readString(luaUrl);
            bitField0_ |= 0x00800000;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // ip
            input.readString(ip);
            bitField0_ |= 0x01000000;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // msg
            input.readString(msg);
            bitField0_ |= 0x02000000;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // assetBundleUrl
            input.readString(assetBundleUrl);
            bitField0_ |= 0x04000000;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // regionName
            input.readString(regionName);
            bitField0_ |= 0x08000000;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // iOKEPIEDBNE
            input.readString(iOKEPIEDBNE);
            bitField0_ |= 0x10000000;
            tag = input.readTag();
            if (tag != 162) {
              break;
            }
          }
          case 162: {
            // fCMMMPKJJIL
            input.readString(fCMMMPKJJIL);
            bitField0_ |= 0x20000000;
            tag = input.readTag();
            if (tag != 938) {
              break;
            }
          }
          case 938: {
            // iPKLAMMKNNG
            input.readString(iPKLAMMKNNG);
            bitField0_ |= 0x40000000;
            tag = input.readTag();
            if (tag != 1106) {
              break;
            }
          }
          case 1106: {
            // iIJLFILFMDF
            input.readString(iIJLFILFMDF);
            bitField0_ |= 0x80000000;
            tag = input.readTag();
            if (tag != 2698) {
              break;
            }
          }
          case 2698: {
            // oDOCFCJMBCL
            input.readString(oDOCFCJMBCL);
            bitField1_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 2842) {
              break;
            }
          }
          case 2842: {
            // bBFOAJGLLBC
            input.readString(bBFOAJGLLBC);
            bitField1_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 2898) {
              break;
            }
          }
          case 2898: {
            // kKHFKMIKFIB
            input.readString(kKHFKMIKFIB);
            bitField1_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 2922) {
              break;
            }
          }
          case 2922: {
            // mKCNEFHHAOG
            input.readString(mKCNEFHHAOG);
            bitField1_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 2962) {
              break;
            }
          }
          case 2962: {
            // ifixUrl
            input.readString(ifixUrl);
            bitField1_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 3618) {
              break;
            }
          }
          case 3618: {
            // nPPCGBIFDMN
            input.readString(nPPCGBIFDMN);
            bitField1_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 3714) {
              break;
            }
          }
          case 3714: {
            // nPIGPBEKEKO
            input.readString(nPIGPBEKEKO);
            bitField1_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 4554) {
              break;
            }
          }
          case 4554: {
            // aIPNJNLHFBP
            input.readString(aIPNJNLHFBP);
            bitField1_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 4738) {
              break;
            }
          }
          case 4738: {
            // fHALNCIHMGA
            input.readString(fHALNCIHMGA);
            bitField1_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 4914) {
              break;
            }
          }
          case 4914: {
            // lKDFCHNEFBB
            input.readString(lKDFCHNEFBB);
            bitField1_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 5274) {
              break;
            }
          }
          case 5274: {
            // msg2
            input.readString(msg2);
            bitField1_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 6274) {
              break;
            }
          }
          case 6274: {
            // lHGKDGDJIHC
            input.readString(lHGKDGDJIHC);
            bitField1_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 7698) {
              break;
            }
          }
          case 7698: {
            // oGJIECMHHHG
            input.readString(oGJIECMHHHG);
            bitField1_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 8098) {
              break;
            }
          }
          case 8098: {
            // pMABNNEDCCG
            input.readString(pMABNNEDCCG);
            bitField1_ |= 0x00002000;
            tag = input.readTag();
            if (tag != 8282) {
              break;
            }
          }
          case 8282: {
            // nECFMBFGPML
            input.readString(nECFMBFGPML);
            bitField1_ |= 0x00004000;
            tag = input.readTag();
            if (tag != 8978) {
              break;
            }
          }
          case 8978: {
            // kDBAGALHEDC
            input.readString(kDBAGALHEDC);
            bitField1_ |= 0x00008000;
            tag = input.readTag();
            if (tag != 9074) {
              break;
            }
          }
          case 9074: {
            // fDGFFCMALPI
            input.readString(fDGFFCMALPI);
            bitField1_ |= 0x00010000;
            tag = input.readTag();
            if (tag != 9962) {
              break;
            }
          }
          case 9962: {
            // kLIAGHGOFML
            input.readString(kLIAGHGOFML);
            bitField1_ |= 0x00020000;
            tag = input.readTag();
            if (tag != 10458) {
              break;
            }
          }
          case 10458: {
            // pNALJLBMILJ
            input.readString(pNALJLBMILJ);
            bitField1_ |= 0x00040000;
            tag = input.readTag();
            if (tag != 10658) {
              break;
            }
          }
          case 10658: {
            // bJOCANIBBKI
            input.readString(bJOCANIBBKI);
            bitField1_ |= 0x00080000;
            tag = input.readTag();
            if (tag != 10674) {
              break;
            }
          }
          case 10674: {
            // eICAECNMDIB
            input.readString(eICAECNMDIB);
            bitField1_ |= 0x00100000;
            tag = input.readTag();
            if (tag != 10874) {
              break;
            }
          }
          case 10874: {
            // lLFDDPLHGBM
            input.readString(lLFDDPLHGBM);
            bitField1_ |= 0x00200000;
            tag = input.readTag();
            if (tag != 12450) {
              break;
            }
          }
          case 12450: {
            // oBOPKJFGDIC
            input.readString(oBOPKJFGDIC);
            bitField1_ |= 0x00400000;
            tag = input.readTag();
            if (tag != 12994) {
              break;
            }
          }
          case 12994: {
            // mDKDJLNHGKN
            input.readString(mDKDJLNHGKN);
            bitField1_ |= 0x00800000;
            tag = input.readTag();
            if (tag != 14234) {
              break;
            }
          }
          case 14234: {
            // eLJIMGJLHBC
            input.readString(eLJIMGJLHBC);
            bitField1_ |= 0x01000000;
            tag = input.readTag();
            if (tag != 15146) {
              break;
            }
          }
          case 15146: {
            // gKPLIAPPLCO
            input.readString(gKPLIAPPLCO);
            bitField1_ |= 0x02000000;
            tag = input.readTag();
            if (tag != 15618) {
              break;
            }
          }
          case 15618: {
            // ipv6
            input.readString(ipv6);
            bitField1_ |= 0x04000000;
            tag = input.readTag();
            if (tag != 12706) {
              break;
            }
          }
          case 12706: {
            // gBONLDEMBEN
            tag = input.readRepeatedString(gBONLDEMBEN, tag);
            bitField1_ |= 0x08000000;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.mDAHNIKKAHI, mDAHNIKKAHI);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeInt64(FieldNames.gHENHJPJJLK, gHENHJPJJLK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.iGKDKFJIDPP, iGKDKFJIDPP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.port, port);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.hNDPOHGEIPM, hNDPOHGEIPM);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.cLCFLOAMGBL, cLCFLOAMGBL);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.unk1, unk1);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeBool(FieldNames.unk2, unk2);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeBool(FieldNames.unk3, unk3);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeBool(FieldNames.unk4, unk4);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeBool(FieldNames.unk5, unk5);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeBool(FieldNames.cNAKLGMDLPE, cNAKLGMDLPE);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeBool(FieldNames.aPJECJMGAKC, aPJECJMGAKC);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeBool(FieldNames.jGCIILJEHHE, jGCIILJEHHE);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeBool(FieldNames.fIOHEKDJNCG, fIOHEKDJNCG);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeBool(FieldNames.mCEIPIBAMDB, mCEIPIBAMDB);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeBool(FieldNames.eBKBNEKCOHI, eBKBNEKCOHI);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        output.writeBool(FieldNames.lAABLMNKLLD, lAABLMNKLLD);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        output.writeBool(FieldNames.oFJAKNEDMDM, oFJAKNEDMDM);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        output.writeBool(FieldNames.nPHDIMJOKNI, nPHDIMJOKNI);
      }
      if ((bitField0_ & 0x00200000) != 0) {
        output.writeBool(FieldNames.nNGLEBKCMLA, nNGLEBKCMLA);
      }
      if ((bitField0_ & 0x00400000) != 0) {
        output.writeString(FieldNames.exResourceUrl, exResourceUrl);
      }
      if ((bitField0_ & 0x00800000) != 0) {
        output.writeString(FieldNames.luaUrl, luaUrl);
      }
      if ((bitField0_ & 0x01000000) != 0) {
        output.writeString(FieldNames.ip, ip);
      }
      if ((bitField0_ & 0x02000000) != 0) {
        output.writeString(FieldNames.msg, msg);
      }
      if ((bitField0_ & 0x04000000) != 0) {
        output.writeString(FieldNames.assetBundleUrl, assetBundleUrl);
      }
      if ((bitField0_ & 0x08000000) != 0) {
        output.writeString(FieldNames.regionName, regionName);
      }
      if ((bitField0_ & 0x10000000) != 0) {
        output.writeString(FieldNames.iOKEPIEDBNE, iOKEPIEDBNE);
      }
      if ((bitField0_ & 0x20000000) != 0) {
        output.writeString(FieldNames.fCMMMPKJJIL, fCMMMPKJJIL);
      }
      if ((bitField0_ & 0x40000000) != 0) {
        output.writeString(FieldNames.iPKLAMMKNNG, iPKLAMMKNNG);
      }
      if ((bitField0_ & 0x80000000) != 0) {
        output.writeString(FieldNames.iIJLFILFMDF, iIJLFILFMDF);
      }
      if ((bitField1_ & 0x00000001) != 0) {
        output.writeString(FieldNames.oDOCFCJMBCL, oDOCFCJMBCL);
      }
      if ((bitField1_ & 0x00000002) != 0) {
        output.writeString(FieldNames.bBFOAJGLLBC, bBFOAJGLLBC);
      }
      if ((bitField1_ & 0x00000004) != 0) {
        output.writeString(FieldNames.kKHFKMIKFIB, kKHFKMIKFIB);
      }
      if ((bitField1_ & 0x00000008) != 0) {
        output.writeString(FieldNames.mKCNEFHHAOG, mKCNEFHHAOG);
      }
      if ((bitField1_ & 0x00000010) != 0) {
        output.writeString(FieldNames.ifixUrl, ifixUrl);
      }
      if ((bitField1_ & 0x00000020) != 0) {
        output.writeString(FieldNames.nPPCGBIFDMN, nPPCGBIFDMN);
      }
      if ((bitField1_ & 0x00000040) != 0) {
        output.writeString(FieldNames.nPIGPBEKEKO, nPIGPBEKEKO);
      }
      if ((bitField1_ & 0x00000080) != 0) {
        output.writeString(FieldNames.aIPNJNLHFBP, aIPNJNLHFBP);
      }
      if ((bitField1_ & 0x00000100) != 0) {
        output.writeString(FieldNames.fHALNCIHMGA, fHALNCIHMGA);
      }
      if ((bitField1_ & 0x00000200) != 0) {
        output.writeString(FieldNames.lKDFCHNEFBB, lKDFCHNEFBB);
      }
      if ((bitField1_ & 0x00000400) != 0) {
        output.writeString(FieldNames.msg2, msg2);
      }
      if ((bitField1_ & 0x00000800) != 0) {
        output.writeString(FieldNames.lHGKDGDJIHC, lHGKDGDJIHC);
      }
      if ((bitField1_ & 0x00001000) != 0) {
        output.writeString(FieldNames.oGJIECMHHHG, oGJIECMHHHG);
      }
      if ((bitField1_ & 0x00002000) != 0) {
        output.writeString(FieldNames.pMABNNEDCCG, pMABNNEDCCG);
      }
      if ((bitField1_ & 0x00004000) != 0) {
        output.writeString(FieldNames.nECFMBFGPML, nECFMBFGPML);
      }
      if ((bitField1_ & 0x00008000) != 0) {
        output.writeString(FieldNames.kDBAGALHEDC, kDBAGALHEDC);
      }
      if ((bitField1_ & 0x00010000) != 0) {
        output.writeString(FieldNames.fDGFFCMALPI, fDGFFCMALPI);
      }
      if ((bitField1_ & 0x00020000) != 0) {
        output.writeString(FieldNames.kLIAGHGOFML, kLIAGHGOFML);
      }
      if ((bitField1_ & 0x00040000) != 0) {
        output.writeString(FieldNames.pNALJLBMILJ, pNALJLBMILJ);
      }
      if ((bitField1_ & 0x00080000) != 0) {
        output.writeString(FieldNames.bJOCANIBBKI, bJOCANIBBKI);
      }
      if ((bitField1_ & 0x00100000) != 0) {
        output.writeString(FieldNames.eICAECNMDIB, eICAECNMDIB);
      }
      if ((bitField1_ & 0x00200000) != 0) {
        output.writeString(FieldNames.lLFDDPLHGBM, lLFDDPLHGBM);
      }
      if ((bitField1_ & 0x00400000) != 0) {
        output.writeString(FieldNames.oBOPKJFGDIC, oBOPKJFGDIC);
      }
      if ((bitField1_ & 0x00800000) != 0) {
        output.writeString(FieldNames.mDKDJLNHGKN, mDKDJLNHGKN);
      }
      if ((bitField1_ & 0x01000000) != 0) {
        output.writeString(FieldNames.eLJIMGJLHBC, eLJIMGJLHBC);
      }
      if ((bitField1_ & 0x02000000) != 0) {
        output.writeString(FieldNames.gKPLIAPPLCO, gKPLIAPPLCO);
      }
      if ((bitField1_ & 0x04000000) != 0) {
        output.writeString(FieldNames.ipv6, ipv6);
      }
      if ((bitField1_ & 0x08000000) != 0) {
        output.writeRepeatedString(FieldNames.gBONLDEMBEN, gBONLDEMBEN);
      }
      output.endObject();
    }

    @Override
    public Gateserver mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 670853385: {
            if (input.isAtField(FieldNames.mDAHNIKKAHI)) {
              if (!input.trySkipNullValue()) {
                mDAHNIKKAHI = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 11820739: {
            if (input.isAtField(FieldNames.gHENHJPJJLK)) {
              if (!input.trySkipNullValue()) {
                gHENHJPJJLK = input.readInt64();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 948790355: {
            if (input.isAtField(FieldNames.iGKDKFJIDPP)) {
              if (!input.trySkipNullValue()) {
                iGKDKFJIDPP = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3446913: {
            if (input.isAtField(FieldNames.port)) {
              if (!input.trySkipNullValue()) {
                port = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -114265123: {
            if (input.isAtField(FieldNames.hNDPOHGEIPM)) {
              if (!input.trySkipNullValue()) {
                hNDPOHGEIPM = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -234607754: {
            if (input.isAtField(FieldNames.cLCFLOAMGBL)) {
              if (!input.trySkipNullValue()) {
                cLCFLOAMGBL = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594623: {
            if (input.isAtField(FieldNames.unk1)) {
              if (!input.trySkipNullValue()) {
                unk1 = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594624: {
            if (input.isAtField(FieldNames.unk2)) {
              if (!input.trySkipNullValue()) {
                unk2 = input.readBool();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594625: {
            if (input.isAtField(FieldNames.unk3)) {
              if (!input.trySkipNullValue()) {
                unk3 = input.readBool();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594626: {
            if (input.isAtField(FieldNames.unk4)) {
              if (!input.trySkipNullValue()) {
                unk4 = input.readBool();
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594627: {
            if (input.isAtField(FieldNames.unk5)) {
              if (!input.trySkipNullValue()) {
                unk5 = input.readBool();
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1401789894: {
            if (input.isAtField(FieldNames.cNAKLGMDLPE)) {
              if (!input.trySkipNullValue()) {
                cNAKLGMDLPE = input.readBool();
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1533304974: {
            if (input.isAtField(FieldNames.aPJECJMGAKC)) {
              if (!input.trySkipNullValue()) {
                aPJECJMGAKC = input.readBool();
                bitField0_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -752658140: {
            if (input.isAtField(FieldNames.jGCIILJEHHE)) {
              if (!input.trySkipNullValue()) {
                jGCIILJEHHE = input.readBool();
                bitField0_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 500662442: {
            if (input.isAtField(FieldNames.fIOHEKDJNCG)) {
              if (!input.trySkipNullValue()) {
                fIOHEKDJNCG = input.readBool();
                bitField0_ |= 0x00008000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1441735833: {
            if (input.isAtField(FieldNames.mCEIPIBAMDB)) {
              if (!input.trySkipNullValue()) {
                mCEIPIBAMDB = input.readBool();
                bitField0_ |= 0x00010000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -321754963: {
            if (input.isAtField(FieldNames.eBKBNEKCOHI)) {
              if (!input.trySkipNullValue()) {
                eBKBNEKCOHI = input.readBool();
                bitField0_ |= 0x00020000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -467291664: {
            if (input.isAtField(FieldNames.lAABLMNKLLD)) {
              if (!input.trySkipNullValue()) {
                lAABLMNKLLD = input.readBool();
                bitField0_ |= 0x00040000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 51795974: {
            if (input.isAtField(FieldNames.oFJAKNEDMDM)) {
              if (!input.trySkipNullValue()) {
                oFJAKNEDMDM = input.readBool();
                bitField0_ |= 0x00080000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1661675201: {
            if (input.isAtField(FieldNames.nPHDIMJOKNI)) {
              if (!input.trySkipNullValue()) {
                nPHDIMJOKNI = input.readBool();
                bitField0_ |= 0x00100000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2026986856: {
            if (input.isAtField(FieldNames.nNGLEBKCMLA)) {
              if (!input.trySkipNullValue()) {
                nNGLEBKCMLA = input.readBool();
                bitField0_ |= 0x00200000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1643520974:
          case -1086137910: {
            if (input.isAtField(FieldNames.exResourceUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(exResourceUrl);
                bitField0_ |= 0x00400000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1091991977:
          case 508288168: {
            if (input.isAtField(FieldNames.luaUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(luaUrl);
                bitField0_ |= 0x00800000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3367: {
            if (input.isAtField(FieldNames.ip)) {
              if (!input.trySkipNullValue()) {
                input.readString(ip);
                bitField0_ |= 0x01000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 108417: {
            if (input.isAtField(FieldNames.msg)) {
              if (!input.trySkipNullValue()) {
                input.readString(msg);
                bitField0_ |= 0x02000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1116358531:
          case 1973569761: {
            if (input.isAtField(FieldNames.assetBundleUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(assetBundleUrl);
                bitField0_ |= 0x04000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1990689889:
          case -1565768458: {
            if (input.isAtField(FieldNames.regionName)) {
              if (!input.trySkipNullValue()) {
                input.readString(regionName);
                bitField0_ |= 0x08000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1343162657: {
            if (input.isAtField(FieldNames.iOKEPIEDBNE)) {
              if (!input.trySkipNullValue()) {
                input.readString(iOKEPIEDBNE);
                bitField0_ |= 0x10000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -216496210: {
            if (input.isAtField(FieldNames.fCMMMPKJJIL)) {
              if (!input.trySkipNullValue()) {
                input.readString(fCMMMPKJJIL);
                bitField0_ |= 0x20000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 155891125: {
            if (input.isAtField(FieldNames.iPKLAMMKNNG)) {
              if (!input.trySkipNullValue()) {
                input.readString(iPKLAMMKNNG);
                bitField0_ |= 0x40000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -929066416: {
            if (input.isAtField(FieldNames.iIJLFILFMDF)) {
              if (!input.trySkipNullValue()) {
                input.readString(iIJLFILFMDF);
                bitField0_ |= 0x80000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1264458014: {
            if (input.isAtField(FieldNames.oDOCFCJMBCL)) {
              if (!input.trySkipNullValue()) {
                input.readString(oDOCFCJMBCL);
                bitField1_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -404729130: {
            if (input.isAtField(FieldNames.bBFOAJGLLBC)) {
              if (!input.trySkipNullValue()) {
                input.readString(bBFOAJGLLBC);
                bitField1_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1381392189: {
            if (input.isAtField(FieldNames.kKHFKMIKFIB)) {
              if (!input.trySkipNullValue()) {
                input.readString(kKHFKMIKFIB);
                bitField1_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1939068369: {
            if (input.isAtField(FieldNames.mKCNEFHHAOG)) {
              if (!input.trySkipNullValue()) {
                input.readString(mKCNEFHHAOG);
                bitField1_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1719409347:
          case 1762383292: {
            if (input.isAtField(FieldNames.ifixUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(ifixUrl);
                bitField1_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1519588824: {
            if (input.isAtField(FieldNames.nPPCGBIFDMN)) {
              if (!input.trySkipNullValue()) {
                input.readString(nPPCGBIFDMN);
                bitField1_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -937770767: {
            if (input.isAtField(FieldNames.nPIGPBEKEKO)) {
              if (!input.trySkipNullValue()) {
                input.readString(nPIGPBEKEKO);
                bitField1_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1190717038: {
            if (input.isAtField(FieldNames.aIPNJNLHFBP)) {
              if (!input.trySkipNullValue()) {
                input.readString(aIPNJNLHFBP);
                bitField1_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2081131206: {
            if (input.isAtField(FieldNames.fHALNCIHMGA)) {
              if (!input.trySkipNullValue()) {
                input.readString(fHALNCIHMGA);
                bitField1_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -424477879: {
            if (input.isAtField(FieldNames.lKDFCHNEFBB)) {
              if (!input.trySkipNullValue()) {
                input.readString(lKDFCHNEFBB);
                bitField1_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3360977: {
            if (input.isAtField(FieldNames.msg2)) {
              if (!input.trySkipNullValue()) {
                input.readString(msg2);
                bitField1_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 11574971: {
            if (input.isAtField(FieldNames.lHGKDGDJIHC)) {
              if (!input.trySkipNullValue()) {
                input.readString(lHGKDGDJIHC);
                bitField1_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -424609545: {
            if (input.isAtField(FieldNames.oGJIECMHHHG)) {
              if (!input.trySkipNullValue()) {
                input.readString(oGJIECMHHHG);
                bitField1_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 371782794: {
            if (input.isAtField(FieldNames.pMABNNEDCCG)) {
              if (!input.trySkipNullValue()) {
                input.readString(pMABNNEDCCG);
                bitField1_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -925836417: {
            if (input.isAtField(FieldNames.nECFMBFGPML)) {
              if (!input.trySkipNullValue()) {
                input.readString(nECFMBFGPML);
                bitField1_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 996777366: {
            if (input.isAtField(FieldNames.kDBAGALHEDC)) {
              if (!input.trySkipNullValue()) {
                input.readString(kDBAGALHEDC);
                bitField1_ |= 0x00008000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 238855639: {
            if (input.isAtField(FieldNames.fDGFFCMALPI)) {
              if (!input.trySkipNullValue()) {
                input.readString(fDGFFCMALPI);
                bitField1_ |= 0x00010000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -146613789: {
            if (input.isAtField(FieldNames.kLIAGHGOFML)) {
              if (!input.trySkipNullValue()) {
                input.readString(kLIAGHGOFML);
                bitField1_ |= 0x00020000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1108701329: {
            if (input.isAtField(FieldNames.pNALJLBMILJ)) {
              if (!input.trySkipNullValue()) {
                input.readString(pNALJLBMILJ);
                bitField1_ |= 0x00040000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -386889282: {
            if (input.isAtField(FieldNames.bJOCANIBBKI)) {
              if (!input.trySkipNullValue()) {
                input.readString(bJOCANIBBKI);
                bitField1_ |= 0x00080000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1317224930: {
            if (input.isAtField(FieldNames.eICAECNMDIB)) {
              if (!input.trySkipNullValue()) {
                input.readString(eICAECNMDIB);
                bitField1_ |= 0x00100000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1983193804: {
            if (input.isAtField(FieldNames.lLFDDPLHGBM)) {
              if (!input.trySkipNullValue()) {
                input.readString(lLFDDPLHGBM);
                bitField1_ |= 0x00200000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 649351306: {
            if (input.isAtField(FieldNames.oBOPKJFGDIC)) {
              if (!input.trySkipNullValue()) {
                input.readString(oBOPKJFGDIC);
                bitField1_ |= 0x00400000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2066569026: {
            if (input.isAtField(FieldNames.mDKDJLNHGKN)) {
              if (!input.trySkipNullValue()) {
                input.readString(mDKDJLNHGKN);
                bitField1_ |= 0x00800000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1995572793: {
            if (input.isAtField(FieldNames.eLJIMGJLHBC)) {
              if (!input.trySkipNullValue()) {
                input.readString(eLJIMGJLHBC);
                bitField1_ |= 0x01000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1840481344: {
            if (input.isAtField(FieldNames.gKPLIAPPLCO)) {
              if (!input.trySkipNullValue()) {
                input.readString(gKPLIAPPLCO);
                bitField1_ |= 0x02000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3239399: {
            if (input.isAtField(FieldNames.ipv6)) {
              if (!input.trySkipNullValue()) {
                input.readString(ipv6);
                bitField1_ |= 0x04000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -630578415: {
            if (input.isAtField(FieldNames.gBONLDEMBEN)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedString(gBONLDEMBEN);
                bitField1_ |= 0x08000000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public Gateserver clone() {
      return new Gateserver().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_ | bitField1_) == 0);
    }

    public static Gateserver parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new Gateserver(), data).checkInitialized();
    }

    public static Gateserver parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Gateserver(), input).checkInitialized();
    }

    public static Gateserver parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Gateserver(), input).checkInitialized();
    }

    /**
     * @return factory for creating Gateserver messages
     */
    public static MessageFactory<Gateserver> getFactory() {
      return GateserverFactory.INSTANCE;
    }

    private enum GateserverFactory implements MessageFactory<Gateserver> {
      INSTANCE;

      @Override
      public Gateserver create() {
        return Gateserver.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mDAHNIKKAHI = FieldName.forField("MDAHNIKKAHI");

      static final FieldName gHENHJPJJLK = FieldName.forField("GHENHJPJJLK");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName iGKDKFJIDPP = FieldName.forField("IGKDKFJIDPP");

      static final FieldName port = FieldName.forField("port");

      static final FieldName hNDPOHGEIPM = FieldName.forField("HNDPOHGEIPM");

      static final FieldName cLCFLOAMGBL = FieldName.forField("CLCFLOAMGBL");

      static final FieldName unk1 = FieldName.forField("unk1");

      static final FieldName unk2 = FieldName.forField("unk2");

      static final FieldName unk3 = FieldName.forField("unk3");

      static final FieldName unk4 = FieldName.forField("unk4");

      static final FieldName unk5 = FieldName.forField("unk5");

      static final FieldName cNAKLGMDLPE = FieldName.forField("CNAKLGMDLPE");

      static final FieldName aPJECJMGAKC = FieldName.forField("APJECJMGAKC");

      static final FieldName jGCIILJEHHE = FieldName.forField("JGCIILJEHHE");

      static final FieldName fIOHEKDJNCG = FieldName.forField("FIOHEKDJNCG");

      static final FieldName mCEIPIBAMDB = FieldName.forField("MCEIPIBAMDB");

      static final FieldName eBKBNEKCOHI = FieldName.forField("EBKBNEKCOHI");

      static final FieldName lAABLMNKLLD = FieldName.forField("LAABLMNKLLD");

      static final FieldName oFJAKNEDMDM = FieldName.forField("OFJAKNEDMDM");

      static final FieldName nPHDIMJOKNI = FieldName.forField("NPHDIMJOKNI");

      static final FieldName nNGLEBKCMLA = FieldName.forField("NNGLEBKCMLA");

      static final FieldName exResourceUrl = FieldName.forField("exResourceUrl", "ex_resource_url");

      static final FieldName luaUrl = FieldName.forField("luaUrl", "lua_url");

      static final FieldName ip = FieldName.forField("ip");

      static final FieldName msg = FieldName.forField("msg");

      static final FieldName assetBundleUrl = FieldName.forField("assetBundleUrl", "asset_bundle_url");

      static final FieldName regionName = FieldName.forField("regionName", "region_name");

      static final FieldName iOKEPIEDBNE = FieldName.forField("IOKEPIEDBNE");

      static final FieldName fCMMMPKJJIL = FieldName.forField("FCMMMPKJJIL");

      static final FieldName iPKLAMMKNNG = FieldName.forField("IPKLAMMKNNG");

      static final FieldName iIJLFILFMDF = FieldName.forField("IIJLFILFMDF");

      static final FieldName oDOCFCJMBCL = FieldName.forField("ODOCFCJMBCL");

      static final FieldName bBFOAJGLLBC = FieldName.forField("BBFOAJGLLBC");

      static final FieldName kKHFKMIKFIB = FieldName.forField("KKHFKMIKFIB");

      static final FieldName mKCNEFHHAOG = FieldName.forField("MKCNEFHHAOG");

      static final FieldName ifixUrl = FieldName.forField("ifixUrl", "ifix_url");

      static final FieldName nPPCGBIFDMN = FieldName.forField("NPPCGBIFDMN");

      static final FieldName nPIGPBEKEKO = FieldName.forField("NPIGPBEKEKO");

      static final FieldName aIPNJNLHFBP = FieldName.forField("AIPNJNLHFBP");

      static final FieldName fHALNCIHMGA = FieldName.forField("FHALNCIHMGA");

      static final FieldName lKDFCHNEFBB = FieldName.forField("LKDFCHNEFBB");

      static final FieldName msg2 = FieldName.forField("msg2");

      static final FieldName lHGKDGDJIHC = FieldName.forField("LHGKDGDJIHC");

      static final FieldName oGJIECMHHHG = FieldName.forField("OGJIECMHHHG");

      static final FieldName pMABNNEDCCG = FieldName.forField("PMABNNEDCCG");

      static final FieldName nECFMBFGPML = FieldName.forField("NECFMBFGPML");

      static final FieldName kDBAGALHEDC = FieldName.forField("KDBAGALHEDC");

      static final FieldName fDGFFCMALPI = FieldName.forField("FDGFFCMALPI");

      static final FieldName kLIAGHGOFML = FieldName.forField("KLIAGHGOFML");

      static final FieldName pNALJLBMILJ = FieldName.forField("PNALJLBMILJ");

      static final FieldName bJOCANIBBKI = FieldName.forField("BJOCANIBBKI");

      static final FieldName eICAECNMDIB = FieldName.forField("EICAECNMDIB");

      static final FieldName lLFDDPLHGBM = FieldName.forField("LLFDDPLHGBM");

      static final FieldName oBOPKJFGDIC = FieldName.forField("OBOPKJFGDIC");

      static final FieldName mDKDJLNHGKN = FieldName.forField("MDKDJLNHGKN");

      static final FieldName eLJIMGJLHBC = FieldName.forField("ELJIMGJLHBC");

      static final FieldName gKPLIAPPLCO = FieldName.forField("GKPLIAPPLCO");

      static final FieldName ipv6 = FieldName.forField("ipv6");

      static final FieldName gBONLDEMBEN = FieldName.forField("GBONLDEMBEN");
    }
  }
}
