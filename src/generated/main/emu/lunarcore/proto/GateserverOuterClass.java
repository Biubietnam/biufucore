// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class GateserverOuterClass {
  /**
   * <pre>
   *  CLLALFPACCN
   * </pre>
   *
   * Protobuf type {@code Gateserver}
   */
  public static final class Gateserver extends ProtoMessage<Gateserver> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 3;</code>
     */
    private int retcode;

    /**
     * <pre>
     *  string FJKKLEBBJJE = 1613; // Service Center
     *  string HOHLNJFGIFM = 692; // Teen Agreement
     *  int64 MAMDBHJAEMB = 5;
     * </pre>
     *
     * <code>optional uint32 port = 12;</code>
     */
    private int port;

    /**
     * <pre>
     *  string DEBALDIDACK = 1188;
     *  string ABNLLDPLGED = 1069;
     *  string CECEDAIIBPH = 1274;
     *  bool GLCDCMMPFJG = 1006;
     * </pre>
     *
     * <code>optional bool unk1 = 6;</code>
     */
    private boolean unk1;

    /**
     * <pre>
     *  HCPJPODPMHC
     * </pre>
     *
     * <code>optional bool unk2 = 13;</code>
     */
    private boolean unk2;

    /**
     * <pre>
     *  FDMPLIJALIF
     * </pre>
     *
     * <code>optional bool unk3 = 82;</code>
     */
    private boolean unk3;

    /**
     * <pre>
     *  string OFJHECFIHHH = 1197;
     *  repeated string LCDGLBMOILL = 1394;
     * </pre>
     *
     * <code>optional bool unk4 = 210;</code>
     */
    private boolean unk4;

    /**
     * <pre>
     *  HLOPJNACFMO
     * </pre>
     *
     * <code>optional bool unk6 = 452;</code>
     */
    private boolean unk6;

    /**
     * <pre>
     *  string NDJPNMKFPEA = 1706;
     *  string msg = 383; //? AOHMMPBPIPO
     * </pre>
     *
     * <code>optional bool unk7 = 737;</code>
     */
    private boolean unk7;

    /**
     * <pre>
     *  bool KAFLLFGENBK = 1537;
     *  bool DFBPJKHNCPJ = 889;
     *  string KCEHHKDBFIB = 1470;
     * </pre>
     *
     * <code>optional bool unk8 = 1037;</code>
     */
    private boolean unk8;

    /**
     * <pre>
     *  bool FAEJGLGJLHP = 989;
     *  string IJICAFPGMKK = 4;
     *  string INOBMOKKKKB = 929;
     *  string KAOALNPCOPE = 1226; // User Agreement
     *  string CHNKLLAPKAO = 512; // Full Agreement
     *  bool EKOJIKKAGCD = 1359;
     *  string FGPFAKLGJAL = 194; // Third Proto List
     *  string INIOMPPMMPG = 2007;
     *  uint32 MDIBAAKFKEA = 350; // unk
     * </pre>
     *
     * <code>optional bool unk9 = 1401;</code>
     */
    private boolean unk9;

    /**
     * <pre>
     *  LAKKMNCFKAH
     * </pre>
     *
     * <code>optional bool unk10 = 1851;</code>
     */
    private boolean unk10;

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     */
    private final Utf8String ip = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     */
    private final Utf8String luaUrl = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     */
    private final Utf8String msg = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     */
    private final Utf8String regionName = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     */
    private final Utf8String exResourceUrl = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     */
    private final Utf8String assetBundleUrl = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     */
    private final Utf8String clientSecretKey = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     */
    private final Utf8String ifixVersion = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     */
    private final Utf8String mdkResVersion = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     */
    private final Utf8String ifixUrl = Utf8String.newEmptyInstance();

    private Gateserver() {
    }

    /**
     * <pre>
     *  CLLALFPACCN
     * </pre>
     *
     * @return a new empty instance of {@code Gateserver}
     */
    public static Gateserver newInstance() {
      return new Gateserver();
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @return this
     */
    public Gateserver clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @param value the retcode to set
     * @return this
     */
    public Gateserver setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <pre>
     *  string FJKKLEBBJJE = 1613; // Service Center
     *  string HOHLNJFGIFM = 692; // Teen Agreement
     *  int64 MAMDBHJAEMB = 5;
     * </pre>
     *
     * <code>optional uint32 port = 12;</code>
     * @return whether the port field is set
     */
    public boolean hasPort() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     *  string FJKKLEBBJJE = 1613; // Service Center
     *  string HOHLNJFGIFM = 692; // Teen Agreement
     *  int64 MAMDBHJAEMB = 5;
     * </pre>
     *
     * <code>optional uint32 port = 12;</code>
     * @return this
     */
    public Gateserver clearPort() {
      bitField0_ &= ~0x00000002;
      port = 0;
      return this;
    }

    /**
     * <pre>
     *  string FJKKLEBBJJE = 1613; // Service Center
     *  string HOHLNJFGIFM = 692; // Teen Agreement
     *  int64 MAMDBHJAEMB = 5;
     * </pre>
     *
     * <code>optional uint32 port = 12;</code>
     * @return the port
     */
    public int getPort() {
      return port;
    }

    /**
     * <pre>
     *  string FJKKLEBBJJE = 1613; // Service Center
     *  string HOHLNJFGIFM = 692; // Teen Agreement
     *  int64 MAMDBHJAEMB = 5;
     * </pre>
     *
     * <code>optional uint32 port = 12;</code>
     * @param value the port to set
     * @return this
     */
    public Gateserver setPort(final int value) {
      bitField0_ |= 0x00000002;
      port = value;
      return this;
    }

    /**
     * <pre>
     *  string DEBALDIDACK = 1188;
     *  string ABNLLDPLGED = 1069;
     *  string CECEDAIIBPH = 1274;
     *  bool GLCDCMMPFJG = 1006;
     * </pre>
     *
     * <code>optional bool unk1 = 6;</code>
     * @return whether the unk1 field is set
     */
    public boolean hasUnk1() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <pre>
     *  string DEBALDIDACK = 1188;
     *  string ABNLLDPLGED = 1069;
     *  string CECEDAIIBPH = 1274;
     *  bool GLCDCMMPFJG = 1006;
     * </pre>
     *
     * <code>optional bool unk1 = 6;</code>
     * @return this
     */
    public Gateserver clearUnk1() {
      bitField0_ &= ~0x00000004;
      unk1 = false;
      return this;
    }

    /**
     * <pre>
     *  string DEBALDIDACK = 1188;
     *  string ABNLLDPLGED = 1069;
     *  string CECEDAIIBPH = 1274;
     *  bool GLCDCMMPFJG = 1006;
     * </pre>
     *
     * <code>optional bool unk1 = 6;</code>
     * @return the unk1
     */
    public boolean getUnk1() {
      return unk1;
    }

    /**
     * <pre>
     *  string DEBALDIDACK = 1188;
     *  string ABNLLDPLGED = 1069;
     *  string CECEDAIIBPH = 1274;
     *  bool GLCDCMMPFJG = 1006;
     * </pre>
     *
     * <code>optional bool unk1 = 6;</code>
     * @param value the unk1 to set
     * @return this
     */
    public Gateserver setUnk1(final boolean value) {
      bitField0_ |= 0x00000004;
      unk1 = value;
      return this;
    }

    /**
     * <pre>
     *  HCPJPODPMHC
     * </pre>
     *
     * <code>optional bool unk2 = 13;</code>
     * @return whether the unk2 field is set
     */
    public boolean hasUnk2() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <pre>
     *  HCPJPODPMHC
     * </pre>
     *
     * <code>optional bool unk2 = 13;</code>
     * @return this
     */
    public Gateserver clearUnk2() {
      bitField0_ &= ~0x00000008;
      unk2 = false;
      return this;
    }

    /**
     * <pre>
     *  HCPJPODPMHC
     * </pre>
     *
     * <code>optional bool unk2 = 13;</code>
     * @return the unk2
     */
    public boolean getUnk2() {
      return unk2;
    }

    /**
     * <pre>
     *  HCPJPODPMHC
     * </pre>
     *
     * <code>optional bool unk2 = 13;</code>
     * @param value the unk2 to set
     * @return this
     */
    public Gateserver setUnk2(final boolean value) {
      bitField0_ |= 0x00000008;
      unk2 = value;
      return this;
    }

    /**
     * <pre>
     *  FDMPLIJALIF
     * </pre>
     *
     * <code>optional bool unk3 = 82;</code>
     * @return whether the unk3 field is set
     */
    public boolean hasUnk3() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     *  FDMPLIJALIF
     * </pre>
     *
     * <code>optional bool unk3 = 82;</code>
     * @return this
     */
    public Gateserver clearUnk3() {
      bitField0_ &= ~0x00000010;
      unk3 = false;
      return this;
    }

    /**
     * <pre>
     *  FDMPLIJALIF
     * </pre>
     *
     * <code>optional bool unk3 = 82;</code>
     * @return the unk3
     */
    public boolean getUnk3() {
      return unk3;
    }

    /**
     * <pre>
     *  FDMPLIJALIF
     * </pre>
     *
     * <code>optional bool unk3 = 82;</code>
     * @param value the unk3 to set
     * @return this
     */
    public Gateserver setUnk3(final boolean value) {
      bitField0_ |= 0x00000010;
      unk3 = value;
      return this;
    }

    /**
     * <pre>
     *  string OFJHECFIHHH = 1197;
     *  repeated string LCDGLBMOILL = 1394;
     * </pre>
     *
     * <code>optional bool unk4 = 210;</code>
     * @return whether the unk4 field is set
     */
    public boolean hasUnk4() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <pre>
     *  string OFJHECFIHHH = 1197;
     *  repeated string LCDGLBMOILL = 1394;
     * </pre>
     *
     * <code>optional bool unk4 = 210;</code>
     * @return this
     */
    public Gateserver clearUnk4() {
      bitField0_ &= ~0x00000020;
      unk4 = false;
      return this;
    }

    /**
     * <pre>
     *  string OFJHECFIHHH = 1197;
     *  repeated string LCDGLBMOILL = 1394;
     * </pre>
     *
     * <code>optional bool unk4 = 210;</code>
     * @return the unk4
     */
    public boolean getUnk4() {
      return unk4;
    }

    /**
     * <pre>
     *  string OFJHECFIHHH = 1197;
     *  repeated string LCDGLBMOILL = 1394;
     * </pre>
     *
     * <code>optional bool unk4 = 210;</code>
     * @param value the unk4 to set
     * @return this
     */
    public Gateserver setUnk4(final boolean value) {
      bitField0_ |= 0x00000020;
      unk4 = value;
      return this;
    }

    /**
     * <pre>
     *  HLOPJNACFMO
     * </pre>
     *
     * <code>optional bool unk6 = 452;</code>
     * @return whether the unk6 field is set
     */
    public boolean hasUnk6() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <pre>
     *  HLOPJNACFMO
     * </pre>
     *
     * <code>optional bool unk6 = 452;</code>
     * @return this
     */
    public Gateserver clearUnk6() {
      bitField0_ &= ~0x00000040;
      unk6 = false;
      return this;
    }

    /**
     * <pre>
     *  HLOPJNACFMO
     * </pre>
     *
     * <code>optional bool unk6 = 452;</code>
     * @return the unk6
     */
    public boolean getUnk6() {
      return unk6;
    }

    /**
     * <pre>
     *  HLOPJNACFMO
     * </pre>
     *
     * <code>optional bool unk6 = 452;</code>
     * @param value the unk6 to set
     * @return this
     */
    public Gateserver setUnk6(final boolean value) {
      bitField0_ |= 0x00000040;
      unk6 = value;
      return this;
    }

    /**
     * <pre>
     *  string NDJPNMKFPEA = 1706;
     *  string msg = 383; //? AOHMMPBPIPO
     * </pre>
     *
     * <code>optional bool unk7 = 737;</code>
     * @return whether the unk7 field is set
     */
    public boolean hasUnk7() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <pre>
     *  string NDJPNMKFPEA = 1706;
     *  string msg = 383; //? AOHMMPBPIPO
     * </pre>
     *
     * <code>optional bool unk7 = 737;</code>
     * @return this
     */
    public Gateserver clearUnk7() {
      bitField0_ &= ~0x00000080;
      unk7 = false;
      return this;
    }

    /**
     * <pre>
     *  string NDJPNMKFPEA = 1706;
     *  string msg = 383; //? AOHMMPBPIPO
     * </pre>
     *
     * <code>optional bool unk7 = 737;</code>
     * @return the unk7
     */
    public boolean getUnk7() {
      return unk7;
    }

    /**
     * <pre>
     *  string NDJPNMKFPEA = 1706;
     *  string msg = 383; //? AOHMMPBPIPO
     * </pre>
     *
     * <code>optional bool unk7 = 737;</code>
     * @param value the unk7 to set
     * @return this
     */
    public Gateserver setUnk7(final boolean value) {
      bitField0_ |= 0x00000080;
      unk7 = value;
      return this;
    }

    /**
     * <pre>
     *  bool KAFLLFGENBK = 1537;
     *  bool DFBPJKHNCPJ = 889;
     *  string KCEHHKDBFIB = 1470;
     * </pre>
     *
     * <code>optional bool unk8 = 1037;</code>
     * @return whether the unk8 field is set
     */
    public boolean hasUnk8() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <pre>
     *  bool KAFLLFGENBK = 1537;
     *  bool DFBPJKHNCPJ = 889;
     *  string KCEHHKDBFIB = 1470;
     * </pre>
     *
     * <code>optional bool unk8 = 1037;</code>
     * @return this
     */
    public Gateserver clearUnk8() {
      bitField0_ &= ~0x00000100;
      unk8 = false;
      return this;
    }

    /**
     * <pre>
     *  bool KAFLLFGENBK = 1537;
     *  bool DFBPJKHNCPJ = 889;
     *  string KCEHHKDBFIB = 1470;
     * </pre>
     *
     * <code>optional bool unk8 = 1037;</code>
     * @return the unk8
     */
    public boolean getUnk8() {
      return unk8;
    }

    /**
     * <pre>
     *  bool KAFLLFGENBK = 1537;
     *  bool DFBPJKHNCPJ = 889;
     *  string KCEHHKDBFIB = 1470;
     * </pre>
     *
     * <code>optional bool unk8 = 1037;</code>
     * @param value the unk8 to set
     * @return this
     */
    public Gateserver setUnk8(final boolean value) {
      bitField0_ |= 0x00000100;
      unk8 = value;
      return this;
    }

    /**
     * <pre>
     *  bool FAEJGLGJLHP = 989;
     *  string IJICAFPGMKK = 4;
     *  string INOBMOKKKKB = 929;
     *  string KAOALNPCOPE = 1226; // User Agreement
     *  string CHNKLLAPKAO = 512; // Full Agreement
     *  bool EKOJIKKAGCD = 1359;
     *  string FGPFAKLGJAL = 194; // Third Proto List
     *  string INIOMPPMMPG = 2007;
     *  uint32 MDIBAAKFKEA = 350; // unk
     * </pre>
     *
     * <code>optional bool unk9 = 1401;</code>
     * @return whether the unk9 field is set
     */
    public boolean hasUnk9() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <pre>
     *  bool FAEJGLGJLHP = 989;
     *  string IJICAFPGMKK = 4;
     *  string INOBMOKKKKB = 929;
     *  string KAOALNPCOPE = 1226; // User Agreement
     *  string CHNKLLAPKAO = 512; // Full Agreement
     *  bool EKOJIKKAGCD = 1359;
     *  string FGPFAKLGJAL = 194; // Third Proto List
     *  string INIOMPPMMPG = 2007;
     *  uint32 MDIBAAKFKEA = 350; // unk
     * </pre>
     *
     * <code>optional bool unk9 = 1401;</code>
     * @return this
     */
    public Gateserver clearUnk9() {
      bitField0_ &= ~0x00000200;
      unk9 = false;
      return this;
    }

    /**
     * <pre>
     *  bool FAEJGLGJLHP = 989;
     *  string IJICAFPGMKK = 4;
     *  string INOBMOKKKKB = 929;
     *  string KAOALNPCOPE = 1226; // User Agreement
     *  string CHNKLLAPKAO = 512; // Full Agreement
     *  bool EKOJIKKAGCD = 1359;
     *  string FGPFAKLGJAL = 194; // Third Proto List
     *  string INIOMPPMMPG = 2007;
     *  uint32 MDIBAAKFKEA = 350; // unk
     * </pre>
     *
     * <code>optional bool unk9 = 1401;</code>
     * @return the unk9
     */
    public boolean getUnk9() {
      return unk9;
    }

    /**
     * <pre>
     *  bool FAEJGLGJLHP = 989;
     *  string IJICAFPGMKK = 4;
     *  string INOBMOKKKKB = 929;
     *  string KAOALNPCOPE = 1226; // User Agreement
     *  string CHNKLLAPKAO = 512; // Full Agreement
     *  bool EKOJIKKAGCD = 1359;
     *  string FGPFAKLGJAL = 194; // Third Proto List
     *  string INIOMPPMMPG = 2007;
     *  uint32 MDIBAAKFKEA = 350; // unk
     * </pre>
     *
     * <code>optional bool unk9 = 1401;</code>
     * @param value the unk9 to set
     * @return this
     */
    public Gateserver setUnk9(final boolean value) {
      bitField0_ |= 0x00000200;
      unk9 = value;
      return this;
    }

    /**
     * <pre>
     *  LAKKMNCFKAH
     * </pre>
     *
     * <code>optional bool unk10 = 1851;</code>
     * @return whether the unk10 field is set
     */
    public boolean hasUnk10() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <pre>
     *  LAKKMNCFKAH
     * </pre>
     *
     * <code>optional bool unk10 = 1851;</code>
     * @return this
     */
    public Gateserver clearUnk10() {
      bitField0_ &= ~0x00000400;
      unk10 = false;
      return this;
    }

    /**
     * <pre>
     *  LAKKMNCFKAH
     * </pre>
     *
     * <code>optional bool unk10 = 1851;</code>
     * @return the unk10
     */
    public boolean getUnk10() {
      return unk10;
    }

    /**
     * <pre>
     *  LAKKMNCFKAH
     * </pre>
     *
     * <code>optional bool unk10 = 1851;</code>
     * @param value the unk10 to set
     * @return this
     */
    public Gateserver setUnk10(final boolean value) {
      bitField0_ |= 0x00000400;
      unk10 = value;
      return this;
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @return whether the ip field is set
     */
    public boolean hasIp() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @return this
     */
    public Gateserver clearIp() {
      bitField0_ &= ~0x00000800;
      ip.clear();
      return this;
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @return the ip
     */
    public String getIp() {
      return ip.getString();
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @return internal {@code Utf8String} representation of ip for reading
     */
    public Utf8String getIpBytes() {
      return this.ip;
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @return internal {@code Utf8String} representation of ip for modifications
     */
    public Utf8String getMutableIpBytes() {
      bitField0_ |= 0x00000800;
      return this.ip;
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @param value the ip to set
     * @return this
     */
    public Gateserver setIp(final CharSequence value) {
      bitField0_ |= 0x00000800;
      ip.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string NMAPFDFNPCN = 462; // BBS
     *  string DIFEBLMCJFK = 1609;
     * </pre>
     *
     * <code>optional string ip = 1;</code>
     * @param value the ip to set
     * @return this
     */
    public Gateserver setIp(final Utf8String value) {
      bitField0_ |= 0x00000800;
      ip.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @return whether the luaUrl field is set
     */
    public boolean hasLuaUrl() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @return this
     */
    public Gateserver clearLuaUrl() {
      bitField0_ &= ~0x00001000;
      luaUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @return the luaUrl
     */
    public String getLuaUrl() {
      return luaUrl.getString();
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @return internal {@code Utf8String} representation of luaUrl for reading
     */
    public Utf8String getLuaUrlBytes() {
      return this.luaUrl;
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @return internal {@code Utf8String} representation of luaUrl for modifications
     */
    public Utf8String getMutableLuaUrlBytes() {
      bitField0_ |= 0x00001000;
      return this.luaUrl;
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @param value the luaUrl to set
     * @return this
     */
    public Gateserver setLuaUrl(final CharSequence value) {
      bitField0_ |= 0x00001000;
      luaUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  FFGEFNDOCIM
     * </pre>
     *
     * <code>optional string lua_url = 2;</code>
     * @param value the luaUrl to set
     * @return this
     */
    public Gateserver setLuaUrl(final Utf8String value) {
      bitField0_ |= 0x00001000;
      luaUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @return whether the msg field is set
     */
    public boolean hasMsg() {
      return (bitField0_ & 0x00002000) != 0;
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @return this
     */
    public Gateserver clearMsg() {
      bitField0_ &= ~0x00002000;
      msg.clear();
      return this;
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @return the msg
     */
    public String getMsg() {
      return msg.getString();
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @return internal {@code Utf8String} representation of msg for reading
     */
    public Utf8String getMsgBytes() {
      return this.msg;
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @return internal {@code Utf8String} representation of msg for modifications
     */
    public Utf8String getMutableMsgBytes() {
      bitField0_ |= 0x00002000;
      return this.msg;
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @param value the msg to set
     * @return this
     */
    public Gateserver setMsg(final CharSequence value) {
      bitField0_ |= 0x00002000;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  int64 KCPOMLMMLFO = 11;
     *  uint32 PONMHDEEFKK = 9;
     * </pre>
     *
     * <code>optional string msg = 7;</code>
     * @param value the msg to set
     * @return this
     */
    public Gateserver setMsg(final Utf8String value) {
      bitField0_ |= 0x00002000;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @return whether the regionName field is set
     */
    public boolean hasRegionName() {
      return (bitField0_ & 0x00004000) != 0;
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @return this
     */
    public Gateserver clearRegionName() {
      bitField0_ &= ~0x00004000;
      regionName.clear();
      return this;
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @return the regionName
     */
    public String getRegionName() {
      return regionName.getString();
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @return internal {@code Utf8String} representation of regionName for reading
     */
    public Utf8String getRegionNameBytes() {
      return this.regionName;
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @return internal {@code Utf8String} representation of regionName for modifications
     */
    public Utf8String getMutableRegionNameBytes() {
      bitField0_ |= 0x00004000;
      return this.regionName;
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @param value the regionName to set
     * @return this
     */
    public Gateserver setRegionName(final CharSequence value) {
      bitField0_ |= 0x00004000;
      regionName.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string ENJBBPPEEAF = 935;
     *  bool CAAEKLANDLK = 1386;
     *  string EBNHBMFPECC = 1818;
     * </pre>
     *
     * <code>optional string region_name = 10;</code>
     * @param value the regionName to set
     * @return this
     */
    public Gateserver setRegionName(final Utf8String value) {
      bitField0_ |= 0x00004000;
      regionName.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @return whether the exResourceUrl field is set
     */
    public boolean hasExResourceUrl() {
      return (bitField0_ & 0x00008000) != 0;
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @return this
     */
    public Gateserver clearExResourceUrl() {
      bitField0_ &= ~0x00008000;
      exResourceUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @return the exResourceUrl
     */
    public String getExResourceUrl() {
      return exResourceUrl.getString();
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @return internal {@code Utf8String} representation of exResourceUrl for reading
     */
    public Utf8String getExResourceUrlBytes() {
      return this.exResourceUrl;
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @return internal {@code Utf8String} representation of exResourceUrl for modifications
     */
    public Utf8String getMutableExResourceUrlBytes() {
      bitField0_ |= 0x00008000;
      return this.exResourceUrl;
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @param value the exResourceUrl to set
     * @return this
     */
    public Gateserver setExResourceUrl(final CharSequence value) {
      bitField0_ |= 0x00008000;
      exResourceUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  KAGLDMKPAAO
     * </pre>
     *
     * <code>optional string ex_resource_url = 14;</code>
     * @param value the exResourceUrl to set
     * @return this
     */
    public Gateserver setExResourceUrl(final Utf8String value) {
      bitField0_ |= 0x00008000;
      exResourceUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @return whether the assetBundleUrl field is set
     */
    public boolean hasAssetBundleUrl() {
      return (bitField0_ & 0x00010000) != 0;
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @return this
     */
    public Gateserver clearAssetBundleUrl() {
      bitField0_ &= ~0x00010000;
      assetBundleUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @return the assetBundleUrl
     */
    public String getAssetBundleUrl() {
      return assetBundleUrl.getString();
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @return internal {@code Utf8String} representation of assetBundleUrl for reading
     */
    public Utf8String getAssetBundleUrlBytes() {
      return this.assetBundleUrl;
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @return internal {@code Utf8String} representation of assetBundleUrl for modifications
     */
    public Utf8String getMutableAssetBundleUrlBytes() {
      bitField0_ |= 0x00010000;
      return this.assetBundleUrl;
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @param value the assetBundleUrl to set
     * @return this
     */
    public Gateserver setAssetBundleUrl(final CharSequence value) {
      bitField0_ |= 0x00010000;
      assetBundleUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  GCBNLMGNNND
     * </pre>
     *
     * <code>optional string asset_bundle_url = 15;</code>
     * @param value the assetBundleUrl to set
     * @return this
     */
    public Gateserver setAssetBundleUrl(final Utf8String value) {
      bitField0_ |= 0x00010000;
      assetBundleUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @return whether the clientSecretKey field is set
     */
    public boolean hasClientSecretKey() {
      return (bitField0_ & 0x00020000) != 0;
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @return this
     */
    public Gateserver clearClientSecretKey() {
      bitField0_ &= ~0x00020000;
      clientSecretKey.clear();
      return this;
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @return the clientSecretKey
     */
    public String getClientSecretKey() {
      return clientSecretKey.getString();
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @return internal {@code Utf8String} representation of clientSecretKey for reading
     */
    public Utf8String getClientSecretKeyBytes() {
      return this.clientSecretKey;
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @return internal {@code Utf8String} representation of clientSecretKey for modifications
     */
    public Utf8String getMutableClientSecretKeyBytes() {
      bitField0_ |= 0x00020000;
      return this.clientSecretKey;
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @param value the clientSecretKey to set
     * @return this
     */
    public Gateserver setClientSecretKey(final CharSequence value) {
      bitField0_ |= 0x00020000;
      clientSecretKey.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string BPDDCKODEEI = 886;
     *  string PKKDFDAGKEA = 1783;
     *  string AEPOFHMEKMA = 616; // Download Reploy
     * </pre>
     *
     * <code>optional string client_secret_key = 1597;</code>
     * @param value the clientSecretKey to set
     * @return this
     */
    public Gateserver setClientSecretKey(final Utf8String value) {
      bitField0_ |= 0x00020000;
      clientSecretKey.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @return whether the ifixVersion field is set
     */
    public boolean hasIfixVersion() {
      return (bitField0_ & 0x00040000) != 0;
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @return this
     */
    public Gateserver clearIfixVersion() {
      bitField0_ &= ~0x00040000;
      ifixVersion.clear();
      return this;
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @return the ifixVersion
     */
    public String getIfixVersion() {
      return ifixVersion.getString();
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @return internal {@code Utf8String} representation of ifixVersion for reading
     */
    public Utf8String getIfixVersionBytes() {
      return this.ifixVersion;
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @return internal {@code Utf8String} representation of ifixVersion for modifications
     */
    public Utf8String getMutableIfixVersionBytes() {
      bitField0_ |= 0x00040000;
      return this.ifixVersion;
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @param value the ifixVersion to set
     * @return this
     */
    public Gateserver setIfixVersion(final CharSequence value) {
      bitField0_ |= 0x00040000;
      ifixVersion.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string FLCOMPMMKOC = 75; // ALB Upload
     *  string NAMBGHHHJJD = 387;
     * </pre>
     *
     * <code>optional string ifix_version = 1690;</code>
     * @param value the ifixVersion to set
     * @return this
     */
    public Gateserver setIfixVersion(final Utf8String value) {
      bitField0_ |= 0x00040000;
      ifixVersion.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @return whether the mdkResVersion field is set
     */
    public boolean hasMdkResVersion() {
      return (bitField0_ & 0x00080000) != 0;
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @return this
     */
    public Gateserver clearMdkResVersion() {
      bitField0_ &= ~0x00080000;
      mdkResVersion.clear();
      return this;
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @return the mdkResVersion
     */
    public String getMdkResVersion() {
      return mdkResVersion.getString();
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @return internal {@code Utf8String} representation of mdkResVersion for reading
     */
    public Utf8String getMdkResVersionBytes() {
      return this.mdkResVersion;
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @return internal {@code Utf8String} representation of mdkResVersion for modifications
     */
    public Utf8String getMutableMdkResVersionBytes() {
      bitField0_ |= 0x00080000;
      return this.mdkResVersion;
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @param value the mdkResVersion to set
     * @return this
     */
    public Gateserver setMdkResVersion(final CharSequence value) {
      bitField0_ |= 0x00080000;
      mdkResVersion.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  uint32 EMIDNDGCAHL = 8;
     * </pre>
     *
     * <code>optional string mdk_res_version = 1798;</code>
     * @param value the mdkResVersion to set
     * @return this
     */
    public Gateserver setMdkResVersion(final Utf8String value) {
      bitField0_ |= 0x00080000;
      mdkResVersion.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @return whether the ifixUrl field is set
     */
    public boolean hasIfixUrl() {
      return (bitField0_ & 0x00100000) != 0;
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @return this
     */
    public Gateserver clearIfixUrl() {
      bitField0_ &= ~0x00100000;
      ifixUrl.clear();
      return this;
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @return the ifixUrl
     */
    public String getIfixUrl() {
      return ifixUrl.getString();
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @return internal {@code Utf8String} representation of ifixUrl for reading
     */
    public Utf8String getIfixUrlBytes() {
      return this.ifixUrl;
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @return internal {@code Utf8String} representation of ifixUrl for modifications
     */
    public Utf8String getMutableIfixUrlBytes() {
      bitField0_ |= 0x00100000;
      return this.ifixUrl;
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @param value the ifixUrl to set
     * @return this
     */
    public Gateserver setIfixUrl(final CharSequence value) {
      bitField0_ |= 0x00100000;
      ifixUrl.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  string EIMGJOOFNII = 1209; // Ipv6
     * </pre>
     *
     * <code>optional string ifix_url = 1895;</code>
     * @param value the ifixUrl to set
     * @return this
     */
    public Gateserver setIfixUrl(final Utf8String value) {
      bitField0_ |= 0x00100000;
      ifixUrl.copyFrom(value);
      return this;
    }

    @Override
    public Gateserver copyFrom(final Gateserver other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        port = other.port;
        unk1 = other.unk1;
        unk2 = other.unk2;
        unk3 = other.unk3;
        unk4 = other.unk4;
        unk6 = other.unk6;
        unk7 = other.unk7;
        unk8 = other.unk8;
        unk9 = other.unk9;
        unk10 = other.unk10;
        ip.copyFrom(other.ip);
        luaUrl.copyFrom(other.luaUrl);
        msg.copyFrom(other.msg);
        regionName.copyFrom(other.regionName);
        exResourceUrl.copyFrom(other.exResourceUrl);
        assetBundleUrl.copyFrom(other.assetBundleUrl);
        clientSecretKey.copyFrom(other.clientSecretKey);
        ifixVersion.copyFrom(other.ifixVersion);
        mdkResVersion.copyFrom(other.mdkResVersion);
        ifixUrl.copyFrom(other.ifixUrl);
      }
      return this;
    }

    @Override
    public Gateserver mergeFrom(final Gateserver other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasPort()) {
        setPort(other.port);
      }
      if (other.hasUnk1()) {
        setUnk1(other.unk1);
      }
      if (other.hasUnk2()) {
        setUnk2(other.unk2);
      }
      if (other.hasUnk3()) {
        setUnk3(other.unk3);
      }
      if (other.hasUnk4()) {
        setUnk4(other.unk4);
      }
      if (other.hasUnk6()) {
        setUnk6(other.unk6);
      }
      if (other.hasUnk7()) {
        setUnk7(other.unk7);
      }
      if (other.hasUnk8()) {
        setUnk8(other.unk8);
      }
      if (other.hasUnk9()) {
        setUnk9(other.unk9);
      }
      if (other.hasUnk10()) {
        setUnk10(other.unk10);
      }
      if (other.hasIp()) {
        getMutableIpBytes().copyFrom(other.ip);
      }
      if (other.hasLuaUrl()) {
        getMutableLuaUrlBytes().copyFrom(other.luaUrl);
      }
      if (other.hasMsg()) {
        getMutableMsgBytes().copyFrom(other.msg);
      }
      if (other.hasRegionName()) {
        getMutableRegionNameBytes().copyFrom(other.regionName);
      }
      if (other.hasExResourceUrl()) {
        getMutableExResourceUrlBytes().copyFrom(other.exResourceUrl);
      }
      if (other.hasAssetBundleUrl()) {
        getMutableAssetBundleUrlBytes().copyFrom(other.assetBundleUrl);
      }
      if (other.hasClientSecretKey()) {
        getMutableClientSecretKeyBytes().copyFrom(other.clientSecretKey);
      }
      if (other.hasIfixVersion()) {
        getMutableIfixVersionBytes().copyFrom(other.ifixVersion);
      }
      if (other.hasMdkResVersion()) {
        getMutableMdkResVersionBytes().copyFrom(other.mdkResVersion);
      }
      if (other.hasIfixUrl()) {
        getMutableIfixUrlBytes().copyFrom(other.ifixUrl);
      }
      return this;
    }

    @Override
    public Gateserver clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      port = 0;
      unk1 = false;
      unk2 = false;
      unk3 = false;
      unk4 = false;
      unk6 = false;
      unk7 = false;
      unk8 = false;
      unk9 = false;
      unk10 = false;
      ip.clear();
      luaUrl.clear();
      msg.clear();
      regionName.clear();
      exResourceUrl.clear();
      assetBundleUrl.clear();
      clientSecretKey.clear();
      ifixVersion.clear();
      mdkResVersion.clear();
      ifixUrl.clear();
      return this;
    }

    @Override
    public Gateserver clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      ip.clear();
      luaUrl.clear();
      msg.clear();
      regionName.clear();
      exResourceUrl.clear();
      assetBundleUrl.clear();
      clientSecretKey.clear();
      ifixVersion.clear();
      mdkResVersion.clear();
      ifixUrl.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof Gateserver)) {
        return false;
      }
      Gateserver other = (Gateserver) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasPort() || port == other.port)
        && (!hasUnk1() || unk1 == other.unk1)
        && (!hasUnk2() || unk2 == other.unk2)
        && (!hasUnk3() || unk3 == other.unk3)
        && (!hasUnk4() || unk4 == other.unk4)
        && (!hasUnk6() || unk6 == other.unk6)
        && (!hasUnk7() || unk7 == other.unk7)
        && (!hasUnk8() || unk8 == other.unk8)
        && (!hasUnk9() || unk9 == other.unk9)
        && (!hasUnk10() || unk10 == other.unk10)
        && (!hasIp() || ip.equals(other.ip))
        && (!hasLuaUrl() || luaUrl.equals(other.luaUrl))
        && (!hasMsg() || msg.equals(other.msg))
        && (!hasRegionName() || regionName.equals(other.regionName))
        && (!hasExResourceUrl() || exResourceUrl.equals(other.exResourceUrl))
        && (!hasAssetBundleUrl() || assetBundleUrl.equals(other.assetBundleUrl))
        && (!hasClientSecretKey() || clientSecretKey.equals(other.clientSecretKey))
        && (!hasIfixVersion() || ifixVersion.equals(other.ifixVersion))
        && (!hasMdkResVersion() || mdkResVersion.equals(other.mdkResVersion))
        && (!hasIfixUrl() || ifixUrl.equals(other.ifixUrl));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(port);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(unk1);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 104);
        output.writeBoolNoTag(unk2);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawLittleEndian16((short) 1424);
        output.writeBoolNoTag(unk3);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawLittleEndian16((short) 3472);
        output.writeBoolNoTag(unk4);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawLittleEndian16((short) 7328);
        output.writeBoolNoTag(unk6);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawLittleEndian16((short) 11912);
        output.writeBoolNoTag(unk7);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawLittleEndian16((short) 16616);
        output.writeBoolNoTag(unk8);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawLittleEndian16((short) 22472);
        output.writeBoolNoTag(unk9);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawLittleEndian16((short) 29656);
        output.writeBoolNoTag(unk10);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawByte((byte) 10);
        output.writeStringNoTag(ip);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawByte((byte) 18);
        output.writeStringNoTag(luaUrl);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeRawByte((byte) 58);
        output.writeStringNoTag(msg);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeRawByte((byte) 82);
        output.writeStringNoTag(regionName);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeRawByte((byte) 114);
        output.writeStringNoTag(exResourceUrl);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeRawByte((byte) 122);
        output.writeStringNoTag(assetBundleUrl);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeRawLittleEndian16((short) 25578);
        output.writeStringNoTag(clientSecretKey);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        output.writeRawLittleEndian16((short) 27090);
        output.writeStringNoTag(ifixVersion);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        output.writeRawLittleEndian16((short) 28850);
        output.writeStringNoTag(mdkResVersion);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        output.writeRawLittleEndian16((short) 30394);
        output.writeStringNoTag(ifixUrl);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(port);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(ip);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(luaUrl);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(msg);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(regionName);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(exResourceUrl);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(assetBundleUrl);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(clientSecretKey);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(ifixVersion);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(mdkResVersion);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(ifixUrl);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public Gateserver mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // port
            port = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // unk1
            unk1 = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // unk2
            unk2 = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 656) {
              break;
            }
          }
          case 656: {
            // unk3
            unk3 = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 1680) {
              break;
            }
          }
          case 1680: {
            // unk4
            unk4 = input.readBool();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 3616) {
              break;
            }
          }
          case 3616: {
            // unk6
            unk6 = input.readBool();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 5896) {
              break;
            }
          }
          case 5896: {
            // unk7
            unk7 = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 8296) {
              break;
            }
          }
          case 8296: {
            // unk8
            unk8 = input.readBool();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 11208) {
              break;
            }
          }
          case 11208: {
            // unk9
            unk9 = input.readBool();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 14808) {
              break;
            }
          }
          case 14808: {
            // unk10
            unk10 = input.readBool();
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // ip
            input.readString(ip);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // luaUrl
            input.readString(luaUrl);
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // msg
            input.readString(msg);
            bitField0_ |= 0x00002000;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // regionName
            input.readString(regionName);
            bitField0_ |= 0x00004000;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // exResourceUrl
            input.readString(exResourceUrl);
            bitField0_ |= 0x00008000;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // assetBundleUrl
            input.readString(assetBundleUrl);
            bitField0_ |= 0x00010000;
            tag = input.readTag();
            if (tag != 12778) {
              break;
            }
          }
          case 12778: {
            // clientSecretKey
            input.readString(clientSecretKey);
            bitField0_ |= 0x00020000;
            tag = input.readTag();
            if (tag != 13522) {
              break;
            }
          }
          case 13522: {
            // ifixVersion
            input.readString(ifixVersion);
            bitField0_ |= 0x00040000;
            tag = input.readTag();
            if (tag != 14386) {
              break;
            }
          }
          case 14386: {
            // mdkResVersion
            input.readString(mdkResVersion);
            bitField0_ |= 0x00080000;
            tag = input.readTag();
            if (tag != 15162) {
              break;
            }
          }
          case 15162: {
            // ifixUrl
            input.readString(ifixUrl);
            bitField0_ |= 0x00100000;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.port, port);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.unk1, unk1);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.unk2, unk2);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.unk3, unk3);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeBool(FieldNames.unk4, unk4);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeBool(FieldNames.unk6, unk6);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.unk7, unk7);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeBool(FieldNames.unk8, unk8);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeBool(FieldNames.unk9, unk9);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeBool(FieldNames.unk10, unk10);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeString(FieldNames.ip, ip);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeString(FieldNames.luaUrl, luaUrl);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeString(FieldNames.msg, msg);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeString(FieldNames.regionName, regionName);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeString(FieldNames.exResourceUrl, exResourceUrl);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeString(FieldNames.assetBundleUrl, assetBundleUrl);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeString(FieldNames.clientSecretKey, clientSecretKey);
      }
      if ((bitField0_ & 0x00040000) != 0) {
        output.writeString(FieldNames.ifixVersion, ifixVersion);
      }
      if ((bitField0_ & 0x00080000) != 0) {
        output.writeString(FieldNames.mdkResVersion, mdkResVersion);
      }
      if ((bitField0_ & 0x00100000) != 0) {
        output.writeString(FieldNames.ifixUrl, ifixUrl);
      }
      output.endObject();
    }

    @Override
    public Gateserver mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3446913: {
            if (input.isAtField(FieldNames.port)) {
              if (!input.trySkipNullValue()) {
                port = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594623: {
            if (input.isAtField(FieldNames.unk1)) {
              if (!input.trySkipNullValue()) {
                unk1 = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594624: {
            if (input.isAtField(FieldNames.unk2)) {
              if (!input.trySkipNullValue()) {
                unk2 = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594625: {
            if (input.isAtField(FieldNames.unk3)) {
              if (!input.trySkipNullValue()) {
                unk3 = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594626: {
            if (input.isAtField(FieldNames.unk4)) {
              if (!input.trySkipNullValue()) {
                unk4 = input.readBool();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594628: {
            if (input.isAtField(FieldNames.unk6)) {
              if (!input.trySkipNullValue()) {
                unk6 = input.readBool();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594629: {
            if (input.isAtField(FieldNames.unk7)) {
              if (!input.trySkipNullValue()) {
                unk7 = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594630: {
            if (input.isAtField(FieldNames.unk8)) {
              if (!input.trySkipNullValue()) {
                unk8 = input.readBool();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594631: {
            if (input.isAtField(FieldNames.unk9)) {
              if (!input.trySkipNullValue()) {
                unk9 = input.readBool();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 111433361: {
            if (input.isAtField(FieldNames.unk10)) {
              if (!input.trySkipNullValue()) {
                unk10 = input.readBool();
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3367: {
            if (input.isAtField(FieldNames.ip)) {
              if (!input.trySkipNullValue()) {
                input.readString(ip);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1091991977:
          case 508288168: {
            if (input.isAtField(FieldNames.luaUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(luaUrl);
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 108417: {
            if (input.isAtField(FieldNames.msg)) {
              if (!input.trySkipNullValue()) {
                input.readString(msg);
                bitField0_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1990689889:
          case -1565768458: {
            if (input.isAtField(FieldNames.regionName)) {
              if (!input.trySkipNullValue()) {
                input.readString(regionName);
                bitField0_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1643520974:
          case -1086137910: {
            if (input.isAtField(FieldNames.exResourceUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(exResourceUrl);
                bitField0_ |= 0x00008000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1116358531:
          case 1973569761: {
            if (input.isAtField(FieldNames.assetBundleUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(assetBundleUrl);
                bitField0_ |= 0x00010000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -584558076:
          case 904194372: {
            if (input.isAtField(FieldNames.clientSecretKey)) {
              if (!input.trySkipNullValue()) {
                input.readString(clientSecretKey);
                bitField0_ |= 0x00020000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1625073708:
          case -827048283: {
            if (input.isAtField(FieldNames.ifixVersion)) {
              if (!input.trySkipNullValue()) {
                input.readString(ifixVersion);
                bitField0_ |= 0x00040000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1415579412:
          case -204279250: {
            if (input.isAtField(FieldNames.mdkResVersion)) {
              if (!input.trySkipNullValue()) {
                input.readString(mdkResVersion);
                bitField0_ |= 0x00080000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1719409347:
          case 1762383292: {
            if (input.isAtField(FieldNames.ifixUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(ifixUrl);
                bitField0_ |= 0x00100000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public Gateserver clone() {
      return new Gateserver().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static Gateserver parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new Gateserver(), data).checkInitialized();
    }

    public static Gateserver parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Gateserver(), input).checkInitialized();
    }

    public static Gateserver parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Gateserver(), input).checkInitialized();
    }

    /**
     * @return factory for creating Gateserver messages
     */
    public static MessageFactory<Gateserver> getFactory() {
      return GateserverFactory.INSTANCE;
    }

    private enum GateserverFactory implements MessageFactory<Gateserver> {
      INSTANCE;

      @Override
      public Gateserver create() {
        return Gateserver.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName port = FieldName.forField("port");

      static final FieldName unk1 = FieldName.forField("unk1");

      static final FieldName unk2 = FieldName.forField("unk2");

      static final FieldName unk3 = FieldName.forField("unk3");

      static final FieldName unk4 = FieldName.forField("unk4");

      static final FieldName unk6 = FieldName.forField("unk6");

      static final FieldName unk7 = FieldName.forField("unk7");

      static final FieldName unk8 = FieldName.forField("unk8");

      static final FieldName unk9 = FieldName.forField("unk9");

      static final FieldName unk10 = FieldName.forField("unk10");

      static final FieldName ip = FieldName.forField("ip");

      static final FieldName luaUrl = FieldName.forField("luaUrl", "lua_url");

      static final FieldName msg = FieldName.forField("msg");

      static final FieldName regionName = FieldName.forField("regionName", "region_name");

      static final FieldName exResourceUrl = FieldName.forField("exResourceUrl", "ex_resource_url");

      static final FieldName assetBundleUrl = FieldName.forField("assetBundleUrl", "asset_bundle_url");

      static final FieldName clientSecretKey = FieldName.forField("clientSecretKey", "client_secret_key");

      static final FieldName ifixVersion = FieldName.forField("ifixVersion", "ifix_version");

      static final FieldName mdkResVersion = FieldName.forField("mdkResVersion", "mdk_res_version");

      static final FieldName ifixUrl = FieldName.forField("ifixUrl", "ifix_url");
    }
  }
}
