// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class MonsterBattleInfoOuterClass {
  /**
   * <pre>
   *  uint32 entity_id = 1;
   *  uint32 monster_id = 2;
   *  uint32 monster_template_id = 3;
   *  uint32 monster_level = 4;
   *  MonsterProperty monster_status = 5;
   *  uint32 total_turns = 6;
   *  double total_damage = 7;
   *  double total_heal = 8;
   *  double total_damage_taken = 9;
   *  double total_stance_damage_taken = 10;
   *  double total_hp_recover = 11;
   *  uint32 stage_id = 12;
   *  uint32 battle_id = 13;
   *  uint32 monster_type = 14;
   *  repeated AttackDamageProperty attack_type_damage = 15;
   *  repeated FLOJPLPFGIH skill_times = 16;
   *  uint32 stage_type = 17;
   *  double total_break_damage_taken = 18;
   *  double delay_cumulate = 19;
   *  GHBIABDNMFA death_source = 20;
   *  uint32 wave = 21;
   *  int32 index_in_wave = 22;
   *  uint32 phase = 23;
   *  uint32 max_phase = 24;
   *  NDCIDEHCCAG battle_tag = 25;
   *  repeated ELBDNIGGHOE FNAMLLELMAO = 26;
   *  uint32 HHOMOKPIIPK = 27;
   *  repeated CNMOEJENDJO EIMIHBODEJN = 28;
   *  uint32 CGLIMCKBFJF = 29;
   *  uint32 DHKALNBKFLD = 30;
   *  HPGBMFAHHNE NLMHGAHHNCK = 31;
   * </pre>
   *
   * Protobuf type {@code MonsterBattleInfo}
   */
  public static final class MonsterBattleInfo extends ProtoMessage<MonsterBattleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    private MonsterBattleInfo() {
    }

    /**
     * <pre>
     *  uint32 entity_id = 1;
     *  uint32 monster_id = 2;
     *  uint32 monster_template_id = 3;
     *  uint32 monster_level = 4;
     *  MonsterProperty monster_status = 5;
     *  uint32 total_turns = 6;
     *  double total_damage = 7;
     *  double total_heal = 8;
     *  double total_damage_taken = 9;
     *  double total_stance_damage_taken = 10;
     *  double total_hp_recover = 11;
     *  uint32 stage_id = 12;
     *  uint32 battle_id = 13;
     *  uint32 monster_type = 14;
     *  repeated AttackDamageProperty attack_type_damage = 15;
     *  repeated FLOJPLPFGIH skill_times = 16;
     *  uint32 stage_type = 17;
     *  double total_break_damage_taken = 18;
     *  double delay_cumulate = 19;
     *  GHBIABDNMFA death_source = 20;
     *  uint32 wave = 21;
     *  int32 index_in_wave = 22;
     *  uint32 phase = 23;
     *  uint32 max_phase = 24;
     *  NDCIDEHCCAG battle_tag = 25;
     *  repeated ELBDNIGGHOE FNAMLLELMAO = 26;
     *  uint32 HHOMOKPIIPK = 27;
     *  repeated CNMOEJENDJO EIMIHBODEJN = 28;
     *  uint32 CGLIMCKBFJF = 29;
     *  uint32 DHKALNBKFLD = 30;
     *  HPGBMFAHHNE NLMHGAHHNCK = 31;
     * </pre>
     *
     * @return a new empty instance of {@code MonsterBattleInfo}
     */
    public static MonsterBattleInfo newInstance() {
      return new MonsterBattleInfo();
    }

    @Override
    public MonsterBattleInfo copyFrom(final MonsterBattleInfo other) {
      cachedSize = other.cachedSize;
      return this;
    }

    @Override
    public MonsterBattleInfo mergeFrom(final MonsterBattleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      return this;
    }

    @Override
    public MonsterBattleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      return this;
    }

    @Override
    public MonsterBattleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MonsterBattleInfo)) {
        return false;
      }
      MonsterBattleInfo other = (MonsterBattleInfo) o;
      return true;
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MonsterBattleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      output.endObject();
    }

    @Override
    public MonsterBattleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MonsterBattleInfo clone() {
      return new MonsterBattleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MonsterBattleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MonsterBattleInfo(), data).checkInitialized();
    }

    public static MonsterBattleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MonsterBattleInfo(), input).checkInitialized();
    }

    public static MonsterBattleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MonsterBattleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating MonsterBattleInfo messages
     */
    public static MessageFactory<MonsterBattleInfo> getFactory() {
      return MonsterBattleInfoFactory.INSTANCE;
    }

    private enum MonsterBattleInfoFactory implements MessageFactory<MonsterBattleInfo> {
      INSTANCE;

      @Override
      public MonsterBattleInfo create() {
        return MonsterBattleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
    }
  }
}
