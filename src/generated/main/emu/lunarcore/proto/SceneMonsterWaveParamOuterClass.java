// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class SceneMonsterWaveParamOuterClass {
  /**
   * Protobuf type {@code SceneMonsterWaveParam}
   */
  public static final class SceneMonsterWaveParam extends ProtoMessage<SceneMonsterWaveParam> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 IIBEOENKNCN = 1;</code>
     */
    private int iIBEOENKNCN;

    /**
     * <code>optional uint32 OANMNKHJALP = 10;</code>
     */
    private int oANMNKHJALP;

    /**
     * <code>optional uint32 level = 11;</code>
     */
    private int level;

    /**
     * <code>optional uint32 NOPLCGHHDJJ = 13;</code>
     */
    private int nOPLCGHHDJJ;

    private SceneMonsterWaveParam() {
    }

    /**
     * @return a new empty instance of {@code SceneMonsterWaveParam}
     */
    public static SceneMonsterWaveParam newInstance() {
      return new SceneMonsterWaveParam();
    }

    /**
     * <code>optional uint32 IIBEOENKNCN = 1;</code>
     * @return whether the iIBEOENKNCN field is set
     */
    public boolean hasIIBEOENKNCN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 IIBEOENKNCN = 1;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearIIBEOENKNCN() {
      bitField0_ &= ~0x00000001;
      iIBEOENKNCN = 0;
      return this;
    }

    /**
     * <code>optional uint32 IIBEOENKNCN = 1;</code>
     * @return the iIBEOENKNCN
     */
    public int getIIBEOENKNCN() {
      return iIBEOENKNCN;
    }

    /**
     * <code>optional uint32 IIBEOENKNCN = 1;</code>
     * @param value the iIBEOENKNCN to set
     * @return this
     */
    public SceneMonsterWaveParam setIIBEOENKNCN(final int value) {
      bitField0_ |= 0x00000001;
      iIBEOENKNCN = value;
      return this;
    }

    /**
     * <code>optional uint32 OANMNKHJALP = 10;</code>
     * @return whether the oANMNKHJALP field is set
     */
    public boolean hasOANMNKHJALP() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 OANMNKHJALP = 10;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearOANMNKHJALP() {
      bitField0_ &= ~0x00000002;
      oANMNKHJALP = 0;
      return this;
    }

    /**
     * <code>optional uint32 OANMNKHJALP = 10;</code>
     * @return the oANMNKHJALP
     */
    public int getOANMNKHJALP() {
      return oANMNKHJALP;
    }

    /**
     * <code>optional uint32 OANMNKHJALP = 10;</code>
     * @param value the oANMNKHJALP to set
     * @return this
     */
    public SceneMonsterWaveParam setOANMNKHJALP(final int value) {
      bitField0_ |= 0x00000002;
      oANMNKHJALP = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 11;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 level = 11;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearLevel() {
      bitField0_ &= ~0x00000004;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 11;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 11;</code>
     * @param value the level to set
     * @return this
     */
    public SceneMonsterWaveParam setLevel(final int value) {
      bitField0_ |= 0x00000004;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 NOPLCGHHDJJ = 13;</code>
     * @return whether the nOPLCGHHDJJ field is set
     */
    public boolean hasNOPLCGHHDJJ() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 NOPLCGHHDJJ = 13;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearNOPLCGHHDJJ() {
      bitField0_ &= ~0x00000008;
      nOPLCGHHDJJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 NOPLCGHHDJJ = 13;</code>
     * @return the nOPLCGHHDJJ
     */
    public int getNOPLCGHHDJJ() {
      return nOPLCGHHDJJ;
    }

    /**
     * <code>optional uint32 NOPLCGHHDJJ = 13;</code>
     * @param value the nOPLCGHHDJJ to set
     * @return this
     */
    public SceneMonsterWaveParam setNOPLCGHHDJJ(final int value) {
      bitField0_ |= 0x00000008;
      nOPLCGHHDJJ = value;
      return this;
    }

    @Override
    public SceneMonsterWaveParam copyFrom(final SceneMonsterWaveParam other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        iIBEOENKNCN = other.iIBEOENKNCN;
        oANMNKHJALP = other.oANMNKHJALP;
        level = other.level;
        nOPLCGHHDJJ = other.nOPLCGHHDJJ;
      }
      return this;
    }

    @Override
    public SceneMonsterWaveParam mergeFrom(final SceneMonsterWaveParam other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasIIBEOENKNCN()) {
        setIIBEOENKNCN(other.iIBEOENKNCN);
      }
      if (other.hasOANMNKHJALP()) {
        setOANMNKHJALP(other.oANMNKHJALP);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasNOPLCGHHDJJ()) {
        setNOPLCGHHDJJ(other.nOPLCGHHDJJ);
      }
      return this;
    }

    @Override
    public SceneMonsterWaveParam clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iIBEOENKNCN = 0;
      oANMNKHJALP = 0;
      level = 0;
      nOPLCGHHDJJ = 0;
      return this;
    }

    @Override
    public SceneMonsterWaveParam clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SceneMonsterWaveParam)) {
        return false;
      }
      SceneMonsterWaveParam other = (SceneMonsterWaveParam) o;
      return bitField0_ == other.bitField0_
        && (!hasIIBEOENKNCN() || iIBEOENKNCN == other.iIBEOENKNCN)
        && (!hasOANMNKHJALP() || oANMNKHJALP == other.oANMNKHJALP)
        && (!hasLevel() || level == other.level)
        && (!hasNOPLCGHHDJJ() || nOPLCGHHDJJ == other.nOPLCGHHDJJ);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(iIBEOENKNCN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(oANMNKHJALP);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(nOPLCGHHDJJ);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(iIBEOENKNCN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oANMNKHJALP);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(nOPLCGHHDJJ);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SceneMonsterWaveParam mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // iIBEOENKNCN
            iIBEOENKNCN = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // oANMNKHJALP
            oANMNKHJALP = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // nOPLCGHHDJJ
            nOPLCGHHDJJ = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.iIBEOENKNCN, iIBEOENKNCN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oANMNKHJALP, oANMNKHJALP);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.nOPLCGHHDJJ, nOPLCGHHDJJ);
      }
      output.endObject();
    }

    @Override
    public SceneMonsterWaveParam mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 615975811: {
            if (input.isAtField(FieldNames.iIBEOENKNCN)) {
              if (!input.trySkipNullValue()) {
                iIBEOENKNCN = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 117962101: {
            if (input.isAtField(FieldNames.oANMNKHJALP)) {
              if (!input.trySkipNullValue()) {
                oANMNKHJALP = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1108760451: {
            if (input.isAtField(FieldNames.nOPLCGHHDJJ)) {
              if (!input.trySkipNullValue()) {
                nOPLCGHHDJJ = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SceneMonsterWaveParam clone() {
      return new SceneMonsterWaveParam().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SceneMonsterWaveParam parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SceneMonsterWaveParam(), data).checkInitialized();
    }

    public static SceneMonsterWaveParam parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneMonsterWaveParam(), input).checkInitialized();
    }

    public static SceneMonsterWaveParam parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneMonsterWaveParam(), input).checkInitialized();
    }

    /**
     * @return factory for creating SceneMonsterWaveParam messages
     */
    public static MessageFactory<SceneMonsterWaveParam> getFactory() {
      return SceneMonsterWaveParamFactory.INSTANCE;
    }

    private enum SceneMonsterWaveParamFactory implements MessageFactory<SceneMonsterWaveParam> {
      INSTANCE;

      @Override
      public SceneMonsterWaveParam create() {
        return SceneMonsterWaveParam.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName iIBEOENKNCN = FieldName.forField("IIBEOENKNCN");

      static final FieldName oANMNKHJALP = FieldName.forField("OANMNKHJALP");

      static final FieldName level = FieldName.forField("level");

      static final FieldName nOPLCGHHDJJ = FieldName.forField("NOPLCGHHDJJ");
    }
  }
}
