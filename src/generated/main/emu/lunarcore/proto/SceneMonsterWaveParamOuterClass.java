// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class SceneMonsterWaveParamOuterClass {
  /**
   * Protobuf type {@code SceneMonsterWaveParam}
   */
  public static final class SceneMonsterWaveParam extends ProtoMessage<SceneMonsterWaveParam> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 DDAFGBCJFMG = 3;</code>
     */
    private int dDAFGBCJFMG;

    /**
     * <code>optional uint32 level = 5;</code>
     */
    private int level;

    /**
     * <code>optional uint32 NKAAPFHHLCN = 6;</code>
     */
    private int nKAAPFHHLCN;

    /**
     * <code>optional uint32 FOBGFMKKIPK = 10;</code>
     */
    private int fOBGFMKKIPK;

    private SceneMonsterWaveParam() {
    }

    /**
     * @return a new empty instance of {@code SceneMonsterWaveParam}
     */
    public static SceneMonsterWaveParam newInstance() {
      return new SceneMonsterWaveParam();
    }

    /**
     * <code>optional uint32 DDAFGBCJFMG = 3;</code>
     * @return whether the dDAFGBCJFMG field is set
     */
    public boolean hasDDAFGBCJFMG() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 DDAFGBCJFMG = 3;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearDDAFGBCJFMG() {
      bitField0_ &= ~0x00000001;
      dDAFGBCJFMG = 0;
      return this;
    }

    /**
     * <code>optional uint32 DDAFGBCJFMG = 3;</code>
     * @return the dDAFGBCJFMG
     */
    public int getDDAFGBCJFMG() {
      return dDAFGBCJFMG;
    }

    /**
     * <code>optional uint32 DDAFGBCJFMG = 3;</code>
     * @param value the dDAFGBCJFMG to set
     * @return this
     */
    public SceneMonsterWaveParam setDDAFGBCJFMG(final int value) {
      bitField0_ |= 0x00000001;
      dDAFGBCJFMG = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearLevel() {
      bitField0_ &= ~0x00000002;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @param value the level to set
     * @return this
     */
    public SceneMonsterWaveParam setLevel(final int value) {
      bitField0_ |= 0x00000002;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 NKAAPFHHLCN = 6;</code>
     * @return whether the nKAAPFHHLCN field is set
     */
    public boolean hasNKAAPFHHLCN() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 NKAAPFHHLCN = 6;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearNKAAPFHHLCN() {
      bitField0_ &= ~0x00000004;
      nKAAPFHHLCN = 0;
      return this;
    }

    /**
     * <code>optional uint32 NKAAPFHHLCN = 6;</code>
     * @return the nKAAPFHHLCN
     */
    public int getNKAAPFHHLCN() {
      return nKAAPFHHLCN;
    }

    /**
     * <code>optional uint32 NKAAPFHHLCN = 6;</code>
     * @param value the nKAAPFHHLCN to set
     * @return this
     */
    public SceneMonsterWaveParam setNKAAPFHHLCN(final int value) {
      bitField0_ |= 0x00000004;
      nKAAPFHHLCN = value;
      return this;
    }

    /**
     * <code>optional uint32 FOBGFMKKIPK = 10;</code>
     * @return whether the fOBGFMKKIPK field is set
     */
    public boolean hasFOBGFMKKIPK() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 FOBGFMKKIPK = 10;</code>
     * @return this
     */
    public SceneMonsterWaveParam clearFOBGFMKKIPK() {
      bitField0_ &= ~0x00000008;
      fOBGFMKKIPK = 0;
      return this;
    }

    /**
     * <code>optional uint32 FOBGFMKKIPK = 10;</code>
     * @return the fOBGFMKKIPK
     */
    public int getFOBGFMKKIPK() {
      return fOBGFMKKIPK;
    }

    /**
     * <code>optional uint32 FOBGFMKKIPK = 10;</code>
     * @param value the fOBGFMKKIPK to set
     * @return this
     */
    public SceneMonsterWaveParam setFOBGFMKKIPK(final int value) {
      bitField0_ |= 0x00000008;
      fOBGFMKKIPK = value;
      return this;
    }

    @Override
    public SceneMonsterWaveParam copyFrom(final SceneMonsterWaveParam other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        dDAFGBCJFMG = other.dDAFGBCJFMG;
        level = other.level;
        nKAAPFHHLCN = other.nKAAPFHHLCN;
        fOBGFMKKIPK = other.fOBGFMKKIPK;
      }
      return this;
    }

    @Override
    public SceneMonsterWaveParam mergeFrom(final SceneMonsterWaveParam other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDDAFGBCJFMG()) {
        setDDAFGBCJFMG(other.dDAFGBCJFMG);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasNKAAPFHHLCN()) {
        setNKAAPFHHLCN(other.nKAAPFHHLCN);
      }
      if (other.hasFOBGFMKKIPK()) {
        setFOBGFMKKIPK(other.fOBGFMKKIPK);
      }
      return this;
    }

    @Override
    public SceneMonsterWaveParam clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dDAFGBCJFMG = 0;
      level = 0;
      nKAAPFHHLCN = 0;
      fOBGFMKKIPK = 0;
      return this;
    }

    @Override
    public SceneMonsterWaveParam clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SceneMonsterWaveParam)) {
        return false;
      }
      SceneMonsterWaveParam other = (SceneMonsterWaveParam) o;
      return bitField0_ == other.bitField0_
        && (!hasDDAFGBCJFMG() || dDAFGBCJFMG == other.dDAFGBCJFMG)
        && (!hasLevel() || level == other.level)
        && (!hasNKAAPFHHLCN() || nKAAPFHHLCN == other.nKAAPFHHLCN)
        && (!hasFOBGFMKKIPK() || fOBGFMKKIPK == other.fOBGFMKKIPK);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(dDAFGBCJFMG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(nKAAPFHHLCN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(fOBGFMKKIPK);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dDAFGBCJFMG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(nKAAPFHHLCN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fOBGFMKKIPK);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SceneMonsterWaveParam mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // dDAFGBCJFMG
            dDAFGBCJFMG = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // nKAAPFHHLCN
            nKAAPFHHLCN = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // fOBGFMKKIPK
            fOBGFMKKIPK = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.dDAFGBCJFMG, dDAFGBCJFMG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.nKAAPFHHLCN, nKAAPFHHLCN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.fOBGFMKKIPK, fOBGFMKKIPK);
      }
      output.endObject();
    }

    @Override
    public SceneMonsterWaveParam mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1652482471: {
            if (input.isAtField(FieldNames.dDAFGBCJFMG)) {
              if (!input.trySkipNullValue()) {
                dDAFGBCJFMG = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -130192572: {
            if (input.isAtField(FieldNames.nKAAPFHHLCN)) {
              if (!input.trySkipNullValue()) {
                nKAAPFHHLCN = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 552094639: {
            if (input.isAtField(FieldNames.fOBGFMKKIPK)) {
              if (!input.trySkipNullValue()) {
                fOBGFMKKIPK = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SceneMonsterWaveParam clone() {
      return new SceneMonsterWaveParam().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SceneMonsterWaveParam parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SceneMonsterWaveParam(), data).checkInitialized();
    }

    public static SceneMonsterWaveParam parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneMonsterWaveParam(), input).checkInitialized();
    }

    public static SceneMonsterWaveParam parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneMonsterWaveParam(), input).checkInitialized();
    }

    /**
     * @return factory for creating SceneMonsterWaveParam messages
     */
    public static MessageFactory<SceneMonsterWaveParam> getFactory() {
      return SceneMonsterWaveParamFactory.INSTANCE;
    }

    private enum SceneMonsterWaveParamFactory implements MessageFactory<SceneMonsterWaveParam> {
      INSTANCE;

      @Override
      public SceneMonsterWaveParam create() {
        return SceneMonsterWaveParam.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName dDAFGBCJFMG = FieldName.forField("DDAFGBCJFMG");

      static final FieldName level = FieldName.forField("level");

      static final FieldName nKAAPFHHLCN = FieldName.forField("NKAAPFHHLCN");

      static final FieldName fOBGFMKKIPK = FieldName.forField("FOBGFMKKIPK");
    }
  }
}
