// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetAvatarDataScRspOuterClass {
  /**
   * Protobuf type {@code GetAvatarDataScRsp}
   */
  public static final class GetAvatarDataScRsp extends ProtoMessage<GetAvatarDataScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 15;</code>
     */
    private int retcode;

    /**
     * <code>optional bool is_get_all = 7;</code>
     */
    private boolean isGetAll;

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     */
    private final RepeatedInt unlockedSkinIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     */
    private final RepeatedMessage<AvatarOuterClass.Avatar> avatarList = RepeatedMessage.newEmptyInstance(AvatarOuterClass.Avatar.getFactory());

    private GetAvatarDataScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetAvatarDataScRsp}
     */
    public static GetAvatarDataScRsp newInstance() {
      return new GetAvatarDataScRsp();
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @return this
     */
    public GetAvatarDataScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 15;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetAvatarDataScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool is_get_all = 7;</code>
     * @return whether the isGetAll field is set
     */
    public boolean hasIsGetAll() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool is_get_all = 7;</code>
     * @return this
     */
    public GetAvatarDataScRsp clearIsGetAll() {
      bitField0_ &= ~0x00000002;
      isGetAll = false;
      return this;
    }

    /**
     * <code>optional bool is_get_all = 7;</code>
     * @return the isGetAll
     */
    public boolean getIsGetAll() {
      return isGetAll;
    }

    /**
     * <code>optional bool is_get_all = 7;</code>
     * @param value the isGetAll to set
     * @return this
     */
    public GetAvatarDataScRsp setIsGetAll(final boolean value) {
      bitField0_ |= 0x00000002;
      isGetAll = value;
      return this;
    }

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     * @return whether the unlockedSkinIdList field is set
     */
    public boolean hasUnlockedSkinIdList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     * @return this
     */
    public GetAvatarDataScRsp clearUnlockedSkinIdList() {
      bitField0_ &= ~0x00000004;
      unlockedSkinIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableUnlockedSkinIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getUnlockedSkinIdList() {
      return unlockedSkinIdList;
    }

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableUnlockedSkinIdList() {
      bitField0_ |= 0x00000004;
      return unlockedSkinIdList;
    }

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     * @param value the unlockedSkinIdList to add
     * @return this
     */
    public GetAvatarDataScRsp addUnlockedSkinIdList(final int value) {
      bitField0_ |= 0x00000004;
      unlockedSkinIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 unlocked_skin_id_list = 2;</code>
     * @param values the unlockedSkinIdList to add
     * @return this
     */
    public GetAvatarDataScRsp addAllUnlockedSkinIdList(final int... values) {
      bitField0_ |= 0x00000004;
      unlockedSkinIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     * @return whether the avatarList field is set
     */
    public boolean hasAvatarList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     * @return this
     */
    public GetAvatarDataScRsp clearAvatarList() {
      bitField0_ &= ~0x00000008;
      avatarList.clear();
      return this;
    }

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAvatarList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<AvatarOuterClass.Avatar> getAvatarList() {
      return avatarList;
    }

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<AvatarOuterClass.Avatar> getMutableAvatarList() {
      bitField0_ |= 0x00000008;
      return avatarList;
    }

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     * @param value the avatarList to add
     * @return this
     */
    public GetAvatarDataScRsp addAvatarList(final AvatarOuterClass.Avatar value) {
      bitField0_ |= 0x00000008;
      avatarList.add(value);
      return this;
    }

    /**
     * <code>repeated .Avatar avatar_list = 5;</code>
     * @param values the avatarList to add
     * @return this
     */
    public GetAvatarDataScRsp addAllAvatarList(final AvatarOuterClass.Avatar... values) {
      bitField0_ |= 0x00000008;
      avatarList.addAll(values);
      return this;
    }

    @Override
    public GetAvatarDataScRsp copyFrom(final GetAvatarDataScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        isGetAll = other.isGetAll;
        unlockedSkinIdList.copyFrom(other.unlockedSkinIdList);
        avatarList.copyFrom(other.avatarList);
      }
      return this;
    }

    @Override
    public GetAvatarDataScRsp mergeFrom(final GetAvatarDataScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasIsGetAll()) {
        setIsGetAll(other.isGetAll);
      }
      if (other.hasUnlockedSkinIdList()) {
        getMutableUnlockedSkinIdList().addAll(other.unlockedSkinIdList);
      }
      if (other.hasAvatarList()) {
        getMutableAvatarList().addAll(other.avatarList);
      }
      return this;
    }

    @Override
    public GetAvatarDataScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      isGetAll = false;
      unlockedSkinIdList.clear();
      avatarList.clear();
      return this;
    }

    @Override
    public GetAvatarDataScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unlockedSkinIdList.clear();
      avatarList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetAvatarDataScRsp)) {
        return false;
      }
      GetAvatarDataScRsp other = (GetAvatarDataScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasIsGetAll() || isGetAll == other.isGetAll)
        && (!hasUnlockedSkinIdList() || unlockedSkinIdList.equals(other.unlockedSkinIdList))
        && (!hasAvatarList() || avatarList.equals(other.avatarList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(isGetAll);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < unlockedSkinIdList.length(); i++) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(unlockedSkinIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < avatarList.length(); i++) {
          output.writeRawByte((byte) 42);
          output.writeMessageNoTag(avatarList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * unlockedSkinIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(unlockedSkinIdList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * avatarList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(avatarList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetAvatarDataScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 120: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // isGetAll
            isGetAll = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // unlockedSkinIdList [packed=true]
            input.readPackedUInt32(unlockedSkinIdList, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // avatarList
            tag = input.readRepeatedMessage(avatarList, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 16: {
            // unlockedSkinIdList [packed=false]
            tag = input.readRepeatedUInt32(unlockedSkinIdList, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isGetAll, isGetAll);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.unlockedSkinIdList, unlockedSkinIdList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.avatarList, avatarList);
      }
      output.endObject();
    }

    @Override
    public GetAvatarDataScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -575333323:
          case 1425508131: {
            if (input.isAtField(FieldNames.isGetAll)) {
              if (!input.trySkipNullValue()) {
                isGetAll = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -533384327:
          case 2047564892: {
            if (input.isAtField(FieldNames.unlockedSkinIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(unlockedSkinIdList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -403402345:
          case 397055940: {
            if (input.isAtField(FieldNames.avatarList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(avatarList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetAvatarDataScRsp clone() {
      return new GetAvatarDataScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetAvatarDataScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetAvatarDataScRsp(), data).checkInitialized();
    }

    public static GetAvatarDataScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetAvatarDataScRsp(), input).checkInitialized();
    }

    public static GetAvatarDataScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetAvatarDataScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetAvatarDataScRsp messages
     */
    public static MessageFactory<GetAvatarDataScRsp> getFactory() {
      return GetAvatarDataScRspFactory.INSTANCE;
    }

    private enum GetAvatarDataScRspFactory implements MessageFactory<GetAvatarDataScRsp> {
      INSTANCE;

      @Override
      public GetAvatarDataScRsp create() {
        return GetAvatarDataScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName isGetAll = FieldName.forField("isGetAll", "is_get_all");

      static final FieldName unlockedSkinIdList = FieldName.forField("unlockedSkinIdList", "unlocked_skin_id_list");

      static final FieldName avatarList = FieldName.forField("avatarList", "avatar_list");
    }
  }
}
