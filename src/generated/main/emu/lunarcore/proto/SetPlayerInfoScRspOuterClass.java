// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class SetPlayerInfoScRspOuterClass {
  /**
   * Protobuf type {@code SetPlayerInfoScRsp}
   */
  public static final class SetPlayerInfoScRsp extends ProtoMessage<SetPlayerInfoScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 NCBJIHNAOFG = 14;</code>
     */
    private long nCBJIHNAOFG;

    /**
     * <code>optional uint32 retcode = 4;</code>
     */
    private int retcode;

    /**
     * <code>optional .MultiPathAvatarType GPDNDCCLOOD = 2;</code>
     */
    private int gPDNDCCLOOD;

    /**
     * <code>optional bool is_modify = 10;</code>
     */
    private boolean isModify;

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     */
    private final RepeatedMessage<MultiPathAvatarTypeInfoOuterClass.MultiPathAvatarTypeInfo> fJPGCEEAPMO = RepeatedMessage.newEmptyInstance(MultiPathAvatarTypeInfoOuterClass.MultiPathAvatarTypeInfo.getFactory());

    private SetPlayerInfoScRsp() {
    }

    /**
     * @return a new empty instance of {@code SetPlayerInfoScRsp}
     */
    public static SetPlayerInfoScRsp newInstance() {
      return new SetPlayerInfoScRsp();
    }

    /**
     * <code>optional int64 NCBJIHNAOFG = 14;</code>
     * @return whether the nCBJIHNAOFG field is set
     */
    public boolean hasNCBJIHNAOFG() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 NCBJIHNAOFG = 14;</code>
     * @return this
     */
    public SetPlayerInfoScRsp clearNCBJIHNAOFG() {
      bitField0_ &= ~0x00000001;
      nCBJIHNAOFG = 0L;
      return this;
    }

    /**
     * <code>optional int64 NCBJIHNAOFG = 14;</code>
     * @return the nCBJIHNAOFG
     */
    public long getNCBJIHNAOFG() {
      return nCBJIHNAOFG;
    }

    /**
     * <code>optional int64 NCBJIHNAOFG = 14;</code>
     * @param value the nCBJIHNAOFG to set
     * @return this
     */
    public SetPlayerInfoScRsp setNCBJIHNAOFG(final long value) {
      bitField0_ |= 0x00000001;
      nCBJIHNAOFG = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return this
     */
    public SetPlayerInfoScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @param value the retcode to set
     * @return this
     */
    public SetPlayerInfoScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType GPDNDCCLOOD = 2;</code>
     * @return whether the gPDNDCCLOOD field is set
     */
    public boolean hasGPDNDCCLOOD() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .MultiPathAvatarType GPDNDCCLOOD = 2;</code>
     * @return this
     */
    public SetPlayerInfoScRsp clearGPDNDCCLOOD() {
      bitField0_ &= ~0x00000004;
      gPDNDCCLOOD = 0;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType GPDNDCCLOOD = 2;</code>
     * @return the gPDNDCCLOOD
     */
    public MultiPathAvatarTypeOuterClass.MultiPathAvatarType getGPDNDCCLOOD() {
      return MultiPathAvatarTypeOuterClass.MultiPathAvatarType.forNumber(gPDNDCCLOOD);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SetPlayerInfoScRsp#getGPDNDCCLOOD()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getGPDNDCCLOODValue() {
      return gPDNDCCLOOD;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link MultiPathAvatarTypeOuterClass.MultiPathAvatarType}. Setting an invalid value
     * can cause {@link SetPlayerInfoScRsp#getGPDNDCCLOOD()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SetPlayerInfoScRsp setGPDNDCCLOODValue(final int value) {
      bitField0_ |= 0x00000004;
      gPDNDCCLOOD = value;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType GPDNDCCLOOD = 2;</code>
     * @param value the gPDNDCCLOOD to set
     * @return this
     */
    public SetPlayerInfoScRsp setGPDNDCCLOOD(
        final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value) {
      bitField0_ |= 0x00000004;
      gPDNDCCLOOD = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool is_modify = 10;</code>
     * @return whether the isModify field is set
     */
    public boolean hasIsModify() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool is_modify = 10;</code>
     * @return this
     */
    public SetPlayerInfoScRsp clearIsModify() {
      bitField0_ &= ~0x00000008;
      isModify = false;
      return this;
    }

    /**
     * <code>optional bool is_modify = 10;</code>
     * @return the isModify
     */
    public boolean getIsModify() {
      return isModify;
    }

    /**
     * <code>optional bool is_modify = 10;</code>
     * @param value the isModify to set
     * @return this
     */
    public SetPlayerInfoScRsp setIsModify(final boolean value) {
      bitField0_ |= 0x00000008;
      isModify = value;
      return this;
    }

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     * @return whether the fJPGCEEAPMO field is set
     */
    public boolean hasFJPGCEEAPMO() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     * @return this
     */
    public SetPlayerInfoScRsp clearFJPGCEEAPMO() {
      bitField0_ &= ~0x00000010;
      fJPGCEEAPMO.clear();
      return this;
    }

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFJPGCEEAPMO()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MultiPathAvatarTypeInfoOuterClass.MultiPathAvatarTypeInfo> getFJPGCEEAPMO(
        ) {
      return fJPGCEEAPMO;
    }

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MultiPathAvatarTypeInfoOuterClass.MultiPathAvatarTypeInfo> getMutableFJPGCEEAPMO(
        ) {
      bitField0_ |= 0x00000010;
      return fJPGCEEAPMO;
    }

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     * @param value the fJPGCEEAPMO to add
     * @return this
     */
    public SetPlayerInfoScRsp addFJPGCEEAPMO(
        final MultiPathAvatarTypeInfoOuterClass.MultiPathAvatarTypeInfo value) {
      bitField0_ |= 0x00000010;
      fJPGCEEAPMO.add(value);
      return this;
    }

    /**
     * <code>repeated .MultiPathAvatarTypeInfo FJPGCEEAPMO = 9;</code>
     * @param values the fJPGCEEAPMO to add
     * @return this
     */
    public SetPlayerInfoScRsp addAllFJPGCEEAPMO(
        final MultiPathAvatarTypeInfoOuterClass.MultiPathAvatarTypeInfo... values) {
      bitField0_ |= 0x00000010;
      fJPGCEEAPMO.addAll(values);
      return this;
    }

    @Override
    public SetPlayerInfoScRsp copyFrom(final SetPlayerInfoScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        nCBJIHNAOFG = other.nCBJIHNAOFG;
        retcode = other.retcode;
        gPDNDCCLOOD = other.gPDNDCCLOOD;
        isModify = other.isModify;
        fJPGCEEAPMO.copyFrom(other.fJPGCEEAPMO);
      }
      return this;
    }

    @Override
    public SetPlayerInfoScRsp mergeFrom(final SetPlayerInfoScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasNCBJIHNAOFG()) {
        setNCBJIHNAOFG(other.nCBJIHNAOFG);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasGPDNDCCLOOD()) {
        setGPDNDCCLOODValue(other.gPDNDCCLOOD);
      }
      if (other.hasIsModify()) {
        setIsModify(other.isModify);
      }
      if (other.hasFJPGCEEAPMO()) {
        getMutableFJPGCEEAPMO().addAll(other.fJPGCEEAPMO);
      }
      return this;
    }

    @Override
    public SetPlayerInfoScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nCBJIHNAOFG = 0L;
      retcode = 0;
      gPDNDCCLOOD = 0;
      isModify = false;
      fJPGCEEAPMO.clear();
      return this;
    }

    @Override
    public SetPlayerInfoScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fJPGCEEAPMO.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SetPlayerInfoScRsp)) {
        return false;
      }
      SetPlayerInfoScRsp other = (SetPlayerInfoScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasNCBJIHNAOFG() || nCBJIHNAOFG == other.nCBJIHNAOFG)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasGPDNDCCLOOD() || gPDNDCCLOOD == other.gPDNDCCLOOD)
        && (!hasIsModify() || isModify == other.isModify)
        && (!hasFJPGCEEAPMO() || fJPGCEEAPMO.equals(other.fJPGCEEAPMO));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 112);
        output.writeInt64NoTag(nCBJIHNAOFG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 16);
        output.writeEnumNoTag(gPDNDCCLOOD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 80);
        output.writeBoolNoTag(isModify);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < fJPGCEEAPMO.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(fJPGCEEAPMO.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(nCBJIHNAOFG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(gPDNDCCLOOD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * fJPGCEEAPMO.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(fJPGCEEAPMO);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SetPlayerInfoScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 112: {
            // nCBJIHNAOFG
            nCBJIHNAOFG = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // gPDNDCCLOOD
            final int value = input.readInt32();
            if (MultiPathAvatarTypeOuterClass.MultiPathAvatarType.forNumber(value) != null) {
              gPDNDCCLOOD = value;
              bitField0_ |= 0x00000004;
            }
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // isModify
            isModify = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // fJPGCEEAPMO
            tag = input.readRepeatedMessage(fJPGCEEAPMO, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.nCBJIHNAOFG, nCBJIHNAOFG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeEnum(FieldNames.gPDNDCCLOOD, gPDNDCCLOOD, MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.isModify, isModify);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.fJPGCEEAPMO, fJPGCEEAPMO);
      }
      output.endObject();
    }

    @Override
    public SetPlayerInfoScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 579887521: {
            if (input.isAtField(FieldNames.nCBJIHNAOFG)) {
              if (!input.trySkipNullValue()) {
                nCBJIHNAOFG = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 779774377: {
            if (input.isAtField(FieldNames.gPDNDCCLOOD)) {
              if (!input.trySkipNullValue()) {
                final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value = input.readEnum(MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
                if (value != null) {
                  gPDNDCCLOOD = value.getNumber();
                  bitField0_ |= 0x00000004;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -394761596:
          case -604756625: {
            if (input.isAtField(FieldNames.isModify)) {
              if (!input.trySkipNullValue()) {
                isModify = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -897273191: {
            if (input.isAtField(FieldNames.fJPGCEEAPMO)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(fJPGCEEAPMO);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SetPlayerInfoScRsp clone() {
      return new SetPlayerInfoScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SetPlayerInfoScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SetPlayerInfoScRsp(), data).checkInitialized();
    }

    public static SetPlayerInfoScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetPlayerInfoScRsp(), input).checkInitialized();
    }

    public static SetPlayerInfoScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetPlayerInfoScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating SetPlayerInfoScRsp messages
     */
    public static MessageFactory<SetPlayerInfoScRsp> getFactory() {
      return SetPlayerInfoScRspFactory.INSTANCE;
    }

    private enum SetPlayerInfoScRspFactory implements MessageFactory<SetPlayerInfoScRsp> {
      INSTANCE;

      @Override
      public SetPlayerInfoScRsp create() {
        return SetPlayerInfoScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName nCBJIHNAOFG = FieldName.forField("NCBJIHNAOFG");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName gPDNDCCLOOD = FieldName.forField("GPDNDCCLOOD");

      static final FieldName isModify = FieldName.forField("isModify", "is_modify");

      static final FieldName fJPGCEEAPMO = FieldName.forField("FJPGCEEAPMO");
    }
  }
}
