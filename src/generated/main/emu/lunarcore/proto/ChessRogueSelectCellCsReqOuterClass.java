// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueSelectCellCsReqOuterClass {
  /**
   * Protobuf type {@code ChessRogueSelectCellCsReq}
   */
  public static final class ChessRogueSelectCellCsReq extends ProtoMessage<ChessRogueSelectCellCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 KMIPNOOKBMB = 10;</code>
     */
    private int kMIPNOOKBMB;

    /**
     * <code>optional uint32 DOLHMBKDJGL = 14;</code>
     */
    private int dOLHMBKDJGL;

    private ChessRogueSelectCellCsReq() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueSelectCellCsReq}
     */
    public static ChessRogueSelectCellCsReq newInstance() {
      return new ChessRogueSelectCellCsReq();
    }

    /**
     * <code>optional uint32 KMIPNOOKBMB = 10;</code>
     * @return whether the kMIPNOOKBMB field is set
     */
    public boolean hasKMIPNOOKBMB() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 KMIPNOOKBMB = 10;</code>
     * @return this
     */
    public ChessRogueSelectCellCsReq clearKMIPNOOKBMB() {
      bitField0_ &= ~0x00000001;
      kMIPNOOKBMB = 0;
      return this;
    }

    /**
     * <code>optional uint32 KMIPNOOKBMB = 10;</code>
     * @return the kMIPNOOKBMB
     */
    public int getKMIPNOOKBMB() {
      return kMIPNOOKBMB;
    }

    /**
     * <code>optional uint32 KMIPNOOKBMB = 10;</code>
     * @param value the kMIPNOOKBMB to set
     * @return this
     */
    public ChessRogueSelectCellCsReq setKMIPNOOKBMB(final int value) {
      bitField0_ |= 0x00000001;
      kMIPNOOKBMB = value;
      return this;
    }

    /**
     * <code>optional uint32 DOLHMBKDJGL = 14;</code>
     * @return whether the dOLHMBKDJGL field is set
     */
    public boolean hasDOLHMBKDJGL() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 DOLHMBKDJGL = 14;</code>
     * @return this
     */
    public ChessRogueSelectCellCsReq clearDOLHMBKDJGL() {
      bitField0_ &= ~0x00000002;
      dOLHMBKDJGL = 0;
      return this;
    }

    /**
     * <code>optional uint32 DOLHMBKDJGL = 14;</code>
     * @return the dOLHMBKDJGL
     */
    public int getDOLHMBKDJGL() {
      return dOLHMBKDJGL;
    }

    /**
     * <code>optional uint32 DOLHMBKDJGL = 14;</code>
     * @param value the dOLHMBKDJGL to set
     * @return this
     */
    public ChessRogueSelectCellCsReq setDOLHMBKDJGL(final int value) {
      bitField0_ |= 0x00000002;
      dOLHMBKDJGL = value;
      return this;
    }

    @Override
    public ChessRogueSelectCellCsReq copyFrom(final ChessRogueSelectCellCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kMIPNOOKBMB = other.kMIPNOOKBMB;
        dOLHMBKDJGL = other.dOLHMBKDJGL;
      }
      return this;
    }

    @Override
    public ChessRogueSelectCellCsReq mergeFrom(final ChessRogueSelectCellCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKMIPNOOKBMB()) {
        setKMIPNOOKBMB(other.kMIPNOOKBMB);
      }
      if (other.hasDOLHMBKDJGL()) {
        setDOLHMBKDJGL(other.dOLHMBKDJGL);
      }
      return this;
    }

    @Override
    public ChessRogueSelectCellCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kMIPNOOKBMB = 0;
      dOLHMBKDJGL = 0;
      return this;
    }

    @Override
    public ChessRogueSelectCellCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueSelectCellCsReq)) {
        return false;
      }
      ChessRogueSelectCellCsReq other = (ChessRogueSelectCellCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasKMIPNOOKBMB() || kMIPNOOKBMB == other.kMIPNOOKBMB)
        && (!hasDOLHMBKDJGL() || dOLHMBKDJGL == other.dOLHMBKDJGL);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(kMIPNOOKBMB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(dOLHMBKDJGL);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kMIPNOOKBMB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dOLHMBKDJGL);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueSelectCellCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // kMIPNOOKBMB
            kMIPNOOKBMB = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // dOLHMBKDJGL
            dOLHMBKDJGL = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.kMIPNOOKBMB, kMIPNOOKBMB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.dOLHMBKDJGL, dOLHMBKDJGL);
      }
      output.endObject();
    }

    @Override
    public ChessRogueSelectCellCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -2140515663: {
            if (input.isAtField(FieldNames.kMIPNOOKBMB)) {
              if (!input.trySkipNullValue()) {
                kMIPNOOKBMB = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1993372390: {
            if (input.isAtField(FieldNames.dOLHMBKDJGL)) {
              if (!input.trySkipNullValue()) {
                dOLHMBKDJGL = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueSelectCellCsReq clone() {
      return new ChessRogueSelectCellCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueSelectCellCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueSelectCellCsReq(), data).checkInitialized();
    }

    public static ChessRogueSelectCellCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueSelectCellCsReq(), input).checkInitialized();
    }

    public static ChessRogueSelectCellCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueSelectCellCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueSelectCellCsReq messages
     */
    public static MessageFactory<ChessRogueSelectCellCsReq> getFactory() {
      return ChessRogueSelectCellCsReqFactory.INSTANCE;
    }

    private enum ChessRogueSelectCellCsReqFactory implements MessageFactory<ChessRogueSelectCellCsReq> {
      INSTANCE;

      @Override
      public ChessRogueSelectCellCsReq create() {
        return ChessRogueSelectCellCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kMIPNOOKBMB = FieldName.forField("KMIPNOOKBMB");

      static final FieldName dOLHMBKDJGL = FieldName.forField("DOLHMBKDJGL");
    }
  }
}
