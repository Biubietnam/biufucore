// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChallengeSettleNotifyOuterClass {
  /**
   * Protobuf type {@code ChallengeSettleNotify}
   */
  public static final class ChallengeSettleNotify extends ProtoMessage<ChallengeSettleNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     * DMDFDIAMOAK LEOEJKAKMAN = 11;
     * </pre>
     *
     * <code>optional uint32 score_one = 1;</code>
     */
    private int scoreOne;

    /**
     * <code>optional uint32 challenge_id = 5;</code>
     */
    private int challengeId;

    /**
     * <code>optional uint32 IIJBMNKFMAA = 7;</code>
     */
    private int iIJBMNKFMAA;

    /**
     * <code>optional uint32 score_two = 12;</code>
     */
    private int scoreTwo;

    /**
     * <code>optional uint32 stars = 14;</code>
     */
    private int stars;

    /**
     * <code>optional bool is_win = 4;</code>
     */
    private boolean isWin;

    /**
     * <code>optional .ItemList reward = 10;</code>
     */
    private final ItemListOuterClass.ItemList reward = ItemListOuterClass.ItemList.newInstance();

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     */
    private final RepeatedInt dDDLFINIKDB = RepeatedInt.newEmptyInstance();

    private ChallengeSettleNotify() {
    }

    /**
     * @return a new empty instance of {@code ChallengeSettleNotify}
     */
    public static ChallengeSettleNotify newInstance() {
      return new ChallengeSettleNotify();
    }

    /**
     * <pre>
     * DMDFDIAMOAK LEOEJKAKMAN = 11;
     * </pre>
     *
     * <code>optional uint32 score_one = 1;</code>
     * @return whether the scoreOne field is set
     */
    public boolean hasScoreOne() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     * DMDFDIAMOAK LEOEJKAKMAN = 11;
     * </pre>
     *
     * <code>optional uint32 score_one = 1;</code>
     * @return this
     */
    public ChallengeSettleNotify clearScoreOne() {
      bitField0_ &= ~0x00000001;
      scoreOne = 0;
      return this;
    }

    /**
     * <pre>
     * DMDFDIAMOAK LEOEJKAKMAN = 11;
     * </pre>
     *
     * <code>optional uint32 score_one = 1;</code>
     * @return the scoreOne
     */
    public int getScoreOne() {
      return scoreOne;
    }

    /**
     * <pre>
     * DMDFDIAMOAK LEOEJKAKMAN = 11;
     * </pre>
     *
     * <code>optional uint32 score_one = 1;</code>
     * @param value the scoreOne to set
     * @return this
     */
    public ChallengeSettleNotify setScoreOne(final int value) {
      bitField0_ |= 0x00000001;
      scoreOne = value;
      return this;
    }

    /**
     * <code>optional uint32 challenge_id = 5;</code>
     * @return whether the challengeId field is set
     */
    public boolean hasChallengeId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 challenge_id = 5;</code>
     * @return this
     */
    public ChallengeSettleNotify clearChallengeId() {
      bitField0_ &= ~0x00000002;
      challengeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 challenge_id = 5;</code>
     * @return the challengeId
     */
    public int getChallengeId() {
      return challengeId;
    }

    /**
     * <code>optional uint32 challenge_id = 5;</code>
     * @param value the challengeId to set
     * @return this
     */
    public ChallengeSettleNotify setChallengeId(final int value) {
      bitField0_ |= 0x00000002;
      challengeId = value;
      return this;
    }

    /**
     * <code>optional uint32 IIJBMNKFMAA = 7;</code>
     * @return whether the iIJBMNKFMAA field is set
     */
    public boolean hasIIJBMNKFMAA() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 IIJBMNKFMAA = 7;</code>
     * @return this
     */
    public ChallengeSettleNotify clearIIJBMNKFMAA() {
      bitField0_ &= ~0x00000004;
      iIJBMNKFMAA = 0;
      return this;
    }

    /**
     * <code>optional uint32 IIJBMNKFMAA = 7;</code>
     * @return the iIJBMNKFMAA
     */
    public int getIIJBMNKFMAA() {
      return iIJBMNKFMAA;
    }

    /**
     * <code>optional uint32 IIJBMNKFMAA = 7;</code>
     * @param value the iIJBMNKFMAA to set
     * @return this
     */
    public ChallengeSettleNotify setIIJBMNKFMAA(final int value) {
      bitField0_ |= 0x00000004;
      iIJBMNKFMAA = value;
      return this;
    }

    /**
     * <code>optional uint32 score_two = 12;</code>
     * @return whether the scoreTwo field is set
     */
    public boolean hasScoreTwo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 score_two = 12;</code>
     * @return this
     */
    public ChallengeSettleNotify clearScoreTwo() {
      bitField0_ &= ~0x00000008;
      scoreTwo = 0;
      return this;
    }

    /**
     * <code>optional uint32 score_two = 12;</code>
     * @return the scoreTwo
     */
    public int getScoreTwo() {
      return scoreTwo;
    }

    /**
     * <code>optional uint32 score_two = 12;</code>
     * @param value the scoreTwo to set
     * @return this
     */
    public ChallengeSettleNotify setScoreTwo(final int value) {
      bitField0_ |= 0x00000008;
      scoreTwo = value;
      return this;
    }

    /**
     * <code>optional uint32 stars = 14;</code>
     * @return whether the stars field is set
     */
    public boolean hasStars() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 stars = 14;</code>
     * @return this
     */
    public ChallengeSettleNotify clearStars() {
      bitField0_ &= ~0x00000010;
      stars = 0;
      return this;
    }

    /**
     * <code>optional uint32 stars = 14;</code>
     * @return the stars
     */
    public int getStars() {
      return stars;
    }

    /**
     * <code>optional uint32 stars = 14;</code>
     * @param value the stars to set
     * @return this
     */
    public ChallengeSettleNotify setStars(final int value) {
      bitField0_ |= 0x00000010;
      stars = value;
      return this;
    }

    /**
     * <code>optional bool is_win = 4;</code>
     * @return whether the isWin field is set
     */
    public boolean hasIsWin() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional bool is_win = 4;</code>
     * @return this
     */
    public ChallengeSettleNotify clearIsWin() {
      bitField0_ &= ~0x00000020;
      isWin = false;
      return this;
    }

    /**
     * <code>optional bool is_win = 4;</code>
     * @return the isWin
     */
    public boolean getIsWin() {
      return isWin;
    }

    /**
     * <code>optional bool is_win = 4;</code>
     * @param value the isWin to set
     * @return this
     */
    public ChallengeSettleNotify setIsWin(final boolean value) {
      bitField0_ |= 0x00000020;
      isWin = value;
      return this;
    }

    /**
     * <code>optional .ItemList reward = 10;</code>
     * @return whether the reward field is set
     */
    public boolean hasReward() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional .ItemList reward = 10;</code>
     * @return this
     */
    public ChallengeSettleNotify clearReward() {
      bitField0_ &= ~0x00000040;
      reward.clear();
      return this;
    }

    /**
     * <code>optional .ItemList reward = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableReward()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemListOuterClass.ItemList getReward() {
      return reward;
    }

    /**
     * <code>optional .ItemList reward = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemListOuterClass.ItemList getMutableReward() {
      bitField0_ |= 0x00000040;
      return reward;
    }

    /**
     * <code>optional .ItemList reward = 10;</code>
     * @param value the reward to set
     * @return this
     */
    public ChallengeSettleNotify setReward(final ItemListOuterClass.ItemList value) {
      bitField0_ |= 0x00000040;
      reward.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     * @return whether the dDDLFINIKDB field is set
     */
    public boolean hasDDDLFINIKDB() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     * @return this
     */
    public ChallengeSettleNotify clearDDDLFINIKDB() {
      bitField0_ &= ~0x00000080;
      dDDLFINIKDB.clear();
      return this;
    }

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDDDLFINIKDB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getDDDLFINIKDB() {
      return dDDLFINIKDB;
    }

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableDDDLFINIKDB() {
      bitField0_ |= 0x00000080;
      return dDDLFINIKDB;
    }

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     * @param value the dDDLFINIKDB to add
     * @return this
     */
    public ChallengeSettleNotify addDDDLFINIKDB(final int value) {
      bitField0_ |= 0x00000080;
      dDDLFINIKDB.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 DDDLFINIKDB = 6;</code>
     * @param values the dDDLFINIKDB to add
     * @return this
     */
    public ChallengeSettleNotify addAllDDDLFINIKDB(final int... values) {
      bitField0_ |= 0x00000080;
      dDDLFINIKDB.addAll(values);
      return this;
    }

    @Override
    public ChallengeSettleNotify copyFrom(final ChallengeSettleNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        scoreOne = other.scoreOne;
        challengeId = other.challengeId;
        iIJBMNKFMAA = other.iIJBMNKFMAA;
        scoreTwo = other.scoreTwo;
        stars = other.stars;
        isWin = other.isWin;
        reward.copyFrom(other.reward);
        dDDLFINIKDB.copyFrom(other.dDDLFINIKDB);
      }
      return this;
    }

    @Override
    public ChallengeSettleNotify mergeFrom(final ChallengeSettleNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasScoreOne()) {
        setScoreOne(other.scoreOne);
      }
      if (other.hasChallengeId()) {
        setChallengeId(other.challengeId);
      }
      if (other.hasIIJBMNKFMAA()) {
        setIIJBMNKFMAA(other.iIJBMNKFMAA);
      }
      if (other.hasScoreTwo()) {
        setScoreTwo(other.scoreTwo);
      }
      if (other.hasStars()) {
        setStars(other.stars);
      }
      if (other.hasIsWin()) {
        setIsWin(other.isWin);
      }
      if (other.hasReward()) {
        getMutableReward().mergeFrom(other.reward);
      }
      if (other.hasDDDLFINIKDB()) {
        getMutableDDDLFINIKDB().addAll(other.dDDLFINIKDB);
      }
      return this;
    }

    @Override
    public ChallengeSettleNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      scoreOne = 0;
      challengeId = 0;
      iIJBMNKFMAA = 0;
      scoreTwo = 0;
      stars = 0;
      isWin = false;
      reward.clear();
      dDDLFINIKDB.clear();
      return this;
    }

    @Override
    public ChallengeSettleNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      reward.clearQuick();
      dDDLFINIKDB.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeSettleNotify)) {
        return false;
      }
      ChallengeSettleNotify other = (ChallengeSettleNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasScoreOne() || scoreOne == other.scoreOne)
        && (!hasChallengeId() || challengeId == other.challengeId)
        && (!hasIIJBMNKFMAA() || iIJBMNKFMAA == other.iIJBMNKFMAA)
        && (!hasScoreTwo() || scoreTwo == other.scoreTwo)
        && (!hasStars() || stars == other.stars)
        && (!hasIsWin() || isWin == other.isWin)
        && (!hasReward() || reward.equals(other.reward))
        && (!hasDDDLFINIKDB() || dDDLFINIKDB.equals(other.dDDLFINIKDB));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(scoreOne);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(challengeId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(iIJBMNKFMAA);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(scoreTwo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(stars);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 32);
        output.writeBoolNoTag(isWin);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(reward);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < dDDLFINIKDB.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(dDDLFINIKDB.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(scoreOne);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(challengeId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(iIJBMNKFMAA);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(scoreTwo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(stars);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(reward);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * dDDLFINIKDB.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(dDDLFINIKDB);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeSettleNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // scoreOne
            scoreOne = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // challengeId
            challengeId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // iIJBMNKFMAA
            iIJBMNKFMAA = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // scoreTwo
            scoreTwo = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // stars
            stars = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // isWin
            isWin = input.readBool();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // reward
            input.readMessage(reward);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // dDDLFINIKDB [packed=true]
            input.readPackedUInt32(dDDLFINIKDB, tag);
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 48: {
            // dDDLFINIKDB [packed=false]
            tag = input.readRepeatedUInt32(dDDLFINIKDB, tag);
            bitField0_ |= 0x00000080;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.scoreOne, scoreOne);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.challengeId, challengeId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.iIJBMNKFMAA, iIJBMNKFMAA);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.scoreTwo, scoreTwo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.stars, stars);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeBool(FieldNames.isWin, isWin);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeMessage(FieldNames.reward, reward);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedUInt32(FieldNames.dDDLFINIKDB, dDDLFINIKDB);
      }
      output.endObject();
    }

    @Override
    public ChallengeSettleNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -485517708:
          case 2129298233: {
            if (input.isAtField(FieldNames.scoreOne)) {
              if (!input.trySkipNullValue()) {
                scoreOne = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -689112866:
          case 112359031: {
            if (input.isAtField(FieldNames.challengeId)) {
              if (!input.trySkipNullValue()) {
                challengeId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 882480025: {
            if (input.isAtField(FieldNames.iIJBMNKFMAA)) {
              if (!input.trySkipNullValue()) {
                iIJBMNKFMAA = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -485512614:
          case 2129303327: {
            if (input.isAtField(FieldNames.scoreTwo)) {
              if (!input.trySkipNullValue()) {
                scoreTwo = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 109757537: {
            if (input.isAtField(FieldNames.stars)) {
              if (!input.trySkipNullValue()) {
                stars = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 100482642:
          case -1179753657: {
            if (input.isAtField(FieldNames.isWin)) {
              if (!input.trySkipNullValue()) {
                isWin = input.readBool();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -934326481: {
            if (input.isAtField(FieldNames.reward)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(reward);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1589917309: {
            if (input.isAtField(FieldNames.dDDLFINIKDB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(dDDLFINIKDB);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeSettleNotify clone() {
      return new ChallengeSettleNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeSettleNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeSettleNotify(), data).checkInitialized();
    }

    public static ChallengeSettleNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeSettleNotify(), input).checkInitialized();
    }

    public static ChallengeSettleNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeSettleNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeSettleNotify messages
     */
    public static MessageFactory<ChallengeSettleNotify> getFactory() {
      return ChallengeSettleNotifyFactory.INSTANCE;
    }

    private enum ChallengeSettleNotifyFactory implements MessageFactory<ChallengeSettleNotify> {
      INSTANCE;

      @Override
      public ChallengeSettleNotify create() {
        return ChallengeSettleNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName scoreOne = FieldName.forField("scoreOne", "score_one");

      static final FieldName challengeId = FieldName.forField("challengeId", "challenge_id");

      static final FieldName iIJBMNKFMAA = FieldName.forField("IIJBMNKFMAA");

      static final FieldName scoreTwo = FieldName.forField("scoreTwo", "score_two");

      static final FieldName stars = FieldName.forField("stars");

      static final FieldName isWin = FieldName.forField("isWin", "is_win");

      static final FieldName reward = FieldName.forField("reward");

      static final FieldName dDDLFINIKDB = FieldName.forField("DDDLFINIKDB");
    }
  }
}
