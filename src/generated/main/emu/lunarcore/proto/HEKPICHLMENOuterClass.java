// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class HEKPICHLMENOuterClass {
  /**
   * Protobuf type {@code HEKPICHLMEN}
   */
  public static final class HEKPICHLMEN extends ProtoMessage<HEKPICHLMEN> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 level_id = 5;</code>
     */
    private int levelId;

    /**
     * <code>optional uint32 AEEMPPOFGBN = 13;</code>
     */
    private int aEEMPPOFGBN;

    private HEKPICHLMEN() {
    }

    /**
     * @return a new empty instance of {@code HEKPICHLMEN}
     */
    public static HEKPICHLMEN newInstance() {
      return new HEKPICHLMEN();
    }

    /**
     * <code>optional uint32 level_id = 5;</code>
     * @return whether the levelId field is set
     */
    public boolean hasLevelId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 level_id = 5;</code>
     * @return this
     */
    public HEKPICHLMEN clearLevelId() {
      bitField0_ &= ~0x00000001;
      levelId = 0;
      return this;
    }

    /**
     * <code>optional uint32 level_id = 5;</code>
     * @return the levelId
     */
    public int getLevelId() {
      return levelId;
    }

    /**
     * <code>optional uint32 level_id = 5;</code>
     * @param value the levelId to set
     * @return this
     */
    public HEKPICHLMEN setLevelId(final int value) {
      bitField0_ |= 0x00000001;
      levelId = value;
      return this;
    }

    /**
     * <code>optional uint32 AEEMPPOFGBN = 13;</code>
     * @return whether the aEEMPPOFGBN field is set
     */
    public boolean hasAEEMPPOFGBN() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 AEEMPPOFGBN = 13;</code>
     * @return this
     */
    public HEKPICHLMEN clearAEEMPPOFGBN() {
      bitField0_ &= ~0x00000002;
      aEEMPPOFGBN = 0;
      return this;
    }

    /**
     * <code>optional uint32 AEEMPPOFGBN = 13;</code>
     * @return the aEEMPPOFGBN
     */
    public int getAEEMPPOFGBN() {
      return aEEMPPOFGBN;
    }

    /**
     * <code>optional uint32 AEEMPPOFGBN = 13;</code>
     * @param value the aEEMPPOFGBN to set
     * @return this
     */
    public HEKPICHLMEN setAEEMPPOFGBN(final int value) {
      bitField0_ |= 0x00000002;
      aEEMPPOFGBN = value;
      return this;
    }

    @Override
    public HEKPICHLMEN copyFrom(final HEKPICHLMEN other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        levelId = other.levelId;
        aEEMPPOFGBN = other.aEEMPPOFGBN;
      }
      return this;
    }

    @Override
    public HEKPICHLMEN mergeFrom(final HEKPICHLMEN other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLevelId()) {
        setLevelId(other.levelId);
      }
      if (other.hasAEEMPPOFGBN()) {
        setAEEMPPOFGBN(other.aEEMPPOFGBN);
      }
      return this;
    }

    @Override
    public HEKPICHLMEN clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      levelId = 0;
      aEEMPPOFGBN = 0;
      return this;
    }

    @Override
    public HEKPICHLMEN clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof HEKPICHLMEN)) {
        return false;
      }
      HEKPICHLMEN other = (HEKPICHLMEN) o;
      return bitField0_ == other.bitField0_
        && (!hasLevelId() || levelId == other.levelId)
        && (!hasAEEMPPOFGBN() || aEEMPPOFGBN == other.aEEMPPOFGBN);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(levelId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(aEEMPPOFGBN);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(levelId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aEEMPPOFGBN);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public HEKPICHLMEN mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // levelId
            levelId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // aEEMPPOFGBN
            aEEMPPOFGBN = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.levelId, levelId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.aEEMPPOFGBN, aEEMPPOFGBN);
      }
      output.endObject();
    }

    @Override
    public HEKPICHLMEN mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 69784511:
          case -2131626058: {
            if (input.isAtField(FieldNames.levelId)) {
              if (!input.trySkipNullValue()) {
                levelId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -268851632: {
            if (input.isAtField(FieldNames.aEEMPPOFGBN)) {
              if (!input.trySkipNullValue()) {
                aEEMPPOFGBN = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public HEKPICHLMEN clone() {
      return new HEKPICHLMEN().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static HEKPICHLMEN parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new HEKPICHLMEN(), data).checkInitialized();
    }

    public static HEKPICHLMEN parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HEKPICHLMEN(), input).checkInitialized();
    }

    public static HEKPICHLMEN parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HEKPICHLMEN(), input).checkInitialized();
    }

    /**
     * @return factory for creating HEKPICHLMEN messages
     */
    public static MessageFactory<HEKPICHLMEN> getFactory() {
      return HEKPICHLMENFactory.INSTANCE;
    }

    private enum HEKPICHLMENFactory implements MessageFactory<HEKPICHLMEN> {
      INSTANCE;

      @Override
      public HEKPICHLMEN create() {
        return HEKPICHLMEN.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName levelId = FieldName.forField("levelId", "level_id");

      static final FieldName aEEMPPOFGBN = FieldName.forField("AEEMPPOFGBN");
    }
  }
}
