// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class MissionSyncOuterClass {
  /**
   * Protobuf type {@code MissionSync}
   */
  public static final class MissionSync extends ProtoMessage<MissionSync> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     */
    private final RepeatedInt eKOKENIBLND = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     */
    private final RepeatedInt aNJMGEHLOHE = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     */
    private final RepeatedInt fHJPGKOKIMP = RepeatedInt.newEmptyInstance();

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     */
    private final RepeatedInt dJOBGKDFLBI = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     */
    private final RepeatedMessage<MissionOuterClass.Mission> missionList = RepeatedMessage.newEmptyInstance(MissionOuterClass.Mission.getFactory());

    private MissionSync() {
    }

    /**
     * @return a new empty instance of {@code MissionSync}
     */
    public static MissionSync newInstance() {
      return new MissionSync();
    }

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     * @return whether the eKOKENIBLND field is set
     */
    public boolean hasEKOKENIBLND() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     * @return this
     */
    public MissionSync clearEKOKENIBLND() {
      bitField0_ &= ~0x00000001;
      eKOKENIBLND.clear();
      return this;
    }

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEKOKENIBLND()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getEKOKENIBLND() {
      return eKOKENIBLND;
    }

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableEKOKENIBLND() {
      bitField0_ |= 0x00000001;
      return eKOKENIBLND;
    }

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     * @param value the eKOKENIBLND to add
     * @return this
     */
    public MissionSync addEKOKENIBLND(final int value) {
      bitField0_ |= 0x00000001;
      eKOKENIBLND.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 EKOKENIBLND = 3;</code>
     * @param values the eKOKENIBLND to add
     * @return this
     */
    public MissionSync addAllEKOKENIBLND(final int... values) {
      bitField0_ |= 0x00000001;
      eKOKENIBLND.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     * @return whether the aNJMGEHLOHE field is set
     */
    public boolean hasANJMGEHLOHE() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     * @return this
     */
    public MissionSync clearANJMGEHLOHE() {
      bitField0_ &= ~0x00000002;
      aNJMGEHLOHE.clear();
      return this;
    }

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableANJMGEHLOHE()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getANJMGEHLOHE() {
      return aNJMGEHLOHE;
    }

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableANJMGEHLOHE() {
      bitField0_ |= 0x00000002;
      return aNJMGEHLOHE;
    }

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     * @param value the aNJMGEHLOHE to add
     * @return this
     */
    public MissionSync addANJMGEHLOHE(final int value) {
      bitField0_ |= 0x00000002;
      aNJMGEHLOHE.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 ANJMGEHLOHE = 5;</code>
     * @param values the aNJMGEHLOHE to add
     * @return this
     */
    public MissionSync addAllANJMGEHLOHE(final int... values) {
      bitField0_ |= 0x00000002;
      aNJMGEHLOHE.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     * @return whether the fHJPGKOKIMP field is set
     */
    public boolean hasFHJPGKOKIMP() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     * @return this
     */
    public MissionSync clearFHJPGKOKIMP() {
      bitField0_ &= ~0x00000004;
      fHJPGKOKIMP.clear();
      return this;
    }

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFHJPGKOKIMP()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFHJPGKOKIMP() {
      return fHJPGKOKIMP;
    }

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFHJPGKOKIMP() {
      bitField0_ |= 0x00000004;
      return fHJPGKOKIMP;
    }

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     * @param value the fHJPGKOKIMP to add
     * @return this
     */
    public MissionSync addFHJPGKOKIMP(final int value) {
      bitField0_ |= 0x00000004;
      fHJPGKOKIMP.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 FHJPGKOKIMP = 11;</code>
     * @param values the fHJPGKOKIMP to add
     * @return this
     */
    public MissionSync addAllFHJPGKOKIMP(final int... values) {
      bitField0_ |= 0x00000004;
      fHJPGKOKIMP.addAll(values);
      return this;
    }

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     * @return whether the dJOBGKDFLBI field is set
     */
    public boolean hasDJOBGKDFLBI() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     * @return this
     */
    public MissionSync clearDJOBGKDFLBI() {
      bitField0_ &= ~0x00000008;
      dJOBGKDFLBI.clear();
      return this;
    }

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDJOBGKDFLBI()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getDJOBGKDFLBI() {
      return dJOBGKDFLBI;
    }

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableDJOBGKDFLBI() {
      bitField0_ |= 0x00000008;
      return dJOBGKDFLBI;
    }

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     * @param value the dJOBGKDFLBI to add
     * @return this
     */
    public MissionSync addDJOBGKDFLBI(final int value) {
      bitField0_ |= 0x00000008;
      dJOBGKDFLBI.add(value);
      return this;
    }

    /**
     * <pre>
     * repeated LFNIHOHMNPN EGKMFDANDLN = 4;
     * repeated OBEPIHAHMDF LGGFKNGGBJD = 10;
     * </pre>
     *
     * <code>repeated uint32 DJOBGKDFLBI = 12;</code>
     * @param values the dJOBGKDFLBI to add
     * @return this
     */
    public MissionSync addAllDJOBGKDFLBI(final int... values) {
      bitField0_ |= 0x00000008;
      dJOBGKDFLBI.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     * @return whether the missionList field is set
     */
    public boolean hasMissionList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     * @return this
     */
    public MissionSync clearMissionList() {
      bitField0_ &= ~0x00000010;
      missionList.clear();
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMissionList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMissionList() {
      return missionList;
    }

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMutableMissionList() {
      bitField0_ |= 0x00000010;
      return missionList;
    }

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     * @param value the missionList to add
     * @return this
     */
    public MissionSync addMissionList(final MissionOuterClass.Mission value) {
      bitField0_ |= 0x00000010;
      missionList.add(value);
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 7;</code>
     * @param values the missionList to add
     * @return this
     */
    public MissionSync addAllMissionList(final MissionOuterClass.Mission... values) {
      bitField0_ |= 0x00000010;
      missionList.addAll(values);
      return this;
    }

    @Override
    public MissionSync copyFrom(final MissionSync other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        eKOKENIBLND.copyFrom(other.eKOKENIBLND);
        aNJMGEHLOHE.copyFrom(other.aNJMGEHLOHE);
        fHJPGKOKIMP.copyFrom(other.fHJPGKOKIMP);
        dJOBGKDFLBI.copyFrom(other.dJOBGKDFLBI);
        missionList.copyFrom(other.missionList);
      }
      return this;
    }

    @Override
    public MissionSync mergeFrom(final MissionSync other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasEKOKENIBLND()) {
        getMutableEKOKENIBLND().addAll(other.eKOKENIBLND);
      }
      if (other.hasANJMGEHLOHE()) {
        getMutableANJMGEHLOHE().addAll(other.aNJMGEHLOHE);
      }
      if (other.hasFHJPGKOKIMP()) {
        getMutableFHJPGKOKIMP().addAll(other.fHJPGKOKIMP);
      }
      if (other.hasDJOBGKDFLBI()) {
        getMutableDJOBGKDFLBI().addAll(other.dJOBGKDFLBI);
      }
      if (other.hasMissionList()) {
        getMutableMissionList().addAll(other.missionList);
      }
      return this;
    }

    @Override
    public MissionSync clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      eKOKENIBLND.clear();
      aNJMGEHLOHE.clear();
      fHJPGKOKIMP.clear();
      dJOBGKDFLBI.clear();
      missionList.clear();
      return this;
    }

    @Override
    public MissionSync clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      eKOKENIBLND.clear();
      aNJMGEHLOHE.clear();
      fHJPGKOKIMP.clear();
      dJOBGKDFLBI.clear();
      missionList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MissionSync)) {
        return false;
      }
      MissionSync other = (MissionSync) o;
      return bitField0_ == other.bitField0_
        && (!hasEKOKENIBLND() || eKOKENIBLND.equals(other.eKOKENIBLND))
        && (!hasANJMGEHLOHE() || aNJMGEHLOHE.equals(other.aNJMGEHLOHE))
        && (!hasFHJPGKOKIMP() || fHJPGKOKIMP.equals(other.fHJPGKOKIMP))
        && (!hasDJOBGKDFLBI() || dJOBGKDFLBI.equals(other.dJOBGKDFLBI))
        && (!hasMissionList() || missionList.equals(other.missionList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < eKOKENIBLND.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(eKOKENIBLND.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < aNJMGEHLOHE.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(aNJMGEHLOHE.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < fHJPGKOKIMP.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(fHJPGKOKIMP.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < dJOBGKDFLBI.length(); i++) {
          output.writeRawByte((byte) 96);
          output.writeUInt32NoTag(dJOBGKDFLBI.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < missionList.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(missionList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * eKOKENIBLND.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(eKOKENIBLND);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * aNJMGEHLOHE.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aNJMGEHLOHE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * fHJPGKOKIMP.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(fHJPGKOKIMP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * dJOBGKDFLBI.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(dJOBGKDFLBI);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * missionList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(missionList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MissionSync mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 26: {
            // eKOKENIBLND [packed=true]
            input.readPackedUInt32(eKOKENIBLND, tag);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // aNJMGEHLOHE [packed=true]
            input.readPackedUInt32(aNJMGEHLOHE, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // fHJPGKOKIMP [packed=true]
            input.readPackedUInt32(fHJPGKOKIMP, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // dJOBGKDFLBI [packed=true]
            input.readPackedUInt32(dJOBGKDFLBI, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // missionList
            tag = input.readRepeatedMessage(missionList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // eKOKENIBLND [packed=false]
            tag = input.readRepeatedUInt32(eKOKENIBLND, tag);
            bitField0_ |= 0x00000001;
            break;
          }
          case 40: {
            // aNJMGEHLOHE [packed=false]
            tag = input.readRepeatedUInt32(aNJMGEHLOHE, tag);
            bitField0_ |= 0x00000002;
            break;
          }
          case 88: {
            // fHJPGKOKIMP [packed=false]
            tag = input.readRepeatedUInt32(fHJPGKOKIMP, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 96: {
            // dJOBGKDFLBI [packed=false]
            tag = input.readRepeatedUInt32(dJOBGKDFLBI, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedUInt32(FieldNames.eKOKENIBLND, eKOKENIBLND);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.aNJMGEHLOHE, aNJMGEHLOHE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.fHJPGKOKIMP, fHJPGKOKIMP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.dJOBGKDFLBI, dJOBGKDFLBI);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.missionList, missionList);
      }
      output.endObject();
    }

    @Override
    public MissionSync mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1366651650: {
            if (input.isAtField(FieldNames.eKOKENIBLND)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(eKOKENIBLND);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2091359162: {
            if (input.isAtField(FieldNames.aNJMGEHLOHE)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aNJMGEHLOHE);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -307681436: {
            if (input.isAtField(FieldNames.fHJPGKOKIMP)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(fHJPGKOKIMP);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -488956812: {
            if (input.isAtField(FieldNames.dJOBGKDFLBI)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(dJOBGKDFLBI);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1383006282:
          case -58851471: {
            if (input.isAtField(FieldNames.missionList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(missionList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MissionSync clone() {
      return new MissionSync().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MissionSync parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MissionSync(), data).checkInitialized();
    }

    public static MissionSync parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MissionSync(), input).checkInitialized();
    }

    public static MissionSync parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MissionSync(), input).checkInitialized();
    }

    /**
     * @return factory for creating MissionSync messages
     */
    public static MessageFactory<MissionSync> getFactory() {
      return MissionSyncFactory.INSTANCE;
    }

    private enum MissionSyncFactory implements MessageFactory<MissionSync> {
      INSTANCE;

      @Override
      public MissionSync create() {
        return MissionSync.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName eKOKENIBLND = FieldName.forField("EKOKENIBLND");

      static final FieldName aNJMGEHLOHE = FieldName.forField("ANJMGEHLOHE");

      static final FieldName fHJPGKOKIMP = FieldName.forField("FHJPGKOKIMP");

      static final FieldName dJOBGKDFLBI = FieldName.forField("DJOBGKDFLBI");

      static final FieldName missionList = FieldName.forField("missionList", "mission_list");
    }
  }
}
