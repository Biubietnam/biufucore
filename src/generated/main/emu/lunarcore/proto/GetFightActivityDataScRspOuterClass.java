// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetFightActivityDataScRspOuterClass {
  /**
   * Protobuf type {@code GetFightActivityDataScRsp}
   */
  public static final class GetFightActivityDataScRsp extends ProtoMessage<GetFightActivityDataScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     * FMAEHNJNGIG extra_info = 4;
     * </pre>
     *
     * <code>optional uint32 world_level = 5;</code>
     */
    private int worldLevel;

    /**
     * <code>optional uint32 retcode = 14;</code>
     */
    private int retcode;

    /**
     * <code>optional bool AGGMHDOKDPM = 2;</code>
     */
    private boolean aGGMHDOKDPM;

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     */
    private final RepeatedMessage<JDNHCNHAMMLEntry> jDNHCNHAMML = RepeatedMessage.newEmptyInstance(JDNHCNHAMMLEntry.getFactory());

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     */
    private final RepeatedMessage<FightActivityGroupOuterClass.FightActivityGroup> dPFKPKDKONP = RepeatedMessage.newEmptyInstance(FightActivityGroupOuterClass.FightActivityGroup.getFactory());

    private GetFightActivityDataScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetFightActivityDataScRsp}
     */
    public static GetFightActivityDataScRsp newInstance() {
      return new GetFightActivityDataScRsp();
    }

    /**
     * <pre>
     * FMAEHNJNGIG extra_info = 4;
     * </pre>
     *
     * <code>optional uint32 world_level = 5;</code>
     * @return whether the worldLevel field is set
     */
    public boolean hasWorldLevel() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     * FMAEHNJNGIG extra_info = 4;
     * </pre>
     *
     * <code>optional uint32 world_level = 5;</code>
     * @return this
     */
    public GetFightActivityDataScRsp clearWorldLevel() {
      bitField0_ &= ~0x00000001;
      worldLevel = 0;
      return this;
    }

    /**
     * <pre>
     * FMAEHNJNGIG extra_info = 4;
     * </pre>
     *
     * <code>optional uint32 world_level = 5;</code>
     * @return the worldLevel
     */
    public int getWorldLevel() {
      return worldLevel;
    }

    /**
     * <pre>
     * FMAEHNJNGIG extra_info = 4;
     * </pre>
     *
     * <code>optional uint32 world_level = 5;</code>
     * @param value the worldLevel to set
     * @return this
     */
    public GetFightActivityDataScRsp setWorldLevel(final int value) {
      bitField0_ |= 0x00000001;
      worldLevel = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @return this
     */
    public GetFightActivityDataScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetFightActivityDataScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool AGGMHDOKDPM = 2;</code>
     * @return whether the aGGMHDOKDPM field is set
     */
    public boolean hasAGGMHDOKDPM() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool AGGMHDOKDPM = 2;</code>
     * @return this
     */
    public GetFightActivityDataScRsp clearAGGMHDOKDPM() {
      bitField0_ &= ~0x00000004;
      aGGMHDOKDPM = false;
      return this;
    }

    /**
     * <code>optional bool AGGMHDOKDPM = 2;</code>
     * @return the aGGMHDOKDPM
     */
    public boolean getAGGMHDOKDPM() {
      return aGGMHDOKDPM;
    }

    /**
     * <code>optional bool AGGMHDOKDPM = 2;</code>
     * @param value the aGGMHDOKDPM to set
     * @return this
     */
    public GetFightActivityDataScRsp setAGGMHDOKDPM(final boolean value) {
      bitField0_ |= 0x00000004;
      aGGMHDOKDPM = value;
      return this;
    }

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     * @return whether the jDNHCNHAMML field is set
     */
    public boolean hasJDNHCNHAMML() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     * @return this
     */
    public GetFightActivityDataScRsp clearJDNHCNHAMML() {
      bitField0_ &= ~0x00000008;
      jDNHCNHAMML.clear();
      return this;
    }

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableJDNHCNHAMML()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<JDNHCNHAMMLEntry> getJDNHCNHAMML() {
      return jDNHCNHAMML;
    }

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<JDNHCNHAMMLEntry> getMutableJDNHCNHAMML() {
      bitField0_ |= 0x00000008;
      return jDNHCNHAMML;
    }

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     * @param value the jDNHCNHAMML to add
     * @return this
     */
    public GetFightActivityDataScRsp addJDNHCNHAMML(final JDNHCNHAMMLEntry value) {
      bitField0_ |= 0x00000008;
      jDNHCNHAMML.add(value);
      return this;
    }

    /**
     * <code>repeated .GetFightActivityDataScRsp.JDNHCNHAMMLEntry JDNHCNHAMML = 7;</code>
     * @param values the jDNHCNHAMML to add
     * @return this
     */
    public GetFightActivityDataScRsp addAllJDNHCNHAMML(final JDNHCNHAMMLEntry... values) {
      bitField0_ |= 0x00000008;
      jDNHCNHAMML.addAll(values);
      return this;
    }

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     * @return whether the dPFKPKDKONP field is set
     */
    public boolean hasDPFKPKDKONP() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     * @return this
     */
    public GetFightActivityDataScRsp clearDPFKPKDKONP() {
      bitField0_ &= ~0x00000010;
      dPFKPKDKONP.clear();
      return this;
    }

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDPFKPKDKONP()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<FightActivityGroupOuterClass.FightActivityGroup> getDPFKPKDKONP() {
      return dPFKPKDKONP;
    }

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<FightActivityGroupOuterClass.FightActivityGroup> getMutableDPFKPKDKONP(
        ) {
      bitField0_ |= 0x00000010;
      return dPFKPKDKONP;
    }

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     * @param value the dPFKPKDKONP to add
     * @return this
     */
    public GetFightActivityDataScRsp addDPFKPKDKONP(
        final FightActivityGroupOuterClass.FightActivityGroup value) {
      bitField0_ |= 0x00000010;
      dPFKPKDKONP.add(value);
      return this;
    }

    /**
     * <code>repeated .FightActivityGroup DPFKPKDKONP = 8;</code>
     * @param values the dPFKPKDKONP to add
     * @return this
     */
    public GetFightActivityDataScRsp addAllDPFKPKDKONP(
        final FightActivityGroupOuterClass.FightActivityGroup... values) {
      bitField0_ |= 0x00000010;
      dPFKPKDKONP.addAll(values);
      return this;
    }

    @Override
    public GetFightActivityDataScRsp copyFrom(final GetFightActivityDataScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        worldLevel = other.worldLevel;
        retcode = other.retcode;
        aGGMHDOKDPM = other.aGGMHDOKDPM;
        jDNHCNHAMML.copyFrom(other.jDNHCNHAMML);
        dPFKPKDKONP.copyFrom(other.dPFKPKDKONP);
      }
      return this;
    }

    @Override
    public GetFightActivityDataScRsp mergeFrom(final GetFightActivityDataScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasWorldLevel()) {
        setWorldLevel(other.worldLevel);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasAGGMHDOKDPM()) {
        setAGGMHDOKDPM(other.aGGMHDOKDPM);
      }
      if (other.hasJDNHCNHAMML()) {
        getMutableJDNHCNHAMML().addAll(other.jDNHCNHAMML);
      }
      if (other.hasDPFKPKDKONP()) {
        getMutableDPFKPKDKONP().addAll(other.dPFKPKDKONP);
      }
      return this;
    }

    @Override
    public GetFightActivityDataScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      worldLevel = 0;
      retcode = 0;
      aGGMHDOKDPM = false;
      jDNHCNHAMML.clear();
      dPFKPKDKONP.clear();
      return this;
    }

    @Override
    public GetFightActivityDataScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      jDNHCNHAMML.clearQuick();
      dPFKPKDKONP.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetFightActivityDataScRsp)) {
        return false;
      }
      GetFightActivityDataScRsp other = (GetFightActivityDataScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasWorldLevel() || worldLevel == other.worldLevel)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasAGGMHDOKDPM() || aGGMHDOKDPM == other.aGGMHDOKDPM)
        && (!hasJDNHCNHAMML() || jDNHCNHAMML.equals(other.jDNHCNHAMML))
        && (!hasDPFKPKDKONP() || dPFKPKDKONP.equals(other.dPFKPKDKONP));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(worldLevel);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 16);
        output.writeBoolNoTag(aGGMHDOKDPM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < jDNHCNHAMML.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(jDNHCNHAMML.get(i));
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < dPFKPKDKONP.length(); i++) {
          output.writeRawByte((byte) 66);
          output.writeMessageNoTag(dPFKPKDKONP.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(worldLevel);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * jDNHCNHAMML.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(jDNHCNHAMML);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * dPFKPKDKONP.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(dPFKPKDKONP);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetFightActivityDataScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // worldLevel
            worldLevel = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // aGGMHDOKDPM
            aGGMHDOKDPM = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // jDNHCNHAMML
            tag = input.readRepeatedMessage(jDNHCNHAMML, tag);
            bitField0_ |= 0x00000008;
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // dPFKPKDKONP
            tag = input.readRepeatedMessage(dPFKPKDKONP, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.worldLevel, worldLevel);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.aGGMHDOKDPM, aGGMHDOKDPM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.jDNHCNHAMML, jDNHCNHAMML);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.dPFKPKDKONP, dPFKPKDKONP);
      }
      output.endObject();
    }

    @Override
    public GetFightActivityDataScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 440007442:
          case 1305257111: {
            if (input.isAtField(FieldNames.worldLevel)) {
              if (!input.trySkipNullValue()) {
                worldLevel = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1164681565: {
            if (input.isAtField(FieldNames.aGGMHDOKDPM)) {
              if (!input.trySkipNullValue()) {
                aGGMHDOKDPM = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1287848300: {
            if (input.isAtField(FieldNames.jDNHCNHAMML)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(jDNHCNHAMML);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -382674978: {
            if (input.isAtField(FieldNames.dPFKPKDKONP)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(dPFKPKDKONP);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetFightActivityDataScRsp clone() {
      return new GetFightActivityDataScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetFightActivityDataScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetFightActivityDataScRsp(), data).checkInitialized();
    }

    public static GetFightActivityDataScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetFightActivityDataScRsp(), input).checkInitialized();
    }

    public static GetFightActivityDataScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetFightActivityDataScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetFightActivityDataScRsp messages
     */
    public static MessageFactory<GetFightActivityDataScRsp> getFactory() {
      return GetFightActivityDataScRspFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code JDNHCNHAMMLEntry}
     */
    public static final class JDNHCNHAMMLEntry extends ProtoMessage<JDNHCNHAMMLEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional uint32 value = 2;</code>
       */
      private int value_;

      private JDNHCNHAMMLEntry() {
      }

      /**
       * @return a new empty instance of {@code JDNHCNHAMMLEntry}
       */
      public static JDNHCNHAMMLEntry newInstance() {
        return new JDNHCNHAMMLEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public JDNHCNHAMMLEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public JDNHCNHAMMLEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return this
       */
      public JDNHCNHAMMLEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public JDNHCNHAMMLEntry setValue(final int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public JDNHCNHAMMLEntry copyFrom(final JDNHCNHAMMLEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public JDNHCNHAMMLEntry mergeFrom(final JDNHCNHAMMLEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public JDNHCNHAMMLEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = 0;
        return this;
      }

      @Override
      public JDNHCNHAMMLEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof JDNHCNHAMMLEntry)) {
          return false;
        }
        JDNHCNHAMMLEntry other = (JDNHCNHAMMLEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public JDNHCNHAMMLEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeUInt32(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public JDNHCNHAMMLEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public JDNHCNHAMMLEntry clone() {
        return new JDNHCNHAMMLEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static JDNHCNHAMMLEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new JDNHCNHAMMLEntry(), data).checkInitialized();
      }

      public static JDNHCNHAMMLEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new JDNHCNHAMMLEntry(), input).checkInitialized();
      }

      public static JDNHCNHAMMLEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new JDNHCNHAMMLEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating JDNHCNHAMMLEntry messages
       */
      public static MessageFactory<JDNHCNHAMMLEntry> getFactory() {
        return JDNHCNHAMMLEntryFactory.INSTANCE;
      }

      private enum JDNHCNHAMMLEntryFactory implements MessageFactory<JDNHCNHAMMLEntry> {
        INSTANCE;

        @Override
        public JDNHCNHAMMLEntry create() {
          return JDNHCNHAMMLEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum GetFightActivityDataScRspFactory implements MessageFactory<GetFightActivityDataScRsp> {
      INSTANCE;

      @Override
      public GetFightActivityDataScRsp create() {
        return GetFightActivityDataScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName worldLevel = FieldName.forField("worldLevel", "world_level");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName aGGMHDOKDPM = FieldName.forField("AGGMHDOKDPM");

      static final FieldName jDNHCNHAMML = FieldName.forField("JDNHCNHAMML");

      static final FieldName dPFKPKDKONP = FieldName.forField("DPFKPKDKONP");
    }
  }
}
