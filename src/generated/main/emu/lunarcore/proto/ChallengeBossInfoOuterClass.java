// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChallengeBossInfoOuterClass {
  /**
   * Protobuf type {@code ChallengeBossInfo}
   */
  public static final class ChallengeBossInfo extends ProtoMessage<ChallengeBossInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional bool LBOJBINABDG = 13;</code>
     */
    private boolean lBOJBINABDG;

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo second_node = 1;</code>
     */
    private final ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo secondNode = ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo.newInstance();

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo first_node = 15;</code>
     */
    private final ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo firstNode = ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo.newInstance();

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     */
    private final RepeatedInt bADPGANOHKM = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     */
    private final RepeatedInt pPKNDBEAHCA = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     */
    private final RepeatedMessage<EquipmentsEntry> equipments = RepeatedMessage.newEmptyInstance(EquipmentsEntry.getFactory());

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     */
    private final RepeatedMessage<RelicsEntry> relics = RepeatedMessage.newEmptyInstance(RelicsEntry.getFactory());

    private ChallengeBossInfo() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossInfo}
     */
    public static ChallengeBossInfo newInstance() {
      return new ChallengeBossInfo();
    }

    /**
     * <code>optional bool LBOJBINABDG = 13;</code>
     * @return whether the lBOJBINABDG field is set
     */
    public boolean hasLBOJBINABDG() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional bool LBOJBINABDG = 13;</code>
     * @return this
     */
    public ChallengeBossInfo clearLBOJBINABDG() {
      bitField0_ &= ~0x00000001;
      lBOJBINABDG = false;
      return this;
    }

    /**
     * <code>optional bool LBOJBINABDG = 13;</code>
     * @return the lBOJBINABDG
     */
    public boolean getLBOJBINABDG() {
      return lBOJBINABDG;
    }

    /**
     * <code>optional bool LBOJBINABDG = 13;</code>
     * @param value the lBOJBINABDG to set
     * @return this
     */
    public ChallengeBossInfo setLBOJBINABDG(final boolean value) {
      bitField0_ |= 0x00000001;
      lBOJBINABDG = value;
      return this;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo second_node = 1;</code>
     * @return whether the secondNode field is set
     */
    public boolean hasSecondNode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo second_node = 1;</code>
     * @return this
     */
    public ChallengeBossInfo clearSecondNode() {
      bitField0_ &= ~0x00000002;
      secondNode.clear();
      return this;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo second_node = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSecondNode()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo getSecondNode() {
      return secondNode;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo second_node = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo getMutableSecondNode() {
      bitField0_ |= 0x00000002;
      return secondNode;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo second_node = 1;</code>
     * @param value the secondNode to set
     * @return this
     */
    public ChallengeBossInfo setSecondNode(
        final ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo value) {
      bitField0_ |= 0x00000002;
      secondNode.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo first_node = 15;</code>
     * @return whether the firstNode field is set
     */
    public boolean hasFirstNode() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo first_node = 15;</code>
     * @return this
     */
    public ChallengeBossInfo clearFirstNode() {
      bitField0_ &= ~0x00000004;
      firstNode.clear();
      return this;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo first_node = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFirstNode()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo getFirstNode() {
      return firstNode;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo first_node = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo getMutableFirstNode() {
      bitField0_ |= 0x00000004;
      return firstNode;
    }

    /**
     * <pre>
     * ?
     * </pre>
     *
     * <code>optional .ChallengeBossStageInfo first_node = 15;</code>
     * @param value the firstNode to set
     * @return this
     */
    public ChallengeBossInfo setFirstNode(
        final ChallengeBossStageInfoOuterClass.ChallengeBossStageInfo value) {
      bitField0_ |= 0x00000004;
      firstNode.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     * @return whether the bADPGANOHKM field is set
     */
    public boolean hasBADPGANOHKM() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     * @return this
     */
    public ChallengeBossInfo clearBADPGANOHKM() {
      bitField0_ &= ~0x00000008;
      bADPGANOHKM.clear();
      return this;
    }

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBADPGANOHKM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getBADPGANOHKM() {
      return bADPGANOHKM;
    }

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableBADPGANOHKM() {
      bitField0_ |= 0x00000008;
      return bADPGANOHKM;
    }

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     * @param value the bADPGANOHKM to add
     * @return this
     */
    public ChallengeBossInfo addBADPGANOHKM(final int value) {
      bitField0_ |= 0x00000008;
      bADPGANOHKM.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 BADPGANOHKM = 3;</code>
     * @param values the bADPGANOHKM to add
     * @return this
     */
    public ChallengeBossInfo addAllBADPGANOHKM(final int... values) {
      bitField0_ |= 0x00000008;
      bADPGANOHKM.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     * @return whether the pPKNDBEAHCA field is set
     */
    public boolean hasPPKNDBEAHCA() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     * @return this
     */
    public ChallengeBossInfo clearPPKNDBEAHCA() {
      bitField0_ &= ~0x00000010;
      pPKNDBEAHCA.clear();
      return this;
    }

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutablePPKNDBEAHCA()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getPPKNDBEAHCA() {
      return pPKNDBEAHCA;
    }

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutablePPKNDBEAHCA() {
      bitField0_ |= 0x00000010;
      return pPKNDBEAHCA;
    }

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     * @param value the pPKNDBEAHCA to add
     * @return this
     */
    public ChallengeBossInfo addPPKNDBEAHCA(final int value) {
      bitField0_ |= 0x00000010;
      pPKNDBEAHCA.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 PPKNDBEAHCA = 12;</code>
     * @param values the pPKNDBEAHCA to add
     * @return this
     */
    public ChallengeBossInfo addAllPPKNDBEAHCA(final int... values) {
      bitField0_ |= 0x00000010;
      pPKNDBEAHCA.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     * @return whether the equipments field is set
     */
    public boolean hasEquipments() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     * @return this
     */
    public ChallengeBossInfo clearEquipments() {
      bitField0_ &= ~0x00000020;
      equipments.clear();
      return this;
    }

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEquipments()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<EquipmentsEntry> getEquipments() {
      return equipments;
    }

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<EquipmentsEntry> getMutableEquipments() {
      bitField0_ |= 0x00000020;
      return equipments;
    }

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     * @param value the equipments to add
     * @return this
     */
    public ChallengeBossInfo addEquipments(final EquipmentsEntry value) {
      bitField0_ |= 0x00000020;
      equipments.add(value);
      return this;
    }

    /**
     * <code>repeated .ChallengeBossInfo.EquipmentsEntry equipments = 6;</code>
     * @param values the equipments to add
     * @return this
     */
    public ChallengeBossInfo addAllEquipments(final EquipmentsEntry... values) {
      bitField0_ |= 0x00000020;
      equipments.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     * @return whether the relics field is set
     */
    public boolean hasRelics() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     * @return this
     */
    public ChallengeBossInfo clearRelics() {
      bitField0_ &= ~0x00000040;
      relics.clear();
      return this;
    }

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRelics()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RelicsEntry> getRelics() {
      return relics;
    }

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RelicsEntry> getMutableRelics() {
      bitField0_ |= 0x00000040;
      return relics;
    }

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     * @param value the relics to add
     * @return this
     */
    public ChallengeBossInfo addRelics(final RelicsEntry value) {
      bitField0_ |= 0x00000040;
      relics.add(value);
      return this;
    }

    /**
     * <code>repeated .ChallengeBossInfo.RelicsEntry relics = 11;</code>
     * @param values the relics to add
     * @return this
     */
    public ChallengeBossInfo addAllRelics(final RelicsEntry... values) {
      bitField0_ |= 0x00000040;
      relics.addAll(values);
      return this;
    }

    @Override
    public ChallengeBossInfo copyFrom(final ChallengeBossInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        lBOJBINABDG = other.lBOJBINABDG;
        secondNode.copyFrom(other.secondNode);
        firstNode.copyFrom(other.firstNode);
        bADPGANOHKM.copyFrom(other.bADPGANOHKM);
        pPKNDBEAHCA.copyFrom(other.pPKNDBEAHCA);
        equipments.copyFrom(other.equipments);
        relics.copyFrom(other.relics);
      }
      return this;
    }

    @Override
    public ChallengeBossInfo mergeFrom(final ChallengeBossInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLBOJBINABDG()) {
        setLBOJBINABDG(other.lBOJBINABDG);
      }
      if (other.hasSecondNode()) {
        getMutableSecondNode().mergeFrom(other.secondNode);
      }
      if (other.hasFirstNode()) {
        getMutableFirstNode().mergeFrom(other.firstNode);
      }
      if (other.hasBADPGANOHKM()) {
        getMutableBADPGANOHKM().addAll(other.bADPGANOHKM);
      }
      if (other.hasPPKNDBEAHCA()) {
        getMutablePPKNDBEAHCA().addAll(other.pPKNDBEAHCA);
      }
      if (other.hasEquipments()) {
        getMutableEquipments().addAll(other.equipments);
      }
      if (other.hasRelics()) {
        getMutableRelics().addAll(other.relics);
      }
      return this;
    }

    @Override
    public ChallengeBossInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lBOJBINABDG = false;
      secondNode.clear();
      firstNode.clear();
      bADPGANOHKM.clear();
      pPKNDBEAHCA.clear();
      equipments.clear();
      relics.clear();
      return this;
    }

    @Override
    public ChallengeBossInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      secondNode.clearQuick();
      firstNode.clearQuick();
      bADPGANOHKM.clear();
      pPKNDBEAHCA.clear();
      equipments.clearQuick();
      relics.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossInfo)) {
        return false;
      }
      ChallengeBossInfo other = (ChallengeBossInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasLBOJBINABDG() || lBOJBINABDG == other.lBOJBINABDG)
        && (!hasSecondNode() || secondNode.equals(other.secondNode))
        && (!hasFirstNode() || firstNode.equals(other.firstNode))
        && (!hasBADPGANOHKM() || bADPGANOHKM.equals(other.bADPGANOHKM))
        && (!hasPPKNDBEAHCA() || pPKNDBEAHCA.equals(other.pPKNDBEAHCA))
        && (!hasEquipments() || equipments.equals(other.equipments))
        && (!hasRelics() || relics.equals(other.relics));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 104);
        output.writeBoolNoTag(lBOJBINABDG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(secondNode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 122);
        output.writeMessageNoTag(firstNode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < bADPGANOHKM.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(bADPGANOHKM.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < pPKNDBEAHCA.length(); i++) {
          output.writeRawByte((byte) 96);
          output.writeUInt32NoTag(pPKNDBEAHCA.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < equipments.length(); i++) {
          output.writeRawByte((byte) 50);
          output.writeMessageNoTag(equipments.get(i));
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < relics.length(); i++) {
          output.writeRawByte((byte) 90);
          output.writeMessageNoTag(relics.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(secondNode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(firstNode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * bADPGANOHKM.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(bADPGANOHKM);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * pPKNDBEAHCA.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(pPKNDBEAHCA);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * equipments.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(equipments);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * relics.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(relics);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 104: {
            // lBOJBINABDG
            lBOJBINABDG = input.readBool();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // secondNode
            input.readMessage(secondNode);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // firstNode
            input.readMessage(firstNode);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // bADPGANOHKM [packed=true]
            input.readPackedUInt32(bADPGANOHKM, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // pPKNDBEAHCA [packed=true]
            input.readPackedUInt32(pPKNDBEAHCA, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // equipments
            tag = input.readRepeatedMessage(equipments, tag);
            bitField0_ |= 0x00000020;
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // relics
            tag = input.readRepeatedMessage(relics, tag);
            bitField0_ |= 0x00000040;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // bADPGANOHKM [packed=false]
            tag = input.readRepeatedUInt32(bADPGANOHKM, tag);
            bitField0_ |= 0x00000008;
            break;
          }
          case 96: {
            // pPKNDBEAHCA [packed=false]
            tag = input.readRepeatedUInt32(pPKNDBEAHCA, tag);
            bitField0_ |= 0x00000010;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeBool(FieldNames.lBOJBINABDG, lBOJBINABDG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.secondNode, secondNode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.firstNode, firstNode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.bADPGANOHKM, bADPGANOHKM);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.pPKNDBEAHCA, pPKNDBEAHCA);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedMessage(FieldNames.equipments, equipments);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedMessage(FieldNames.relics, relics);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 459290330: {
            if (input.isAtField(FieldNames.lBOJBINABDG)) {
              if (!input.trySkipNullValue()) {
                lBOJBINABDG = input.readBool();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 423693462:
          case 265276141: {
            if (input.isAtField(FieldNames.secondNode)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(secondNode);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 132848850:
          case -160972239: {
            if (input.isAtField(FieldNames.firstNode)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(firstNode);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1633479236: {
            if (input.isAtField(FieldNames.bADPGANOHKM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(bADPGANOHKM);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1992685065: {
            if (input.isAtField(FieldNames.pPKNDBEAHCA)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(pPKNDBEAHCA);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -992686939: {
            if (input.isAtField(FieldNames.equipments)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(equipments);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -934646944: {
            if (input.isAtField(FieldNames.relics)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(relics);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossInfo clone() {
      return new ChallengeBossInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossInfo(), data).checkInitialized();
    }

    public static ChallengeBossInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossInfo(), input).checkInitialized();
    }

    public static ChallengeBossInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossInfo messages
     */
    public static MessageFactory<ChallengeBossInfo> getFactory() {
      return ChallengeBossInfoFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code EquipmentsEntry}
     */
    public static final class EquipmentsEntry extends ProtoMessage<EquipmentsEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional .ChallengeBossEquipment value = 2;</code>
       */
      private final ChallengeBossEquipmentOuterClass.ChallengeBossEquipment value_ = ChallengeBossEquipmentOuterClass.ChallengeBossEquipment.newInstance();

      private EquipmentsEntry() {
      }

      /**
       * @return a new empty instance of {@code EquipmentsEntry}
       */
      public static EquipmentsEntry newInstance() {
        return new EquipmentsEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public EquipmentsEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public EquipmentsEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional .ChallengeBossEquipment value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional .ChallengeBossEquipment value = 2;</code>
       * @return this
       */
      public EquipmentsEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_.clear();
        return this;
      }

      /**
       * <code>optional .ChallengeBossEquipment value = 2;</code>
       *
       * This method returns the internal storage object without modifying any has state.
       * The returned object should not be modified and be treated as read-only.
       *
       * Use {@link #getMutableValue()} if you want to modify it.
       *
       * @return internal storage object for reading
       */
      public ChallengeBossEquipmentOuterClass.ChallengeBossEquipment getValue() {
        return value_;
      }

      /**
       * <code>optional .ChallengeBossEquipment value = 2;</code>
       *
       * This method returns the internal storage object and sets the corresponding
       * has state. The returned object will become part of this message and its
       * contents may be modified as long as the has state is not cleared.
       *
       * @return internal storage object for modifications
       */
      public ChallengeBossEquipmentOuterClass.ChallengeBossEquipment getMutableValue() {
        bitField0_ |= 0x00000002;
        return value_;
      }

      /**
       * <code>optional .ChallengeBossEquipment value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public EquipmentsEntry setValue(
          final ChallengeBossEquipmentOuterClass.ChallengeBossEquipment value) {
        bitField0_ |= 0x00000002;
        value_.copyFrom(value);
        return this;
      }

      @Override
      public EquipmentsEntry copyFrom(final EquipmentsEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_.copyFrom(other.value_);
        }
        return this;
      }

      @Override
      public EquipmentsEntry mergeFrom(final EquipmentsEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          getMutableValue().mergeFrom(other.value_);
        }
        return this;
      }

      @Override
      public EquipmentsEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_.clear();
        return this;
      }

      @Override
      public EquipmentsEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        value_.clearQuick();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof EquipmentsEntry)) {
          return false;
        }
        EquipmentsEntry other = (EquipmentsEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_.equals(other.value_));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeMessageSizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public EquipmentsEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 18) {
                break;
              }
            }
            case 18: {
              // value_
              input.readMessage(value_);
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeMessage(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public EquipmentsEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  input.readMessage(value_);
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public EquipmentsEntry clone() {
        return new EquipmentsEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static EquipmentsEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new EquipmentsEntry(), data).checkInitialized();
      }

      public static EquipmentsEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new EquipmentsEntry(), input).checkInitialized();
      }

      public static EquipmentsEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new EquipmentsEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating EquipmentsEntry messages
       */
      public static MessageFactory<EquipmentsEntry> getFactory() {
        return EquipmentsEntryFactory.INSTANCE;
      }

      private enum EquipmentsEntryFactory implements MessageFactory<EquipmentsEntry> {
        INSTANCE;

        @Override
        public EquipmentsEntry create() {
          return EquipmentsEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    /**
     * Protobuf type {@code RelicsEntry}
     */
    public static final class RelicsEntry extends ProtoMessage<RelicsEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional .ChallengeBossRelic value = 2;</code>
       */
      private final ChallengeBossRelicOuterClass.ChallengeBossRelic value_ = ChallengeBossRelicOuterClass.ChallengeBossRelic.newInstance();

      private RelicsEntry() {
      }

      /**
       * @return a new empty instance of {@code RelicsEntry}
       */
      public static RelicsEntry newInstance() {
        return new RelicsEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public RelicsEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public RelicsEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional .ChallengeBossRelic value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional .ChallengeBossRelic value = 2;</code>
       * @return this
       */
      public RelicsEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_.clear();
        return this;
      }

      /**
       * <code>optional .ChallengeBossRelic value = 2;</code>
       *
       * This method returns the internal storage object without modifying any has state.
       * The returned object should not be modified and be treated as read-only.
       *
       * Use {@link #getMutableValue()} if you want to modify it.
       *
       * @return internal storage object for reading
       */
      public ChallengeBossRelicOuterClass.ChallengeBossRelic getValue() {
        return value_;
      }

      /**
       * <code>optional .ChallengeBossRelic value = 2;</code>
       *
       * This method returns the internal storage object and sets the corresponding
       * has state. The returned object will become part of this message and its
       * contents may be modified as long as the has state is not cleared.
       *
       * @return internal storage object for modifications
       */
      public ChallengeBossRelicOuterClass.ChallengeBossRelic getMutableValue() {
        bitField0_ |= 0x00000002;
        return value_;
      }

      /**
       * <code>optional .ChallengeBossRelic value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public RelicsEntry setValue(final ChallengeBossRelicOuterClass.ChallengeBossRelic value) {
        bitField0_ |= 0x00000002;
        value_.copyFrom(value);
        return this;
      }

      @Override
      public RelicsEntry copyFrom(final RelicsEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_.copyFrom(other.value_);
        }
        return this;
      }

      @Override
      public RelicsEntry mergeFrom(final RelicsEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          getMutableValue().mergeFrom(other.value_);
        }
        return this;
      }

      @Override
      public RelicsEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_.clear();
        return this;
      }

      @Override
      public RelicsEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        value_.clearQuick();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof RelicsEntry)) {
          return false;
        }
        RelicsEntry other = (RelicsEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_.equals(other.value_));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeMessageSizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public RelicsEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 18) {
                break;
              }
            }
            case 18: {
              // value_
              input.readMessage(value_);
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeMessage(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public RelicsEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  input.readMessage(value_);
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public RelicsEntry clone() {
        return new RelicsEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static RelicsEntry parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new RelicsEntry(), data).checkInitialized();
      }

      public static RelicsEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new RelicsEntry(), input).checkInitialized();
      }

      public static RelicsEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new RelicsEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating RelicsEntry messages
       */
      public static MessageFactory<RelicsEntry> getFactory() {
        return RelicsEntryFactory.INSTANCE;
      }

      private enum RelicsEntryFactory implements MessageFactory<RelicsEntry> {
        INSTANCE;

        @Override
        public RelicsEntry create() {
          return RelicsEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum ChallengeBossInfoFactory implements MessageFactory<ChallengeBossInfo> {
      INSTANCE;

      @Override
      public ChallengeBossInfo create() {
        return ChallengeBossInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName lBOJBINABDG = FieldName.forField("LBOJBINABDG");

      static final FieldName secondNode = FieldName.forField("secondNode", "second_node");

      static final FieldName firstNode = FieldName.forField("firstNode", "first_node");

      static final FieldName bADPGANOHKM = FieldName.forField("BADPGANOHKM");

      static final FieldName pPKNDBEAHCA = FieldName.forField("PPKNDBEAHCA");

      static final FieldName equipments = FieldName.forField("equipments");

      static final FieldName relics = FieldName.forField("relics");
    }
  }
}
