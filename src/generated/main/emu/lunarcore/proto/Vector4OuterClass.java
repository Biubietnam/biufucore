// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;

public final class Vector4OuterClass {
  /**
   * Protobuf type {@code Vector4}
   */
  public static final class Vector4 extends ProtoMessage<Vector4> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float y = 7;</code>
     */
    private float y;

    /**
     * <code>optional float w = 9;</code>
     */
    private float w;

    /**
     * <code>optional float x = 11;</code>
     */
    private float x;

    /**
     * <code>optional float z = 12;</code>
     */
    private float z;

    private Vector4() {
    }

    /**
     * @return a new empty instance of {@code Vector4}
     */
    public static Vector4 newInstance() {
      return new Vector4();
    }

    /**
     * <code>optional float y = 7;</code>
     * @return whether the y field is set
     */
    public boolean hasY() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float y = 7;</code>
     * @return this
     */
    public Vector4 clearY() {
      bitField0_ &= ~0x00000001;
      y = 0F;
      return this;
    }

    /**
     * <code>optional float y = 7;</code>
     * @return the y
     */
    public float getY() {
      return y;
    }

    /**
     * <code>optional float y = 7;</code>
     * @param value the y to set
     * @return this
     */
    public Vector4 setY(final float value) {
      bitField0_ |= 0x00000001;
      y = value;
      return this;
    }

    /**
     * <code>optional float w = 9;</code>
     * @return whether the w field is set
     */
    public boolean hasW() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional float w = 9;</code>
     * @return this
     */
    public Vector4 clearW() {
      bitField0_ &= ~0x00000002;
      w = 0F;
      return this;
    }

    /**
     * <code>optional float w = 9;</code>
     * @return the w
     */
    public float getW() {
      return w;
    }

    /**
     * <code>optional float w = 9;</code>
     * @param value the w to set
     * @return this
     */
    public Vector4 setW(final float value) {
      bitField0_ |= 0x00000002;
      w = value;
      return this;
    }

    /**
     * <code>optional float x = 11;</code>
     * @return whether the x field is set
     */
    public boolean hasX() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional float x = 11;</code>
     * @return this
     */
    public Vector4 clearX() {
      bitField0_ &= ~0x00000004;
      x = 0F;
      return this;
    }

    /**
     * <code>optional float x = 11;</code>
     * @return the x
     */
    public float getX() {
      return x;
    }

    /**
     * <code>optional float x = 11;</code>
     * @param value the x to set
     * @return this
     */
    public Vector4 setX(final float value) {
      bitField0_ |= 0x00000004;
      x = value;
      return this;
    }

    /**
     * <code>optional float z = 12;</code>
     * @return whether the z field is set
     */
    public boolean hasZ() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional float z = 12;</code>
     * @return this
     */
    public Vector4 clearZ() {
      bitField0_ &= ~0x00000008;
      z = 0F;
      return this;
    }

    /**
     * <code>optional float z = 12;</code>
     * @return the z
     */
    public float getZ() {
      return z;
    }

    /**
     * <code>optional float z = 12;</code>
     * @param value the z to set
     * @return this
     */
    public Vector4 setZ(final float value) {
      bitField0_ |= 0x00000008;
      z = value;
      return this;
    }

    @Override
    public Vector4 copyFrom(final Vector4 other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        y = other.y;
        w = other.w;
        x = other.x;
        z = other.z;
      }
      return this;
    }

    @Override
    public Vector4 mergeFrom(final Vector4 other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasY()) {
        setY(other.y);
      }
      if (other.hasW()) {
        setW(other.w);
      }
      if (other.hasX()) {
        setX(other.x);
      }
      if (other.hasZ()) {
        setZ(other.z);
      }
      return this;
    }

    @Override
    public Vector4 clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      y = 0F;
      w = 0F;
      x = 0F;
      z = 0F;
      return this;
    }

    @Override
    public Vector4 clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof Vector4)) {
        return false;
      }
      Vector4 other = (Vector4) o;
      return bitField0_ == other.bitField0_
        && (!hasY() || ProtoUtil.isEqual(y, other.y))
        && (!hasW() || ProtoUtil.isEqual(w, other.w))
        && (!hasX() || ProtoUtil.isEqual(x, other.x))
        && (!hasZ() || ProtoUtil.isEqual(z, other.z));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 61);
        output.writeFloatNoTag(y);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 77);
        output.writeFloatNoTag(w);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 93);
        output.writeFloatNoTag(x);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 101);
        output.writeFloatNoTag(z);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 5;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public Vector4 mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 61: {
            // y
            y = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 77) {
              break;
            }
          }
          case 77: {
            // w
            w = input.readFloat();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 93) {
              break;
            }
          }
          case 93: {
            // x
            x = input.readFloat();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 101) {
              break;
            }
          }
          case 101: {
            // z
            z = input.readFloat();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.y, y);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeFloat(FieldNames.w, w);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeFloat(FieldNames.x, x);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeFloat(FieldNames.z, z);
      }
      output.endObject();
    }

    @Override
    public Vector4 mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 121: {
            if (input.isAtField(FieldNames.y)) {
              if (!input.trySkipNullValue()) {
                y = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 119: {
            if (input.isAtField(FieldNames.w)) {
              if (!input.trySkipNullValue()) {
                w = input.readFloat();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 120: {
            if (input.isAtField(FieldNames.x)) {
              if (!input.trySkipNullValue()) {
                x = input.readFloat();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 122: {
            if (input.isAtField(FieldNames.z)) {
              if (!input.trySkipNullValue()) {
                z = input.readFloat();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public Vector4 clone() {
      return new Vector4().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static Vector4 parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new Vector4(), data).checkInitialized();
    }

    public static Vector4 parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Vector4(), input).checkInitialized();
    }

    public static Vector4 parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Vector4(), input).checkInitialized();
    }

    /**
     * @return factory for creating Vector4 messages
     */
    public static MessageFactory<Vector4> getFactory() {
      return Vector4Factory.INSTANCE;
    }

    private enum Vector4Factory implements MessageFactory<Vector4> {
      INSTANCE;

      @Override
      public Vector4 create() {
        return Vector4.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName y = FieldName.forField("y");

      static final FieldName w = FieldName.forField("w");

      static final FieldName x = FieldName.forField("x");

      static final FieldName z = FieldName.forField("z");
    }
  }
}
