// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class SecretKeyTypeOuterClass {
  /**
   * Protobuf enum {@code SecretKeyType}
   */
  public enum SecretKeyType implements ProtoEnum<SecretKeyType> {
    /**
     * <code>SECRET_KEY_NONE = 0;</code>
     */
    SECRET_KEY_NONE("SECRET_KEY_NONE", 0),

    /**
     * <code>SECRET_KEY_SERVER_CHECK = 1;</code>
     */
    SECRET_KEY_SERVER_CHECK("SECRET_KEY_SERVER_CHECK", 1),

    /**
     * <code>SECRET_KEY_VIDEO = 2;</code>
     */
    SECRET_KEY_VIDEO("SECRET_KEY_VIDEO", 2),

    /**
     * <code>SECRET_KEY_BATTLE_TIME = 3;</code>
     */
    SECRET_KEY_BATTLE_TIME("SECRET_KEY_BATTLE_TIME", 3);

    /**
     * <code>SECRET_KEY_NONE = 0;</code>
     */
    public static final int SECRET_KEY_NONE_VALUE = 0;

    /**
     * <code>SECRET_KEY_SERVER_CHECK = 1;</code>
     */
    public static final int SECRET_KEY_SERVER_CHECK_VALUE = 1;

    /**
     * <code>SECRET_KEY_VIDEO = 2;</code>
     */
    public static final int SECRET_KEY_VIDEO_VALUE = 2;

    /**
     * <code>SECRET_KEY_BATTLE_TIME = 3;</code>
     */
    public static final int SECRET_KEY_BATTLE_TIME_VALUE = 3;

    private final String name;

    private final int number;

    private SecretKeyType(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<SecretKeyType> converter() {
      return SecretKeyTypeConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static SecretKeyType forNumber(int value) {
      return SecretKeyTypeConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static SecretKeyType forNumberOr(int number, SecretKeyType other) {
      SecretKeyType value = forNumber(number);
      return value == null ? other : value;
    }

    enum SecretKeyTypeConverter implements ProtoEnum.EnumConverter<SecretKeyType> {
      INSTANCE;

      private static final SecretKeyType[] lookup = new SecretKeyType[4];

      static {
        lookup[0] = SECRET_KEY_NONE;
        lookup[1] = SECRET_KEY_SERVER_CHECK;
        lookup[2] = SECRET_KEY_VIDEO;
        lookup[3] = SECRET_KEY_BATTLE_TIME;
      }

      @Override
      public final SecretKeyType forNumber(final int value) {
        if (value >= 0 && value < lookup.length) {
          return lookup[value];
        }
        return null;
      }

      @Override
      public final SecretKeyType forName(final CharSequence value) {
        switch (value.length()) {
          case 15: {
            if (ProtoUtil.isEqual("SECRET_KEY_NONE", value)) {
              return SECRET_KEY_NONE;
            }
            break;
          }
          case 16: {
            if (ProtoUtil.isEqual("SECRET_KEY_VIDEO", value)) {
              return SECRET_KEY_VIDEO;
            }
            break;
          }
          case 22: {
            if (ProtoUtil.isEqual("SECRET_KEY_BATTLE_TIME", value)) {
              return SECRET_KEY_BATTLE_TIME;
            }
            break;
          }
          case 23: {
            if (ProtoUtil.isEqual("SECRET_KEY_SERVER_CHECK", value)) {
              return SECRET_KEY_SERVER_CHECK;
            }
            break;
          }
        }
        return null;
      }
    }
  }
}
