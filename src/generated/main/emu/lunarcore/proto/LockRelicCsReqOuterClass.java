// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class LockRelicCsReqOuterClass {
  /**
   * Protobuf type {@code LockRelicCsReq}
   */
  public static final class LockRelicCsReq extends ProtoMessage<LockRelicCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional bool KIJKPEPDDEL = 1;</code>
     */
    private boolean kIJKPEPDDEL;

    /**
     * <code>optional bool is_locked = 5;</code>
     */
    private boolean isLocked;

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     */
    private final RepeatedInt iPNGFAIPDDE = RepeatedInt.newEmptyInstance();

    private LockRelicCsReq() {
    }

    /**
     * @return a new empty instance of {@code LockRelicCsReq}
     */
    public static LockRelicCsReq newInstance() {
      return new LockRelicCsReq();
    }

    /**
     * <code>optional bool KIJKPEPDDEL = 1;</code>
     * @return whether the kIJKPEPDDEL field is set
     */
    public boolean hasKIJKPEPDDEL() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional bool KIJKPEPDDEL = 1;</code>
     * @return this
     */
    public LockRelicCsReq clearKIJKPEPDDEL() {
      bitField0_ &= ~0x00000001;
      kIJKPEPDDEL = false;
      return this;
    }

    /**
     * <code>optional bool KIJKPEPDDEL = 1;</code>
     * @return the kIJKPEPDDEL
     */
    public boolean getKIJKPEPDDEL() {
      return kIJKPEPDDEL;
    }

    /**
     * <code>optional bool KIJKPEPDDEL = 1;</code>
     * @param value the kIJKPEPDDEL to set
     * @return this
     */
    public LockRelicCsReq setKIJKPEPDDEL(final boolean value) {
      bitField0_ |= 0x00000001;
      kIJKPEPDDEL = value;
      return this;
    }

    /**
     * <code>optional bool is_locked = 5;</code>
     * @return whether the isLocked field is set
     */
    public boolean hasIsLocked() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool is_locked = 5;</code>
     * @return this
     */
    public LockRelicCsReq clearIsLocked() {
      bitField0_ &= ~0x00000002;
      isLocked = false;
      return this;
    }

    /**
     * <code>optional bool is_locked = 5;</code>
     * @return the isLocked
     */
    public boolean getIsLocked() {
      return isLocked;
    }

    /**
     * <code>optional bool is_locked = 5;</code>
     * @param value the isLocked to set
     * @return this
     */
    public LockRelicCsReq setIsLocked(final boolean value) {
      bitField0_ |= 0x00000002;
      isLocked = value;
      return this;
    }

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     * @return whether the iPNGFAIPDDE field is set
     */
    public boolean hasIPNGFAIPDDE() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     * @return this
     */
    public LockRelicCsReq clearIPNGFAIPDDE() {
      bitField0_ &= ~0x00000004;
      iPNGFAIPDDE.clear();
      return this;
    }

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableIPNGFAIPDDE()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getIPNGFAIPDDE() {
      return iPNGFAIPDDE;
    }

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableIPNGFAIPDDE() {
      bitField0_ |= 0x00000004;
      return iPNGFAIPDDE;
    }

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     * @param value the iPNGFAIPDDE to add
     * @return this
     */
    public LockRelicCsReq addIPNGFAIPDDE(final int value) {
      bitField0_ |= 0x00000004;
      iPNGFAIPDDE.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 IPNGFAIPDDE = 4;</code>
     * @param values the iPNGFAIPDDE to add
     * @return this
     */
    public LockRelicCsReq addAllIPNGFAIPDDE(final int... values) {
      bitField0_ |= 0x00000004;
      iPNGFAIPDDE.addAll(values);
      return this;
    }

    @Override
    public LockRelicCsReq copyFrom(final LockRelicCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kIJKPEPDDEL = other.kIJKPEPDDEL;
        isLocked = other.isLocked;
        iPNGFAIPDDE.copyFrom(other.iPNGFAIPDDE);
      }
      return this;
    }

    @Override
    public LockRelicCsReq mergeFrom(final LockRelicCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKIJKPEPDDEL()) {
        setKIJKPEPDDEL(other.kIJKPEPDDEL);
      }
      if (other.hasIsLocked()) {
        setIsLocked(other.isLocked);
      }
      if (other.hasIPNGFAIPDDE()) {
        getMutableIPNGFAIPDDE().addAll(other.iPNGFAIPDDE);
      }
      return this;
    }

    @Override
    public LockRelicCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kIJKPEPDDEL = false;
      isLocked = false;
      iPNGFAIPDDE.clear();
      return this;
    }

    @Override
    public LockRelicCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iPNGFAIPDDE.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof LockRelicCsReq)) {
        return false;
      }
      LockRelicCsReq other = (LockRelicCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasKIJKPEPDDEL() || kIJKPEPDDEL == other.kIJKPEPDDEL)
        && (!hasIsLocked() || isLocked == other.isLocked)
        && (!hasIPNGFAIPDDE() || iPNGFAIPDDE.equals(other.iPNGFAIPDDE));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeBoolNoTag(kIJKPEPDDEL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeBoolNoTag(isLocked);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < iPNGFAIPDDE.length(); i++) {
          output.writeRawByte((byte) 32);
          output.writeUInt32NoTag(iPNGFAIPDDE.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * iPNGFAIPDDE.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(iPNGFAIPDDE);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public LockRelicCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // kIJKPEPDDEL
            kIJKPEPDDEL = input.readBool();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // isLocked
            isLocked = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // iPNGFAIPDDE [packed=true]
            input.readPackedUInt32(iPNGFAIPDDE, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 32: {
            // iPNGFAIPDDE [packed=false]
            tag = input.readRepeatedUInt32(iPNGFAIPDDE, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeBool(FieldNames.kIJKPEPDDEL, kIJKPEPDDEL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isLocked, isLocked);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.iPNGFAIPDDE, iPNGFAIPDDE);
      }
      output.endObject();
    }

    @Override
    public LockRelicCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1796600669: {
            if (input.isAtField(FieldNames.kIJKPEPDDEL)) {
              if (!input.trySkipNullValue()) {
                kIJKPEPDDEL = input.readBool();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -423418668:
          case -633413697: {
            if (input.isAtField(FieldNames.isLocked)) {
              if (!input.trySkipNullValue()) {
                isLocked = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1300175805: {
            if (input.isAtField(FieldNames.iPNGFAIPDDE)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(iPNGFAIPDDE);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public LockRelicCsReq clone() {
      return new LockRelicCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static LockRelicCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new LockRelicCsReq(), data).checkInitialized();
    }

    public static LockRelicCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new LockRelicCsReq(), input).checkInitialized();
    }

    public static LockRelicCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new LockRelicCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating LockRelicCsReq messages
     */
    public static MessageFactory<LockRelicCsReq> getFactory() {
      return LockRelicCsReqFactory.INSTANCE;
    }

    private enum LockRelicCsReqFactory implements MessageFactory<LockRelicCsReq> {
      INSTANCE;

      @Override
      public LockRelicCsReq create() {
        return LockRelicCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kIJKPEPDDEL = FieldName.forField("KIJKPEPDDEL");

      static final FieldName isLocked = FieldName.forField("isLocked", "is_locked");

      static final FieldName iPNGFAIPDDE = FieldName.forField("IPNGFAIPDDE");
    }
  }
}
