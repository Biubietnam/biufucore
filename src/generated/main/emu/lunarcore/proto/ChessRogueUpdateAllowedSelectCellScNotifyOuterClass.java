// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueUpdateAllowedSelectCellScNotifyOuterClass {
  /**
   * Protobuf type {@code ChessRogueUpdateAllowedSelectCellScNotify}
   */
  public static final class ChessRogueUpdateAllowedSelectCellScNotify extends ProtoMessage<ChessRogueUpdateAllowedSelectCellScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 FENMMJNLKMJ = 7;</code>
     */
    private int fENMMJNLKMJ;

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     */
    private final RepeatedInt aDAGFCPMIEA = RepeatedInt.newEmptyInstance();

    private ChessRogueUpdateAllowedSelectCellScNotify() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueUpdateAllowedSelectCellScNotify}
     */
    public static ChessRogueUpdateAllowedSelectCellScNotify newInstance() {
      return new ChessRogueUpdateAllowedSelectCellScNotify();
    }

    /**
     * <code>optional uint32 FENMMJNLKMJ = 7;</code>
     * @return whether the fENMMJNLKMJ field is set
     */
    public boolean hasFENMMJNLKMJ() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 FENMMJNLKMJ = 7;</code>
     * @return this
     */
    public ChessRogueUpdateAllowedSelectCellScNotify clearFENMMJNLKMJ() {
      bitField0_ &= ~0x00000001;
      fENMMJNLKMJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 FENMMJNLKMJ = 7;</code>
     * @return the fENMMJNLKMJ
     */
    public int getFENMMJNLKMJ() {
      return fENMMJNLKMJ;
    }

    /**
     * <code>optional uint32 FENMMJNLKMJ = 7;</code>
     * @param value the fENMMJNLKMJ to set
     * @return this
     */
    public ChessRogueUpdateAllowedSelectCellScNotify setFENMMJNLKMJ(final int value) {
      bitField0_ |= 0x00000001;
      fENMMJNLKMJ = value;
      return this;
    }

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     * @return whether the aDAGFCPMIEA field is set
     */
    public boolean hasADAGFCPMIEA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     * @return this
     */
    public ChessRogueUpdateAllowedSelectCellScNotify clearADAGFCPMIEA() {
      bitField0_ &= ~0x00000002;
      aDAGFCPMIEA.clear();
      return this;
    }

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableADAGFCPMIEA()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getADAGFCPMIEA() {
      return aDAGFCPMIEA;
    }

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableADAGFCPMIEA() {
      bitField0_ |= 0x00000002;
      return aDAGFCPMIEA;
    }

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     * @param value the aDAGFCPMIEA to add
     * @return this
     */
    public ChessRogueUpdateAllowedSelectCellScNotify addADAGFCPMIEA(final int value) {
      bitField0_ |= 0x00000002;
      aDAGFCPMIEA.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 ADAGFCPMIEA = 6;</code>
     * @param values the aDAGFCPMIEA to add
     * @return this
     */
    public ChessRogueUpdateAllowedSelectCellScNotify addAllADAGFCPMIEA(final int... values) {
      bitField0_ |= 0x00000002;
      aDAGFCPMIEA.addAll(values);
      return this;
    }

    @Override
    public ChessRogueUpdateAllowedSelectCellScNotify copyFrom(
        final ChessRogueUpdateAllowedSelectCellScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        fENMMJNLKMJ = other.fENMMJNLKMJ;
        aDAGFCPMIEA.copyFrom(other.aDAGFCPMIEA);
      }
      return this;
    }

    @Override
    public ChessRogueUpdateAllowedSelectCellScNotify mergeFrom(
        final ChessRogueUpdateAllowedSelectCellScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFENMMJNLKMJ()) {
        setFENMMJNLKMJ(other.fENMMJNLKMJ);
      }
      if (other.hasADAGFCPMIEA()) {
        getMutableADAGFCPMIEA().addAll(other.aDAGFCPMIEA);
      }
      return this;
    }

    @Override
    public ChessRogueUpdateAllowedSelectCellScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fENMMJNLKMJ = 0;
      aDAGFCPMIEA.clear();
      return this;
    }

    @Override
    public ChessRogueUpdateAllowedSelectCellScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aDAGFCPMIEA.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueUpdateAllowedSelectCellScNotify)) {
        return false;
      }
      ChessRogueUpdateAllowedSelectCellScNotify other = (ChessRogueUpdateAllowedSelectCellScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasFENMMJNLKMJ() || fENMMJNLKMJ == other.fENMMJNLKMJ)
        && (!hasADAGFCPMIEA() || aDAGFCPMIEA.equals(other.aDAGFCPMIEA));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(fENMMJNLKMJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < aDAGFCPMIEA.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(aDAGFCPMIEA.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fENMMJNLKMJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * aDAGFCPMIEA.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aDAGFCPMIEA);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueUpdateAllowedSelectCellScNotify mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // fENMMJNLKMJ
            fENMMJNLKMJ = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // aDAGFCPMIEA [packed=true]
            input.readPackedUInt32(aDAGFCPMIEA, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 48: {
            // aDAGFCPMIEA [packed=false]
            tag = input.readRepeatedUInt32(aDAGFCPMIEA, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.fENMMJNLKMJ, fENMMJNLKMJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.aDAGFCPMIEA, aDAGFCPMIEA);
      }
      output.endObject();
    }

    @Override
    public ChessRogueUpdateAllowedSelectCellScNotify mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1709045935: {
            if (input.isAtField(FieldNames.fENMMJNLKMJ)) {
              if (!input.trySkipNullValue()) {
                fENMMJNLKMJ = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 339437890: {
            if (input.isAtField(FieldNames.aDAGFCPMIEA)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aDAGFCPMIEA);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueUpdateAllowedSelectCellScNotify clone() {
      return new ChessRogueUpdateAllowedSelectCellScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueUpdateAllowedSelectCellScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueUpdateAllowedSelectCellScNotify(), data).checkInitialized();
    }

    public static ChessRogueUpdateAllowedSelectCellScNotify parseFrom(final ProtoSource input)
        throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueUpdateAllowedSelectCellScNotify(), input).checkInitialized();
    }

    public static ChessRogueUpdateAllowedSelectCellScNotify parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChessRogueUpdateAllowedSelectCellScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueUpdateAllowedSelectCellScNotify messages
     */
    public static MessageFactory<ChessRogueUpdateAllowedSelectCellScNotify> getFactory() {
      return ChessRogueUpdateAllowedSelectCellScNotifyFactory.INSTANCE;
    }

    private enum ChessRogueUpdateAllowedSelectCellScNotifyFactory implements MessageFactory<ChessRogueUpdateAllowedSelectCellScNotify> {
      INSTANCE;

      @Override
      public ChessRogueUpdateAllowedSelectCellScNotify create() {
        return ChessRogueUpdateAllowedSelectCellScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName fENMMJNLKMJ = FieldName.forField("FENMMJNLKMJ");

      static final FieldName aDAGFCPMIEA = FieldName.forField("ADAGFCPMIEA");
    }
  }
}
