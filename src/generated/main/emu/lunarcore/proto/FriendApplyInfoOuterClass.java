// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class FriendApplyInfoOuterClass {
  /**
   * <pre>
   *  MFPFLKBHFCB
   * </pre>
   *
   * Protobuf type {@code FriendApplyInfo}
   */
  public static final class FriendApplyInfo extends ProtoMessage<FriendApplyInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 BIDBCBGACID = 1;</code>
     */
    private long bIDBCBGACID;

    /**
     * <code>optional .SimpleInfo simple_info = 9;</code>
     */
    private final SimpleInfoOuterClass.SimpleInfo simpleInfo = SimpleInfoOuterClass.SimpleInfo.newInstance();

    private FriendApplyInfo() {
    }

    /**
     * <pre>
     *  MFPFLKBHFCB
     * </pre>
     *
     * @return a new empty instance of {@code FriendApplyInfo}
     */
    public static FriendApplyInfo newInstance() {
      return new FriendApplyInfo();
    }

    /**
     * <code>optional int64 BIDBCBGACID = 1;</code>
     * @return whether the bIDBCBGACID field is set
     */
    public boolean hasBIDBCBGACID() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 BIDBCBGACID = 1;</code>
     * @return this
     */
    public FriendApplyInfo clearBIDBCBGACID() {
      bitField0_ &= ~0x00000001;
      bIDBCBGACID = 0L;
      return this;
    }

    /**
     * <code>optional int64 BIDBCBGACID = 1;</code>
     * @return the bIDBCBGACID
     */
    public long getBIDBCBGACID() {
      return bIDBCBGACID;
    }

    /**
     * <code>optional int64 BIDBCBGACID = 1;</code>
     * @param value the bIDBCBGACID to set
     * @return this
     */
    public FriendApplyInfo setBIDBCBGACID(final long value) {
      bitField0_ |= 0x00000001;
      bIDBCBGACID = value;
      return this;
    }

    /**
     * <code>optional .SimpleInfo simple_info = 9;</code>
     * @return whether the simpleInfo field is set
     */
    public boolean hasSimpleInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .SimpleInfo simple_info = 9;</code>
     * @return this
     */
    public FriendApplyInfo clearSimpleInfo() {
      bitField0_ &= ~0x00000002;
      simpleInfo.clear();
      return this;
    }

    /**
     * <code>optional .SimpleInfo simple_info = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSimpleInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public SimpleInfoOuterClass.SimpleInfo getSimpleInfo() {
      return simpleInfo;
    }

    /**
     * <code>optional .SimpleInfo simple_info = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public SimpleInfoOuterClass.SimpleInfo getMutableSimpleInfo() {
      bitField0_ |= 0x00000002;
      return simpleInfo;
    }

    /**
     * <code>optional .SimpleInfo simple_info = 9;</code>
     * @param value the simpleInfo to set
     * @return this
     */
    public FriendApplyInfo setSimpleInfo(final SimpleInfoOuterClass.SimpleInfo value) {
      bitField0_ |= 0x00000002;
      simpleInfo.copyFrom(value);
      return this;
    }

    @Override
    public FriendApplyInfo copyFrom(final FriendApplyInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        bIDBCBGACID = other.bIDBCBGACID;
        simpleInfo.copyFrom(other.simpleInfo);
      }
      return this;
    }

    @Override
    public FriendApplyInfo mergeFrom(final FriendApplyInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBIDBCBGACID()) {
        setBIDBCBGACID(other.bIDBCBGACID);
      }
      if (other.hasSimpleInfo()) {
        getMutableSimpleInfo().mergeFrom(other.simpleInfo);
      }
      return this;
    }

    @Override
    public FriendApplyInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bIDBCBGACID = 0L;
      simpleInfo.clear();
      return this;
    }

    @Override
    public FriendApplyInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      simpleInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof FriendApplyInfo)) {
        return false;
      }
      FriendApplyInfo other = (FriendApplyInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasBIDBCBGACID() || bIDBCBGACID == other.bIDBCBGACID)
        && (!hasSimpleInfo() || simpleInfo.equals(other.simpleInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeInt64NoTag(bIDBCBGACID);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(simpleInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(bIDBCBGACID);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(simpleInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public FriendApplyInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // bIDBCBGACID
            bIDBCBGACID = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // simpleInfo
            input.readMessage(simpleInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.bIDBCBGACID, bIDBCBGACID);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.simpleInfo, simpleInfo);
      }
      output.endObject();
    }

    @Override
    public FriendApplyInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -2096441888: {
            if (input.isAtField(FieldNames.bIDBCBGACID)) {
              if (!input.trySkipNullValue()) {
                bIDBCBGACID = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1431903872:
          case -1419171045: {
            if (input.isAtField(FieldNames.simpleInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(simpleInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public FriendApplyInfo clone() {
      return new FriendApplyInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static FriendApplyInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new FriendApplyInfo(), data).checkInitialized();
    }

    public static FriendApplyInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FriendApplyInfo(), input).checkInitialized();
    }

    public static FriendApplyInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FriendApplyInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating FriendApplyInfo messages
     */
    public static MessageFactory<FriendApplyInfo> getFactory() {
      return FriendApplyInfoFactory.INSTANCE;
    }

    private enum FriendApplyInfoFactory implements MessageFactory<FriendApplyInfo> {
      INSTANCE;

      @Override
      public FriendApplyInfo create() {
        return FriendApplyInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName bIDBCBGACID = FieldName.forField("BIDBCBGACID");

      static final FieldName simpleInfo = FieldName.forField("simpleInfo", "simple_info");
    }
  }
}
