// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class DiscardRelicCsReqOuterClass {
  /**
   * Protobuf type {@code DiscardRelicCsReq}
   */
  public static final class DiscardRelicCsReq extends ProtoMessage<DiscardRelicCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional bool is_discard = 3;</code>
     */
    private boolean isDiscard;

    /**
     * <code>optional bool OKKJFIBNGCE = 11;</code>
     */
    private boolean oKKJFIBNGCE;

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     */
    private final RepeatedInt eAMLKLABFBO = RepeatedInt.newEmptyInstance();

    private DiscardRelicCsReq() {
    }

    /**
     * @return a new empty instance of {@code DiscardRelicCsReq}
     */
    public static DiscardRelicCsReq newInstance() {
      return new DiscardRelicCsReq();
    }

    /**
     * <code>optional bool is_discard = 3;</code>
     * @return whether the isDiscard field is set
     */
    public boolean hasIsDiscard() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional bool is_discard = 3;</code>
     * @return this
     */
    public DiscardRelicCsReq clearIsDiscard() {
      bitField0_ &= ~0x00000001;
      isDiscard = false;
      return this;
    }

    /**
     * <code>optional bool is_discard = 3;</code>
     * @return the isDiscard
     */
    public boolean getIsDiscard() {
      return isDiscard;
    }

    /**
     * <code>optional bool is_discard = 3;</code>
     * @param value the isDiscard to set
     * @return this
     */
    public DiscardRelicCsReq setIsDiscard(final boolean value) {
      bitField0_ |= 0x00000001;
      isDiscard = value;
      return this;
    }

    /**
     * <code>optional bool OKKJFIBNGCE = 11;</code>
     * @return whether the oKKJFIBNGCE field is set
     */
    public boolean hasOKKJFIBNGCE() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool OKKJFIBNGCE = 11;</code>
     * @return this
     */
    public DiscardRelicCsReq clearOKKJFIBNGCE() {
      bitField0_ &= ~0x00000002;
      oKKJFIBNGCE = false;
      return this;
    }

    /**
     * <code>optional bool OKKJFIBNGCE = 11;</code>
     * @return the oKKJFIBNGCE
     */
    public boolean getOKKJFIBNGCE() {
      return oKKJFIBNGCE;
    }

    /**
     * <code>optional bool OKKJFIBNGCE = 11;</code>
     * @param value the oKKJFIBNGCE to set
     * @return this
     */
    public DiscardRelicCsReq setOKKJFIBNGCE(final boolean value) {
      bitField0_ |= 0x00000002;
      oKKJFIBNGCE = value;
      return this;
    }

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     * @return whether the eAMLKLABFBO field is set
     */
    public boolean hasEAMLKLABFBO() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     * @return this
     */
    public DiscardRelicCsReq clearEAMLKLABFBO() {
      bitField0_ &= ~0x00000004;
      eAMLKLABFBO.clear();
      return this;
    }

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEAMLKLABFBO()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getEAMLKLABFBO() {
      return eAMLKLABFBO;
    }

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableEAMLKLABFBO() {
      bitField0_ |= 0x00000004;
      return eAMLKLABFBO;
    }

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     * @param value the eAMLKLABFBO to add
     * @return this
     */
    public DiscardRelicCsReq addEAMLKLABFBO(final int value) {
      bitField0_ |= 0x00000004;
      eAMLKLABFBO.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 EAMLKLABFBO = 10;</code>
     * @param values the eAMLKLABFBO to add
     * @return this
     */
    public DiscardRelicCsReq addAllEAMLKLABFBO(final int... values) {
      bitField0_ |= 0x00000004;
      eAMLKLABFBO.addAll(values);
      return this;
    }

    @Override
    public DiscardRelicCsReq copyFrom(final DiscardRelicCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        isDiscard = other.isDiscard;
        oKKJFIBNGCE = other.oKKJFIBNGCE;
        eAMLKLABFBO.copyFrom(other.eAMLKLABFBO);
      }
      return this;
    }

    @Override
    public DiscardRelicCsReq mergeFrom(final DiscardRelicCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasIsDiscard()) {
        setIsDiscard(other.isDiscard);
      }
      if (other.hasOKKJFIBNGCE()) {
        setOKKJFIBNGCE(other.oKKJFIBNGCE);
      }
      if (other.hasEAMLKLABFBO()) {
        getMutableEAMLKLABFBO().addAll(other.eAMLKLABFBO);
      }
      return this;
    }

    @Override
    public DiscardRelicCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      isDiscard = false;
      oKKJFIBNGCE = false;
      eAMLKLABFBO.clear();
      return this;
    }

    @Override
    public DiscardRelicCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      eAMLKLABFBO.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof DiscardRelicCsReq)) {
        return false;
      }
      DiscardRelicCsReq other = (DiscardRelicCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasIsDiscard() || isDiscard == other.isDiscard)
        && (!hasOKKJFIBNGCE() || oKKJFIBNGCE == other.oKKJFIBNGCE)
        && (!hasEAMLKLABFBO() || eAMLKLABFBO.equals(other.eAMLKLABFBO));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeBoolNoTag(isDiscard);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeBoolNoTag(oKKJFIBNGCE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < eAMLKLABFBO.length(); i++) {
          output.writeRawByte((byte) 80);
          output.writeUInt32NoTag(eAMLKLABFBO.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * eAMLKLABFBO.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(eAMLKLABFBO);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public DiscardRelicCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // isDiscard
            isDiscard = input.readBool();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // oKKJFIBNGCE
            oKKJFIBNGCE = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // eAMLKLABFBO [packed=true]
            input.readPackedUInt32(eAMLKLABFBO, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 80: {
            // eAMLKLABFBO [packed=false]
            tag = input.readRepeatedUInt32(eAMLKLABFBO, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeBool(FieldNames.isDiscard, isDiscard);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.oKKJFIBNGCE, oKKJFIBNGCE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.eAMLKLABFBO, eAMLKLABFBO);
      }
      output.endObject();
    }

    @Override
    public DiscardRelicCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1091588116:
          case -1123290487: {
            if (input.isAtField(FieldNames.isDiscard)) {
              if (!input.trySkipNullValue()) {
                isDiscard = input.readBool();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -226010209: {
            if (input.isAtField(FieldNames.oKKJFIBNGCE)) {
              if (!input.trySkipNullValue()) {
                oKKJFIBNGCE = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1668329738: {
            if (input.isAtField(FieldNames.eAMLKLABFBO)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(eAMLKLABFBO);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public DiscardRelicCsReq clone() {
      return new DiscardRelicCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static DiscardRelicCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new DiscardRelicCsReq(), data).checkInitialized();
    }

    public static DiscardRelicCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DiscardRelicCsReq(), input).checkInitialized();
    }

    public static DiscardRelicCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DiscardRelicCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating DiscardRelicCsReq messages
     */
    public static MessageFactory<DiscardRelicCsReq> getFactory() {
      return DiscardRelicCsReqFactory.INSTANCE;
    }

    private enum DiscardRelicCsReqFactory implements MessageFactory<DiscardRelicCsReq> {
      INSTANCE;

      @Override
      public DiscardRelicCsReq create() {
        return DiscardRelicCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName isDiscard = FieldName.forField("isDiscard", "is_discard");

      static final FieldName oKKJFIBNGCE = FieldName.forField("OKKJFIBNGCE");

      static final FieldName eAMLKLABFBO = FieldName.forField("EAMLKLABFBO");
    }
  }
}
