// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class MazeGroupOuterClass {
  /**
   * <pre>
   *  DNOJLEENOBJ
   * </pre>
   *
   * Protobuf type {@code MazeGroup}
   */
  public static final class MazeGroup extends ProtoMessage<MazeGroup> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  GAJDOGBEKMB
     * </pre>
     *
     * <code>optional int64 modify_time = 3;</code>
     */
    private long modifyTime;

    /**
     * <pre>
     *  FOFOJABMFCC
     * </pre>
     *
     * <code>optional uint32 group_id = 1;</code>
     */
    private int groupId;

    /**
     * <code>optional bool LMKIKKODHPP = 5;</code>
     */
    private boolean lMKIKKODHPP;

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     */
    private final RepeatedInt eKLDIGMOAFA = RepeatedInt.newEmptyInstance();

    private MazeGroup() {
    }

    /**
     * <pre>
     *  DNOJLEENOBJ
     * </pre>
     *
     * @return a new empty instance of {@code MazeGroup}
     */
    public static MazeGroup newInstance() {
      return new MazeGroup();
    }

    /**
     * <pre>
     *  GAJDOGBEKMB
     * </pre>
     *
     * <code>optional int64 modify_time = 3;</code>
     * @return whether the modifyTime field is set
     */
    public boolean hasModifyTime() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  GAJDOGBEKMB
     * </pre>
     *
     * <code>optional int64 modify_time = 3;</code>
     * @return this
     */
    public MazeGroup clearModifyTime() {
      bitField0_ &= ~0x00000001;
      modifyTime = 0L;
      return this;
    }

    /**
     * <pre>
     *  GAJDOGBEKMB
     * </pre>
     *
     * <code>optional int64 modify_time = 3;</code>
     * @return the modifyTime
     */
    public long getModifyTime() {
      return modifyTime;
    }

    /**
     * <pre>
     *  GAJDOGBEKMB
     * </pre>
     *
     * <code>optional int64 modify_time = 3;</code>
     * @param value the modifyTime to set
     * @return this
     */
    public MazeGroup setModifyTime(final long value) {
      bitField0_ |= 0x00000001;
      modifyTime = value;
      return this;
    }

    /**
     * <pre>
     *  FOFOJABMFCC
     * </pre>
     *
     * <code>optional uint32 group_id = 1;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     *  FOFOJABMFCC
     * </pre>
     *
     * <code>optional uint32 group_id = 1;</code>
     * @return this
     */
    public MazeGroup clearGroupId() {
      bitField0_ &= ~0x00000002;
      groupId = 0;
      return this;
    }

    /**
     * <pre>
     *  FOFOJABMFCC
     * </pre>
     *
     * <code>optional uint32 group_id = 1;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <pre>
     *  FOFOJABMFCC
     * </pre>
     *
     * <code>optional uint32 group_id = 1;</code>
     * @param value the groupId to set
     * @return this
     */
    public MazeGroup setGroupId(final int value) {
      bitField0_ |= 0x00000002;
      groupId = value;
      return this;
    }

    /**
     * <code>optional bool LMKIKKODHPP = 5;</code>
     * @return whether the lMKIKKODHPP field is set
     */
    public boolean hasLMKIKKODHPP() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool LMKIKKODHPP = 5;</code>
     * @return this
     */
    public MazeGroup clearLMKIKKODHPP() {
      bitField0_ &= ~0x00000004;
      lMKIKKODHPP = false;
      return this;
    }

    /**
     * <code>optional bool LMKIKKODHPP = 5;</code>
     * @return the lMKIKKODHPP
     */
    public boolean getLMKIKKODHPP() {
      return lMKIKKODHPP;
    }

    /**
     * <code>optional bool LMKIKKODHPP = 5;</code>
     * @param value the lMKIKKODHPP to set
     * @return this
     */
    public MazeGroup setLMKIKKODHPP(final boolean value) {
      bitField0_ |= 0x00000004;
      lMKIKKODHPP = value;
      return this;
    }

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     * @return whether the eKLDIGMOAFA field is set
     */
    public boolean hasEKLDIGMOAFA() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     * @return this
     */
    public MazeGroup clearEKLDIGMOAFA() {
      bitField0_ &= ~0x00000008;
      eKLDIGMOAFA.clear();
      return this;
    }

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEKLDIGMOAFA()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getEKLDIGMOAFA() {
      return eKLDIGMOAFA;
    }

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableEKLDIGMOAFA() {
      bitField0_ |= 0x00000008;
      return eKLDIGMOAFA;
    }

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     * @param value the eKLDIGMOAFA to add
     * @return this
     */
    public MazeGroup addEKLDIGMOAFA(final int value) {
      bitField0_ |= 0x00000008;
      eKLDIGMOAFA.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 EKLDIGMOAFA = 12;</code>
     * @param values the eKLDIGMOAFA to add
     * @return this
     */
    public MazeGroup addAllEKLDIGMOAFA(final int... values) {
      bitField0_ |= 0x00000008;
      eKLDIGMOAFA.addAll(values);
      return this;
    }

    @Override
    public MazeGroup copyFrom(final MazeGroup other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        modifyTime = other.modifyTime;
        groupId = other.groupId;
        lMKIKKODHPP = other.lMKIKKODHPP;
        eKLDIGMOAFA.copyFrom(other.eKLDIGMOAFA);
      }
      return this;
    }

    @Override
    public MazeGroup mergeFrom(final MazeGroup other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasModifyTime()) {
        setModifyTime(other.modifyTime);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasLMKIKKODHPP()) {
        setLMKIKKODHPP(other.lMKIKKODHPP);
      }
      if (other.hasEKLDIGMOAFA()) {
        getMutableEKLDIGMOAFA().addAll(other.eKLDIGMOAFA);
      }
      return this;
    }

    @Override
    public MazeGroup clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      modifyTime = 0L;
      groupId = 0;
      lMKIKKODHPP = false;
      eKLDIGMOAFA.clear();
      return this;
    }

    @Override
    public MazeGroup clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      eKLDIGMOAFA.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MazeGroup)) {
        return false;
      }
      MazeGroup other = (MazeGroup) o;
      return bitField0_ == other.bitField0_
        && (!hasModifyTime() || modifyTime == other.modifyTime)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasLMKIKKODHPP() || lMKIKKODHPP == other.lMKIKKODHPP)
        && (!hasEKLDIGMOAFA() || eKLDIGMOAFA.equals(other.eKLDIGMOAFA));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeInt64NoTag(modifyTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 40);
        output.writeBoolNoTag(lMKIKKODHPP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < eKLDIGMOAFA.length(); i++) {
          output.writeRawByte((byte) 96);
          output.writeUInt32NoTag(eKLDIGMOAFA.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(modifyTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * eKLDIGMOAFA.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(eKLDIGMOAFA);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MazeGroup mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // modifyTime
            modifyTime = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 8) {
              break;
            }
          }
          case 8: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // lMKIKKODHPP
            lMKIKKODHPP = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // eKLDIGMOAFA [packed=true]
            input.readPackedUInt32(eKLDIGMOAFA, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 96: {
            // eKLDIGMOAFA [packed=false]
            tag = input.readRepeatedUInt32(eKLDIGMOAFA, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.modifyTime, modifyTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.lMKIKKODHPP, lMKIKKODHPP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.eKLDIGMOAFA, eKLDIGMOAFA);
      }
      output.endObject();
    }

    @Override
    public MazeGroup mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1211388583:
          case -1091176654: {
            if (input.isAtField(FieldNames.modifyTime)) {
              if (!input.trySkipNullValue()) {
                modifyTime = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1054442124: {
            if (input.isAtField(FieldNames.lMKIKKODHPP)) {
              if (!input.trySkipNullValue()) {
                lMKIKKODHPP = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -495312098: {
            if (input.isAtField(FieldNames.eKLDIGMOAFA)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(eKLDIGMOAFA);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MazeGroup clone() {
      return new MazeGroup().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MazeGroup parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MazeGroup(), data).checkInitialized();
    }

    public static MazeGroup parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MazeGroup(), input).checkInitialized();
    }

    public static MazeGroup parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MazeGroup(), input).checkInitialized();
    }

    /**
     * @return factory for creating MazeGroup messages
     */
    public static MessageFactory<MazeGroup> getFactory() {
      return MazeGroupFactory.INSTANCE;
    }

    private enum MazeGroupFactory implements MessageFactory<MazeGroup> {
      INSTANCE;

      @Override
      public MazeGroup create() {
        return MazeGroup.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName modifyTime = FieldName.forField("modifyTime", "modify_time");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName lMKIKKODHPP = FieldName.forField("LMKIKKODHPP");

      static final FieldName eKLDIGMOAFA = FieldName.forField("EKLDIGMOAFA");
    }
  }
}
