// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;
import us.hebi.quickbuf.Utf8String;

public final class SceneInfoOuterClass {
  /**
   * Protobuf type {@code SceneInfo}
   */
  public static final class SceneInfo extends ProtoMessage<SceneInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 plane_id = 2;</code>
     */
    private int planeId;

    /**
     * <code>optional uint32 game_mode_type = 5;</code>
     */
    private int gameModeType;

    /**
     * <code>optional uint32 client_pos_version = 7;</code>
     */
    private int clientPosVersion;

    /**
     * <code>optional uint32 floor_id = 11;</code>
     */
    private int floorId;

    /**
     * <code>optional uint32 entry_id = 13;</code>
     */
    private int entryId;

    /**
     * <code>optional uint32 leader_entity_id = 14;</code>
     */
    private int leaderEntityId;

    /**
     * <code>optional uint32 world_id = 15;</code>
     */
    private int worldId;

    /**
     * <code>optional uint32 PHPHBMIAOGG = 81;</code>
     */
    private int pHPHBMIAOGG;

    /**
     * <code>optional uint32 map_entry_id = 599;</code>
     */
    private int mapEntryId;

    /**
     * <code>optional uint32 FGPALNEPABC = 1226;</code>
     */
    private int fGPALNEPABC;

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     */
    private final RepeatedInt groupIdList = RepeatedInt.newEmptyInstance();

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     */
    private final RepeatedInt lightenSectionList = RepeatedInt.newEmptyInstance();

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     */
    private final RepeatedMessage<EntityBuffInfoOuterClass.EntityBuffInfo> gFNKBPCGCHB = RepeatedMessage.newEmptyInstance(EntityBuffInfoOuterClass.EntityBuffInfo.getFactory());

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     */
    private final RepeatedMessage<SceneEntityInfoOuterClass.SceneEntityInfo> entityList = RepeatedMessage.newEmptyInstance(SceneEntityInfoOuterClass.SceneEntityInfo.getFactory());

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     */
    private final RepeatedMessage<BuffInfoOuterClass.BuffInfo> iOJCJAJKCKJ = RepeatedMessage.newEmptyInstance(BuffInfoOuterClass.BuffInfo.getFactory());

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     */
    private final RepeatedMessage<BOMLAPEJGIJEntry> bOMLAPEJGIJ = RepeatedMessage.newEmptyInstance(BOMLAPEJGIJEntry.getFactory());

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     */
    private final RepeatedMessage<SceneGroupStateOuterClass.SceneGroupState> groupStateList = RepeatedMessage.newEmptyInstance(SceneGroupStateOuterClass.SceneGroupState.getFactory());

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     */
    private final RepeatedMessage<SceneEntityGroupInfoOuterClass.SceneEntityGroupInfo> entityGroupList = RepeatedMessage.newEmptyInstance(SceneEntityGroupInfoOuterClass.SceneEntityGroupInfo.getFactory());

    private SceneInfo() {
    }

    /**
     * @return a new empty instance of {@code SceneInfo}
     */
    public static SceneInfo newInstance() {
      return new SceneInfo();
    }

    /**
     * <code>optional uint32 plane_id = 2;</code>
     * @return whether the planeId field is set
     */
    public boolean hasPlaneId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 plane_id = 2;</code>
     * @return this
     */
    public SceneInfo clearPlaneId() {
      bitField0_ &= ~0x00000001;
      planeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 plane_id = 2;</code>
     * @return the planeId
     */
    public int getPlaneId() {
      return planeId;
    }

    /**
     * <code>optional uint32 plane_id = 2;</code>
     * @param value the planeId to set
     * @return this
     */
    public SceneInfo setPlaneId(final int value) {
      bitField0_ |= 0x00000001;
      planeId = value;
      return this;
    }

    /**
     * <code>optional uint32 game_mode_type = 5;</code>
     * @return whether the gameModeType field is set
     */
    public boolean hasGameModeType() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 game_mode_type = 5;</code>
     * @return this
     */
    public SceneInfo clearGameModeType() {
      bitField0_ &= ~0x00000002;
      gameModeType = 0;
      return this;
    }

    /**
     * <code>optional uint32 game_mode_type = 5;</code>
     * @return the gameModeType
     */
    public int getGameModeType() {
      return gameModeType;
    }

    /**
     * <code>optional uint32 game_mode_type = 5;</code>
     * @param value the gameModeType to set
     * @return this
     */
    public SceneInfo setGameModeType(final int value) {
      bitField0_ |= 0x00000002;
      gameModeType = value;
      return this;
    }

    /**
     * <code>optional uint32 client_pos_version = 7;</code>
     * @return whether the clientPosVersion field is set
     */
    public boolean hasClientPosVersion() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 client_pos_version = 7;</code>
     * @return this
     */
    public SceneInfo clearClientPosVersion() {
      bitField0_ &= ~0x00000004;
      clientPosVersion = 0;
      return this;
    }

    /**
     * <code>optional uint32 client_pos_version = 7;</code>
     * @return the clientPosVersion
     */
    public int getClientPosVersion() {
      return clientPosVersion;
    }

    /**
     * <code>optional uint32 client_pos_version = 7;</code>
     * @param value the clientPosVersion to set
     * @return this
     */
    public SceneInfo setClientPosVersion(final int value) {
      bitField0_ |= 0x00000004;
      clientPosVersion = value;
      return this;
    }

    /**
     * <code>optional uint32 floor_id = 11;</code>
     * @return whether the floorId field is set
     */
    public boolean hasFloorId() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 floor_id = 11;</code>
     * @return this
     */
    public SceneInfo clearFloorId() {
      bitField0_ &= ~0x00000008;
      floorId = 0;
      return this;
    }

    /**
     * <code>optional uint32 floor_id = 11;</code>
     * @return the floorId
     */
    public int getFloorId() {
      return floorId;
    }

    /**
     * <code>optional uint32 floor_id = 11;</code>
     * @param value the floorId to set
     * @return this
     */
    public SceneInfo setFloorId(final int value) {
      bitField0_ |= 0x00000008;
      floorId = value;
      return this;
    }

    /**
     * <code>optional uint32 entry_id = 13;</code>
     * @return whether the entryId field is set
     */
    public boolean hasEntryId() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 entry_id = 13;</code>
     * @return this
     */
    public SceneInfo clearEntryId() {
      bitField0_ &= ~0x00000010;
      entryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 entry_id = 13;</code>
     * @return the entryId
     */
    public int getEntryId() {
      return entryId;
    }

    /**
     * <code>optional uint32 entry_id = 13;</code>
     * @param value the entryId to set
     * @return this
     */
    public SceneInfo setEntryId(final int value) {
      bitField0_ |= 0x00000010;
      entryId = value;
      return this;
    }

    /**
     * <code>optional uint32 leader_entity_id = 14;</code>
     * @return whether the leaderEntityId field is set
     */
    public boolean hasLeaderEntityId() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 leader_entity_id = 14;</code>
     * @return this
     */
    public SceneInfo clearLeaderEntityId() {
      bitField0_ &= ~0x00000020;
      leaderEntityId = 0;
      return this;
    }

    /**
     * <code>optional uint32 leader_entity_id = 14;</code>
     * @return the leaderEntityId
     */
    public int getLeaderEntityId() {
      return leaderEntityId;
    }

    /**
     * <code>optional uint32 leader_entity_id = 14;</code>
     * @param value the leaderEntityId to set
     * @return this
     */
    public SceneInfo setLeaderEntityId(final int value) {
      bitField0_ |= 0x00000020;
      leaderEntityId = value;
      return this;
    }

    /**
     * <code>optional uint32 world_id = 15;</code>
     * @return whether the worldId field is set
     */
    public boolean hasWorldId() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional uint32 world_id = 15;</code>
     * @return this
     */
    public SceneInfo clearWorldId() {
      bitField0_ &= ~0x00000040;
      worldId = 0;
      return this;
    }

    /**
     * <code>optional uint32 world_id = 15;</code>
     * @return the worldId
     */
    public int getWorldId() {
      return worldId;
    }

    /**
     * <code>optional uint32 world_id = 15;</code>
     * @param value the worldId to set
     * @return this
     */
    public SceneInfo setWorldId(final int value) {
      bitField0_ |= 0x00000040;
      worldId = value;
      return this;
    }

    /**
     * <code>optional uint32 PHPHBMIAOGG = 81;</code>
     * @return whether the pHPHBMIAOGG field is set
     */
    public boolean hasPHPHBMIAOGG() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional uint32 PHPHBMIAOGG = 81;</code>
     * @return this
     */
    public SceneInfo clearPHPHBMIAOGG() {
      bitField0_ &= ~0x00000080;
      pHPHBMIAOGG = 0;
      return this;
    }

    /**
     * <code>optional uint32 PHPHBMIAOGG = 81;</code>
     * @return the pHPHBMIAOGG
     */
    public int getPHPHBMIAOGG() {
      return pHPHBMIAOGG;
    }

    /**
     * <code>optional uint32 PHPHBMIAOGG = 81;</code>
     * @param value the pHPHBMIAOGG to set
     * @return this
     */
    public SceneInfo setPHPHBMIAOGG(final int value) {
      bitField0_ |= 0x00000080;
      pHPHBMIAOGG = value;
      return this;
    }

    /**
     * <code>optional uint32 map_entry_id = 599;</code>
     * @return whether the mapEntryId field is set
     */
    public boolean hasMapEntryId() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional uint32 map_entry_id = 599;</code>
     * @return this
     */
    public SceneInfo clearMapEntryId() {
      bitField0_ &= ~0x00000100;
      mapEntryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 map_entry_id = 599;</code>
     * @return the mapEntryId
     */
    public int getMapEntryId() {
      return mapEntryId;
    }

    /**
     * <code>optional uint32 map_entry_id = 599;</code>
     * @param value the mapEntryId to set
     * @return this
     */
    public SceneInfo setMapEntryId(final int value) {
      bitField0_ |= 0x00000100;
      mapEntryId = value;
      return this;
    }

    /**
     * <code>optional uint32 FGPALNEPABC = 1226;</code>
     * @return whether the fGPALNEPABC field is set
     */
    public boolean hasFGPALNEPABC() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional uint32 FGPALNEPABC = 1226;</code>
     * @return this
     */
    public SceneInfo clearFGPALNEPABC() {
      bitField0_ &= ~0x00000200;
      fGPALNEPABC = 0;
      return this;
    }

    /**
     * <code>optional uint32 FGPALNEPABC = 1226;</code>
     * @return the fGPALNEPABC
     */
    public int getFGPALNEPABC() {
      return fGPALNEPABC;
    }

    /**
     * <code>optional uint32 FGPALNEPABC = 1226;</code>
     * @param value the fGPALNEPABC to set
     * @return this
     */
    public SceneInfo setFGPALNEPABC(final int value) {
      bitField0_ |= 0x00000200;
      fGPALNEPABC = value;
      return this;
    }

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     * @return whether the groupIdList field is set
     */
    public boolean hasGroupIdList() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     * @return this
     */
    public SceneInfo clearGroupIdList() {
      bitField0_ &= ~0x00000400;
      groupIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGroupIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getGroupIdList() {
      return groupIdList;
    }

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableGroupIdList() {
      bitField0_ |= 0x00000400;
      return groupIdList;
    }

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     * @param value the groupIdList to add
     * @return this
     */
    public SceneInfo addGroupIdList(final int value) {
      bitField0_ |= 0x00000400;
      groupIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 group_id_list = 1;</code>
     * @param values the groupIdList to add
     * @return this
     */
    public SceneInfo addAllGroupIdList(final int... values) {
      bitField0_ |= 0x00000400;
      groupIdList.addAll(values);
      return this;
    }

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     * @return whether the lightenSectionList field is set
     */
    public boolean hasLightenSectionList() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     * @return this
     */
    public SceneInfo clearLightenSectionList() {
      bitField0_ &= ~0x00000800;
      lightenSectionList.clear();
      return this;
    }

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLightenSectionList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getLightenSectionList() {
      return lightenSectionList;
    }

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableLightenSectionList() {
      bitField0_ |= 0x00000800;
      return lightenSectionList;
    }

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     * @param value the lightenSectionList to add
     * @return this
     */
    public SceneInfo addLightenSectionList(final int value) {
      bitField0_ |= 0x00000800;
      lightenSectionList.add(value);
      return this;
    }

    /**
     * <pre>
     * repeated NLLCOJPPKLJ BPJADFJKBJD = 3;
     * </pre>
     *
     * <code>repeated uint32 lighten_section_list = 8;</code>
     * @param values the lightenSectionList to add
     * @return this
     */
    public SceneInfo addAllLightenSectionList(final int... values) {
      bitField0_ |= 0x00000800;
      lightenSectionList.addAll(values);
      return this;
    }

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     * @return whether the gFNKBPCGCHB field is set
     */
    public boolean hasGFNKBPCGCHB() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     * @return this
     */
    public SceneInfo clearGFNKBPCGCHB() {
      bitField0_ &= ~0x00001000;
      gFNKBPCGCHB.clear();
      return this;
    }

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGFNKBPCGCHB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<EntityBuffInfoOuterClass.EntityBuffInfo> getGFNKBPCGCHB() {
      return gFNKBPCGCHB;
    }

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<EntityBuffInfoOuterClass.EntityBuffInfo> getMutableGFNKBPCGCHB() {
      bitField0_ |= 0x00001000;
      return gFNKBPCGCHB;
    }

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     * @param value the gFNKBPCGCHB to add
     * @return this
     */
    public SceneInfo addGFNKBPCGCHB(final EntityBuffInfoOuterClass.EntityBuffInfo value) {
      bitField0_ |= 0x00001000;
      gFNKBPCGCHB.add(value);
      return this;
    }

    /**
     * <pre>
     * JIPKADFNHNH HFIGNONOMIC = 1816;
     * </pre>
     *
     * <code>repeated .EntityBuffInfo GFNKBPCGCHB = 4;</code>
     * @param values the gFNKBPCGCHB to add
     * @return this
     */
    public SceneInfo addAllGFNKBPCGCHB(final EntityBuffInfoOuterClass.EntityBuffInfo... values) {
      bitField0_ |= 0x00001000;
      gFNKBPCGCHB.addAll(values);
      return this;
    }

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     * @return whether the entityList field is set
     */
    public boolean hasEntityList() {
      return (bitField0_ & 0x00002000) != 0;
    }

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     * @return this
     */
    public SceneInfo clearEntityList() {
      bitField0_ &= ~0x00002000;
      entityList.clear();
      return this;
    }

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEntityList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<SceneEntityInfoOuterClass.SceneEntityInfo> getEntityList() {
      return entityList;
    }

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<SceneEntityInfoOuterClass.SceneEntityInfo> getMutableEntityList() {
      bitField0_ |= 0x00002000;
      return entityList;
    }

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     * @param value the entityList to add
     * @return this
     */
    public SceneInfo addEntityList(final SceneEntityInfoOuterClass.SceneEntityInfo value) {
      bitField0_ |= 0x00002000;
      entityList.add(value);
      return this;
    }

    /**
     * <code>repeated .SceneEntityInfo entity_list = 6;</code>
     * @param values the entityList to add
     * @return this
     */
    public SceneInfo addAllEntityList(final SceneEntityInfoOuterClass.SceneEntityInfo... values) {
      bitField0_ |= 0x00002000;
      entityList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     * @return whether the iOJCJAJKCKJ field is set
     */
    public boolean hasIOJCJAJKCKJ() {
      return (bitField0_ & 0x00004000) != 0;
    }

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     * @return this
     */
    public SceneInfo clearIOJCJAJKCKJ() {
      bitField0_ &= ~0x00004000;
      iOJCJAJKCKJ.clear();
      return this;
    }

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableIOJCJAJKCKJ()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BuffInfoOuterClass.BuffInfo> getIOJCJAJKCKJ() {
      return iOJCJAJKCKJ;
    }

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BuffInfoOuterClass.BuffInfo> getMutableIOJCJAJKCKJ() {
      bitField0_ |= 0x00004000;
      return iOJCJAJKCKJ;
    }

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     * @param value the iOJCJAJKCKJ to add
     * @return this
     */
    public SceneInfo addIOJCJAJKCKJ(final BuffInfoOuterClass.BuffInfo value) {
      bitField0_ |= 0x00004000;
      iOJCJAJKCKJ.add(value);
      return this;
    }

    /**
     * <code>repeated .BuffInfo IOJCJAJKCKJ = 12;</code>
     * @param values the iOJCJAJKCKJ to add
     * @return this
     */
    public SceneInfo addAllIOJCJAJKCKJ(final BuffInfoOuterClass.BuffInfo... values) {
      bitField0_ |= 0x00004000;
      iOJCJAJKCKJ.addAll(values);
      return this;
    }

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     * @return whether the bOMLAPEJGIJ field is set
     */
    public boolean hasBOMLAPEJGIJ() {
      return (bitField0_ & 0x00008000) != 0;
    }

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     * @return this
     */
    public SceneInfo clearBOMLAPEJGIJ() {
      bitField0_ &= ~0x00008000;
      bOMLAPEJGIJ.clear();
      return this;
    }

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBOMLAPEJGIJ()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BOMLAPEJGIJEntry> getBOMLAPEJGIJ() {
      return bOMLAPEJGIJ;
    }

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BOMLAPEJGIJEntry> getMutableBOMLAPEJGIJ() {
      bitField0_ |= 0x00008000;
      return bOMLAPEJGIJ;
    }

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     * @param value the bOMLAPEJGIJ to add
     * @return this
     */
    public SceneInfo addBOMLAPEJGIJ(final BOMLAPEJGIJEntry value) {
      bitField0_ |= 0x00008000;
      bOMLAPEJGIJ.add(value);
      return this;
    }

    /**
     * <code>repeated .SceneInfo.BOMLAPEJGIJEntry BOMLAPEJGIJ = 1458;</code>
     * @param values the bOMLAPEJGIJ to add
     * @return this
     */
    public SceneInfo addAllBOMLAPEJGIJ(final BOMLAPEJGIJEntry... values) {
      bitField0_ |= 0x00008000;
      bOMLAPEJGIJ.addAll(values);
      return this;
    }

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     * @return whether the groupStateList field is set
     */
    public boolean hasGroupStateList() {
      return (bitField0_ & 0x00010000) != 0;
    }

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     * @return this
     */
    public SceneInfo clearGroupStateList() {
      bitField0_ &= ~0x00010000;
      groupStateList.clear();
      return this;
    }

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGroupStateList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<SceneGroupStateOuterClass.SceneGroupState> getGroupStateList() {
      return groupStateList;
    }

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<SceneGroupStateOuterClass.SceneGroupState> getMutableGroupStateList() {
      bitField0_ |= 0x00010000;
      return groupStateList;
    }

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     * @param value the groupStateList to add
     * @return this
     */
    public SceneInfo addGroupStateList(final SceneGroupStateOuterClass.SceneGroupState value) {
      bitField0_ |= 0x00010000;
      groupStateList.add(value);
      return this;
    }

    /**
     * <code>repeated .SceneGroupState group_state_list = 1577;</code>
     * @param values the groupStateList to add
     * @return this
     */
    public SceneInfo addAllGroupStateList(
        final SceneGroupStateOuterClass.SceneGroupState... values) {
      bitField0_ |= 0x00010000;
      groupStateList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     * @return whether the entityGroupList field is set
     */
    public boolean hasEntityGroupList() {
      return (bitField0_ & 0x00020000) != 0;
    }

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     * @return this
     */
    public SceneInfo clearEntityGroupList() {
      bitField0_ &= ~0x00020000;
      entityGroupList.clear();
      return this;
    }

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEntityGroupList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<SceneEntityGroupInfoOuterClass.SceneEntityGroupInfo> getEntityGroupList(
        ) {
      return entityGroupList;
    }

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<SceneEntityGroupInfoOuterClass.SceneEntityGroupInfo> getMutableEntityGroupList(
        ) {
      bitField0_ |= 0x00020000;
      return entityGroupList;
    }

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     * @param value the entityGroupList to add
     * @return this
     */
    public SceneInfo addEntityGroupList(
        final SceneEntityGroupInfoOuterClass.SceneEntityGroupInfo value) {
      bitField0_ |= 0x00020000;
      entityGroupList.add(value);
      return this;
    }

    /**
     * <code>repeated .SceneEntityGroupInfo entity_group_list = 1909;</code>
     * @param values the entityGroupList to add
     * @return this
     */
    public SceneInfo addAllEntityGroupList(
        final SceneEntityGroupInfoOuterClass.SceneEntityGroupInfo... values) {
      bitField0_ |= 0x00020000;
      entityGroupList.addAll(values);
      return this;
    }

    @Override
    public SceneInfo copyFrom(final SceneInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        planeId = other.planeId;
        gameModeType = other.gameModeType;
        clientPosVersion = other.clientPosVersion;
        floorId = other.floorId;
        entryId = other.entryId;
        leaderEntityId = other.leaderEntityId;
        worldId = other.worldId;
        pHPHBMIAOGG = other.pHPHBMIAOGG;
        mapEntryId = other.mapEntryId;
        fGPALNEPABC = other.fGPALNEPABC;
        groupIdList.copyFrom(other.groupIdList);
        lightenSectionList.copyFrom(other.lightenSectionList);
        gFNKBPCGCHB.copyFrom(other.gFNKBPCGCHB);
        entityList.copyFrom(other.entityList);
        iOJCJAJKCKJ.copyFrom(other.iOJCJAJKCKJ);
        bOMLAPEJGIJ.copyFrom(other.bOMLAPEJGIJ);
        groupStateList.copyFrom(other.groupStateList);
        entityGroupList.copyFrom(other.entityGroupList);
      }
      return this;
    }

    @Override
    public SceneInfo mergeFrom(final SceneInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasPlaneId()) {
        setPlaneId(other.planeId);
      }
      if (other.hasGameModeType()) {
        setGameModeType(other.gameModeType);
      }
      if (other.hasClientPosVersion()) {
        setClientPosVersion(other.clientPosVersion);
      }
      if (other.hasFloorId()) {
        setFloorId(other.floorId);
      }
      if (other.hasEntryId()) {
        setEntryId(other.entryId);
      }
      if (other.hasLeaderEntityId()) {
        setLeaderEntityId(other.leaderEntityId);
      }
      if (other.hasWorldId()) {
        setWorldId(other.worldId);
      }
      if (other.hasPHPHBMIAOGG()) {
        setPHPHBMIAOGG(other.pHPHBMIAOGG);
      }
      if (other.hasMapEntryId()) {
        setMapEntryId(other.mapEntryId);
      }
      if (other.hasFGPALNEPABC()) {
        setFGPALNEPABC(other.fGPALNEPABC);
      }
      if (other.hasGroupIdList()) {
        getMutableGroupIdList().addAll(other.groupIdList);
      }
      if (other.hasLightenSectionList()) {
        getMutableLightenSectionList().addAll(other.lightenSectionList);
      }
      if (other.hasGFNKBPCGCHB()) {
        getMutableGFNKBPCGCHB().addAll(other.gFNKBPCGCHB);
      }
      if (other.hasEntityList()) {
        getMutableEntityList().addAll(other.entityList);
      }
      if (other.hasIOJCJAJKCKJ()) {
        getMutableIOJCJAJKCKJ().addAll(other.iOJCJAJKCKJ);
      }
      if (other.hasBOMLAPEJGIJ()) {
        getMutableBOMLAPEJGIJ().addAll(other.bOMLAPEJGIJ);
      }
      if (other.hasGroupStateList()) {
        getMutableGroupStateList().addAll(other.groupStateList);
      }
      if (other.hasEntityGroupList()) {
        getMutableEntityGroupList().addAll(other.entityGroupList);
      }
      return this;
    }

    @Override
    public SceneInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      planeId = 0;
      gameModeType = 0;
      clientPosVersion = 0;
      floorId = 0;
      entryId = 0;
      leaderEntityId = 0;
      worldId = 0;
      pHPHBMIAOGG = 0;
      mapEntryId = 0;
      fGPALNEPABC = 0;
      groupIdList.clear();
      lightenSectionList.clear();
      gFNKBPCGCHB.clear();
      entityList.clear();
      iOJCJAJKCKJ.clear();
      bOMLAPEJGIJ.clear();
      groupStateList.clear();
      entityGroupList.clear();
      return this;
    }

    @Override
    public SceneInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      groupIdList.clear();
      lightenSectionList.clear();
      gFNKBPCGCHB.clearQuick();
      entityList.clearQuick();
      iOJCJAJKCKJ.clearQuick();
      bOMLAPEJGIJ.clearQuick();
      groupStateList.clearQuick();
      entityGroupList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SceneInfo)) {
        return false;
      }
      SceneInfo other = (SceneInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasPlaneId() || planeId == other.planeId)
        && (!hasGameModeType() || gameModeType == other.gameModeType)
        && (!hasClientPosVersion() || clientPosVersion == other.clientPosVersion)
        && (!hasFloorId() || floorId == other.floorId)
        && (!hasEntryId() || entryId == other.entryId)
        && (!hasLeaderEntityId() || leaderEntityId == other.leaderEntityId)
        && (!hasWorldId() || worldId == other.worldId)
        && (!hasPHPHBMIAOGG() || pHPHBMIAOGG == other.pHPHBMIAOGG)
        && (!hasMapEntryId() || mapEntryId == other.mapEntryId)
        && (!hasFGPALNEPABC() || fGPALNEPABC == other.fGPALNEPABC)
        && (!hasGroupIdList() || groupIdList.equals(other.groupIdList))
        && (!hasLightenSectionList() || lightenSectionList.equals(other.lightenSectionList))
        && (!hasGFNKBPCGCHB() || gFNKBPCGCHB.equals(other.gFNKBPCGCHB))
        && (!hasEntityList() || entityList.equals(other.entityList))
        && (!hasIOJCJAJKCKJ() || iOJCJAJKCKJ.equals(other.iOJCJAJKCKJ))
        && (!hasBOMLAPEJGIJ() || bOMLAPEJGIJ.equals(other.bOMLAPEJGIJ))
        && (!hasGroupStateList() || groupStateList.equals(other.groupStateList))
        && (!hasEntityGroupList() || entityGroupList.equals(other.entityGroupList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(planeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(gameModeType);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(clientPosVersion);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(floorId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(entryId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(leaderEntityId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(worldId);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawLittleEndian16((short) 1416);
        output.writeUInt32NoTag(pHPHBMIAOGG);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawLittleEndian16((short) 9656);
        output.writeUInt32NoTag(mapEntryId);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawLittleEndian16((short) 19664);
        output.writeUInt32NoTag(fGPALNEPABC);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        for (int i = 0; i < groupIdList.length(); i++) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(groupIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000800) != 0) {
        for (int i = 0; i < lightenSectionList.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(lightenSectionList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00001000) != 0) {
        for (int i = 0; i < gFNKBPCGCHB.length(); i++) {
          output.writeRawByte((byte) 34);
          output.writeMessageNoTag(gFNKBPCGCHB.get(i));
        }
      }
      if ((bitField0_ & 0x00002000) != 0) {
        for (int i = 0; i < entityList.length(); i++) {
          output.writeRawByte((byte) 50);
          output.writeMessageNoTag(entityList.get(i));
        }
      }
      if ((bitField0_ & 0x00004000) != 0) {
        for (int i = 0; i < iOJCJAJKCKJ.length(); i++) {
          output.writeRawByte((byte) 98);
          output.writeMessageNoTag(iOJCJAJKCKJ.get(i));
        }
      }
      if ((bitField0_ & 0x00008000) != 0) {
        for (int i = 0; i < bOMLAPEJGIJ.length(); i++) {
          output.writeRawLittleEndian16((short) 23442);
          output.writeMessageNoTag(bOMLAPEJGIJ.get(i));
        }
      }
      if ((bitField0_ & 0x00010000) != 0) {
        for (int i = 0; i < groupStateList.length(); i++) {
          output.writeRawLittleEndian16((short) 25290);
          output.writeMessageNoTag(groupStateList.get(i));
        }
      }
      if ((bitField0_ & 0x00020000) != 0) {
        for (int i = 0; i < entityGroupList.length(); i++) {
          output.writeRawLittleEndian16((short) 30634);
          output.writeMessageNoTag(entityGroupList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(planeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gameModeType);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(clientPosVersion);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(floorId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(entryId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(leaderEntityId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(worldId);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(pHPHBMIAOGG);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(mapEntryId);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(fGPALNEPABC);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += (1 * groupIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(groupIdList);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += (1 * lightenSectionList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(lightenSectionList);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += (1 * gFNKBPCGCHB.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(gFNKBPCGCHB);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        size += (1 * entityList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(entityList);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        size += (1 * iOJCJAJKCKJ.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(iOJCJAJKCKJ);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        size += (2 * bOMLAPEJGIJ.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(bOMLAPEJGIJ);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        size += (2 * groupStateList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(groupStateList);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        size += (2 * entityGroupList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(entityGroupList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SceneInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // planeId
            planeId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // gameModeType
            gameModeType = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // clientPosVersion
            clientPosVersion = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // floorId
            floorId = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // entryId
            entryId = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // leaderEntityId
            leaderEntityId = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // worldId
            worldId = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 648) {
              break;
            }
          }
          case 648: {
            // pHPHBMIAOGG
            pHPHBMIAOGG = input.readUInt32();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 4792) {
              break;
            }
          }
          case 4792: {
            // mapEntryId
            mapEntryId = input.readUInt32();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 9808) {
              break;
            }
          }
          case 9808: {
            // fGPALNEPABC
            fGPALNEPABC = input.readUInt32();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // groupIdList [packed=true]
            input.readPackedUInt32(groupIdList, tag);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // lightenSectionList [packed=true]
            input.readPackedUInt32(lightenSectionList, tag);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // gFNKBPCGCHB
            tag = input.readRepeatedMessage(gFNKBPCGCHB, tag);
            bitField0_ |= 0x00001000;
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // entityList
            tag = input.readRepeatedMessage(entityList, tag);
            bitField0_ |= 0x00002000;
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // iOJCJAJKCKJ
            tag = input.readRepeatedMessage(iOJCJAJKCKJ, tag);
            bitField0_ |= 0x00004000;
            if (tag != 11666) {
              break;
            }
          }
          case 11666: {
            // bOMLAPEJGIJ
            tag = input.readRepeatedMessage(bOMLAPEJGIJ, tag);
            bitField0_ |= 0x00008000;
            if (tag != 12618) {
              break;
            }
          }
          case 12618: {
            // groupStateList
            tag = input.readRepeatedMessage(groupStateList, tag);
            bitField0_ |= 0x00010000;
            if (tag != 15274) {
              break;
            }
          }
          case 15274: {
            // entityGroupList
            tag = input.readRepeatedMessage(entityGroupList, tag);
            bitField0_ |= 0x00020000;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 8: {
            // groupIdList [packed=false]
            tag = input.readRepeatedUInt32(groupIdList, tag);
            bitField0_ |= 0x00000400;
            break;
          }
          case 64: {
            // lightenSectionList [packed=false]
            tag = input.readRepeatedUInt32(lightenSectionList, tag);
            bitField0_ |= 0x00000800;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.planeId, planeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.gameModeType, gameModeType);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.clientPosVersion, clientPosVersion);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.floorId, floorId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.entryId, entryId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.leaderEntityId, leaderEntityId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.worldId, worldId);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeUInt32(FieldNames.pHPHBMIAOGG, pHPHBMIAOGG);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeUInt32(FieldNames.mapEntryId, mapEntryId);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeUInt32(FieldNames.fGPALNEPABC, fGPALNEPABC);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRepeatedUInt32(FieldNames.groupIdList, groupIdList);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRepeatedUInt32(FieldNames.lightenSectionList, lightenSectionList);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRepeatedMessage(FieldNames.gFNKBPCGCHB, gFNKBPCGCHB);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeRepeatedMessage(FieldNames.entityList, entityList);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeRepeatedMessage(FieldNames.iOJCJAJKCKJ, iOJCJAJKCKJ);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeRepeatedMessage(FieldNames.bOMLAPEJGIJ, bOMLAPEJGIJ);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeRepeatedMessage(FieldNames.groupStateList, groupStateList);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeRepeatedMessage(FieldNames.entityGroupList, entityGroupList);
      }
      output.endObject();
    }

    @Override
    public SceneInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -493896553:
          case 1869097438: {
            if (input.isAtField(FieldNames.planeId)) {
              if (!input.trySkipNullValue()) {
                planeId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -464498289:
          case 1937775689: {
            if (input.isAtField(FieldNames.gameModeType)) {
              if (!input.trySkipNullValue()) {
                gameModeType = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1787644431:
          case 1278860153: {
            if (input.isAtField(FieldNames.clientPosVersion)) {
              if (!input.trySkipNullValue()) {
                clientPosVersion = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -766027193:
          case 2022982190: {
            if (input.isAtField(FieldNames.floorId)) {
              if (!input.trySkipNullValue()) {
                floorId = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1591558867:
          case -2093663224: {
            if (input.isAtField(FieldNames.entryId)) {
              if (!input.trySkipNullValue()) {
                entryId = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1693061255:
          case 794634049: {
            if (input.isAtField(FieldNames.leaderEntityId)) {
              if (!input.trySkipNullValue()) {
                leaderEntityId = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1525188685:
          case 36230376: {
            if (input.isAtField(FieldNames.worldId)) {
              if (!input.trySkipNullValue()) {
                worldId = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -205857796: {
            if (input.isAtField(FieldNames.pHPHBMIAOGG)) {
              if (!input.trySkipNullValue()) {
                pHPHBMIAOGG = input.readUInt32();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1475203023:
          case 436670347: {
            if (input.isAtField(FieldNames.mapEntryId)) {
              if (!input.trySkipNullValue()) {
                mapEntryId = input.readUInt32();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1776000195: {
            if (input.isAtField(FieldNames.fGPALNEPABC)) {
              if (!input.trySkipNullValue()) {
                fGPALNEPABC = input.readUInt32();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 457110456:
          case 1703805826: {
            if (input.isAtField(FieldNames.groupIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(groupIdList);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1942343836:
          case 1328850360: {
            if (input.isAtField(FieldNames.lightenSectionList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(lightenSectionList);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -486218833: {
            if (input.isAtField(FieldNames.gFNKBPCGCHB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(gFNKBPCGCHB);
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1483251935:
          case 1281457018: {
            if (input.isAtField(FieldNames.entityList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(entityList);
                bitField0_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1589264533: {
            if (input.isAtField(FieldNames.iOJCJAJKCKJ)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(iOJCJAJKCKJ);
                bitField0_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 804683240: {
            if (input.isAtField(FieldNames.bOMLAPEJGIJ)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(bOMLAPEJGIJ);
                bitField0_ |= 0x00008000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1415397648:
          case 1198817612: {
            if (input.isAtField(FieldNames.groupStateList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(groupStateList);
                bitField0_ |= 0x00010000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -914706662:
          case 1589108794: {
            if (input.isAtField(FieldNames.entityGroupList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(entityGroupList);
                bitField0_ |= 0x00020000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SceneInfo clone() {
      return new SceneInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SceneInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SceneInfo(), data).checkInitialized();
    }

    public static SceneInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneInfo(), input).checkInitialized();
    }

    public static SceneInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating SceneInfo messages
     */
    public static MessageFactory<SceneInfo> getFactory() {
      return SceneInfoFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code BOMLAPEJGIJEntry}
     */
    public static final class BOMLAPEJGIJEntry extends ProtoMessage<BOMLAPEJGIJEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional int32 value = 2;</code>
       */
      private int value_;

      /**
       * <code>optional string key = 1;</code>
       */
      private final Utf8String key = Utf8String.newEmptyInstance();

      private BOMLAPEJGIJEntry() {
      }

      /**
       * @return a new empty instance of {@code BOMLAPEJGIJEntry}
       */
      public static BOMLAPEJGIJEntry newInstance() {
        return new BOMLAPEJGIJEntry();
      }

      /**
       * <code>optional int32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional int32 value = 2;</code>
       * @return this
       */
      public BOMLAPEJGIJEntry clearValue() {
        bitField0_ &= ~0x00000001;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional int32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional int32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public BOMLAPEJGIJEntry setValue(final int value) {
        bitField0_ |= 0x00000001;
        value_ = value;
        return this;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return this
       */
      public BOMLAPEJGIJEntry clearKey() {
        bitField0_ &= ~0x00000002;
        key.clear();
        return this;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return the key
       */
      public String getKey() {
        return key.getString();
      }

      /**
       * <code>optional string key = 1;</code>
       * @return internal {@code Utf8String} representation of key for reading
       */
      public Utf8String getKeyBytes() {
        return this.key;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return internal {@code Utf8String} representation of key for modifications
       */
      public Utf8String getMutableKeyBytes() {
        bitField0_ |= 0x00000002;
        return this.key;
      }

      /**
       * <code>optional string key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public BOMLAPEJGIJEntry setKey(final CharSequence value) {
        bitField0_ |= 0x00000002;
        key.copyFrom(value);
        return this;
      }

      /**
       * <code>optional string key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public BOMLAPEJGIJEntry setKey(final Utf8String value) {
        bitField0_ |= 0x00000002;
        key.copyFrom(value);
        return this;
      }

      @Override
      public BOMLAPEJGIJEntry copyFrom(final BOMLAPEJGIJEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          value_ = other.value_;
          key.copyFrom(other.key);
        }
        return this;
      }

      @Override
      public BOMLAPEJGIJEntry mergeFrom(final BOMLAPEJGIJEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasValue()) {
          setValue(other.value_);
        }
        if (other.hasKey()) {
          getMutableKeyBytes().copyFrom(other.key);
        }
        return this;
      }

      @Override
      public BOMLAPEJGIJEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        value_ = 0;
        key.clear();
        return this;
      }

      @Override
      public BOMLAPEJGIJEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key.clear();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof BOMLAPEJGIJEntry)) {
          return false;
        }
        BOMLAPEJGIJEntry other = (BOMLAPEJGIJEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasValue() || value_ == other.value_)
          && (!hasKey() || key.equals(other.key));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 16);
          output.writeInt32NoTag(value_);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 10);
          output.writeStringNoTag(key);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeInt32SizeNoTag(value_);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeStringSizeNoTag(key);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public BOMLAPEJGIJEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 16: {
              // value_
              value_ = input.readInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 10) {
                break;
              }
            }
            case 10: {
              // key
              input.readString(key);
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeInt32(FieldNames.value_, value_);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeString(FieldNames.key, key);
        }
        output.endObject();
      }

      @Override
      public BOMLAPEJGIJEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  input.readString(key);
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public BOMLAPEJGIJEntry clone() {
        return new BOMLAPEJGIJEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static BOMLAPEJGIJEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new BOMLAPEJGIJEntry(), data).checkInitialized();
      }

      public static BOMLAPEJGIJEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new BOMLAPEJGIJEntry(), input).checkInitialized();
      }

      public static BOMLAPEJGIJEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new BOMLAPEJGIJEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating BOMLAPEJGIJEntry messages
       */
      public static MessageFactory<BOMLAPEJGIJEntry> getFactory() {
        return BOMLAPEJGIJEntryFactory.INSTANCE;
      }

      private enum BOMLAPEJGIJEntryFactory implements MessageFactory<BOMLAPEJGIJEntry> {
        INSTANCE;

        @Override
        public BOMLAPEJGIJEntry create() {
          return BOMLAPEJGIJEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName value_ = FieldName.forField("value");

        static final FieldName key = FieldName.forField("key");
      }
    }

    private enum SceneInfoFactory implements MessageFactory<SceneInfo> {
      INSTANCE;

      @Override
      public SceneInfo create() {
        return SceneInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName planeId = FieldName.forField("planeId", "plane_id");

      static final FieldName gameModeType = FieldName.forField("gameModeType", "game_mode_type");

      static final FieldName clientPosVersion = FieldName.forField("clientPosVersion", "client_pos_version");

      static final FieldName floorId = FieldName.forField("floorId", "floor_id");

      static final FieldName entryId = FieldName.forField("entryId", "entry_id");

      static final FieldName leaderEntityId = FieldName.forField("leaderEntityId", "leader_entity_id");

      static final FieldName worldId = FieldName.forField("worldId", "world_id");

      static final FieldName pHPHBMIAOGG = FieldName.forField("PHPHBMIAOGG");

      static final FieldName mapEntryId = FieldName.forField("mapEntryId", "map_entry_id");

      static final FieldName fGPALNEPABC = FieldName.forField("FGPALNEPABC");

      static final FieldName groupIdList = FieldName.forField("groupIdList", "group_id_list");

      static final FieldName lightenSectionList = FieldName.forField("lightenSectionList", "lighten_section_list");

      static final FieldName gFNKBPCGCHB = FieldName.forField("GFNKBPCGCHB");

      static final FieldName entityList = FieldName.forField("entityList", "entity_list");

      static final FieldName iOJCJAJKCKJ = FieldName.forField("IOJCJAJKCKJ");

      static final FieldName bOMLAPEJGIJ = FieldName.forField("BOMLAPEJGIJ");

      static final FieldName groupStateList = FieldName.forField("groupStateList", "group_state_list");

      static final FieldName entityGroupList = FieldName.forField("entityGroupList", "entity_group_list");
    }
  }
}
