// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class FeverTimeActivityBattleEndScNotifyOuterClass {
  /**
   * Protobuf type {@code FeverTimeActivityBattleEndScNotify}
   */
  public static final class FeverTimeActivityBattleEndScNotify extends ProtoMessage<FeverTimeActivityBattleEndScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 GIGKNPFCKNB = 4;</code>
     */
    private int gIGKNPFCKNB;

    /**
     * <code>optional uint32 LCPIPJLKGEK = 7;</code>
     */
    private int lCPIPJLKGEK;

    /**
     * <code>optional uint32 id = 11;</code>
     */
    private int id;

    /**
     * <code>optional .FeverTimeActivityType activity_type = 12;</code>
     */
    private int activityType;

    private FeverTimeActivityBattleEndScNotify() {
    }

    /**
     * @return a new empty instance of {@code FeverTimeActivityBattleEndScNotify}
     */
    public static FeverTimeActivityBattleEndScNotify newInstance() {
      return new FeverTimeActivityBattleEndScNotify();
    }

    /**
     * <code>optional uint32 GIGKNPFCKNB = 4;</code>
     * @return whether the gIGKNPFCKNB field is set
     */
    public boolean hasGIGKNPFCKNB() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 GIGKNPFCKNB = 4;</code>
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify clearGIGKNPFCKNB() {
      bitField0_ &= ~0x00000001;
      gIGKNPFCKNB = 0;
      return this;
    }

    /**
     * <code>optional uint32 GIGKNPFCKNB = 4;</code>
     * @return the gIGKNPFCKNB
     */
    public int getGIGKNPFCKNB() {
      return gIGKNPFCKNB;
    }

    /**
     * <code>optional uint32 GIGKNPFCKNB = 4;</code>
     * @param value the gIGKNPFCKNB to set
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify setGIGKNPFCKNB(final int value) {
      bitField0_ |= 0x00000001;
      gIGKNPFCKNB = value;
      return this;
    }

    /**
     * <code>optional uint32 LCPIPJLKGEK = 7;</code>
     * @return whether the lCPIPJLKGEK field is set
     */
    public boolean hasLCPIPJLKGEK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 LCPIPJLKGEK = 7;</code>
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify clearLCPIPJLKGEK() {
      bitField0_ &= ~0x00000002;
      lCPIPJLKGEK = 0;
      return this;
    }

    /**
     * <code>optional uint32 LCPIPJLKGEK = 7;</code>
     * @return the lCPIPJLKGEK
     */
    public int getLCPIPJLKGEK() {
      return lCPIPJLKGEK;
    }

    /**
     * <code>optional uint32 LCPIPJLKGEK = 7;</code>
     * @param value the lCPIPJLKGEK to set
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify setLCPIPJLKGEK(final int value) {
      bitField0_ |= 0x00000002;
      lCPIPJLKGEK = value;
      return this;
    }

    /**
     * <code>optional uint32 id = 11;</code>
     * @return whether the id field is set
     */
    public boolean hasId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 id = 11;</code>
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify clearId() {
      bitField0_ &= ~0x00000004;
      id = 0;
      return this;
    }

    /**
     * <code>optional uint32 id = 11;</code>
     * @return the id
     */
    public int getId() {
      return id;
    }

    /**
     * <code>optional uint32 id = 11;</code>
     * @param value the id to set
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify setId(final int value) {
      bitField0_ |= 0x00000004;
      id = value;
      return this;
    }

    /**
     * <code>optional .FeverTimeActivityType activity_type = 12;</code>
     * @return whether the activityType field is set
     */
    public boolean hasActivityType() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .FeverTimeActivityType activity_type = 12;</code>
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify clearActivityType() {
      bitField0_ &= ~0x00000008;
      activityType = 0;
      return this;
    }

    /**
     * <code>optional .FeverTimeActivityType activity_type = 12;</code>
     * @return the activityType
     */
    public FeverTimeActivityTypeOuterClass.FeverTimeActivityType getActivityType() {
      return FeverTimeActivityTypeOuterClass.FeverTimeActivityType.forNumber(activityType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link FeverTimeActivityBattleEndScNotify#getActivityType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getActivityTypeValue() {
      return activityType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link FeverTimeActivityTypeOuterClass.FeverTimeActivityType}. Setting an invalid value
     * can cause {@link FeverTimeActivityBattleEndScNotify#getActivityType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify setActivityTypeValue(final int value) {
      bitField0_ |= 0x00000008;
      activityType = value;
      return this;
    }

    /**
     * <code>optional .FeverTimeActivityType activity_type = 12;</code>
     * @param value the activityType to set
     * @return this
     */
    public FeverTimeActivityBattleEndScNotify setActivityType(
        final FeverTimeActivityTypeOuterClass.FeverTimeActivityType value) {
      bitField0_ |= 0x00000008;
      activityType = value.getNumber();
      return this;
    }

    @Override
    public FeverTimeActivityBattleEndScNotify copyFrom(
        final FeverTimeActivityBattleEndScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        gIGKNPFCKNB = other.gIGKNPFCKNB;
        lCPIPJLKGEK = other.lCPIPJLKGEK;
        id = other.id;
        activityType = other.activityType;
      }
      return this;
    }

    @Override
    public FeverTimeActivityBattleEndScNotify mergeFrom(
        final FeverTimeActivityBattleEndScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGIGKNPFCKNB()) {
        setGIGKNPFCKNB(other.gIGKNPFCKNB);
      }
      if (other.hasLCPIPJLKGEK()) {
        setLCPIPJLKGEK(other.lCPIPJLKGEK);
      }
      if (other.hasId()) {
        setId(other.id);
      }
      if (other.hasActivityType()) {
        setActivityTypeValue(other.activityType);
      }
      return this;
    }

    @Override
    public FeverTimeActivityBattleEndScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gIGKNPFCKNB = 0;
      lCPIPJLKGEK = 0;
      id = 0;
      activityType = 0;
      return this;
    }

    @Override
    public FeverTimeActivityBattleEndScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof FeverTimeActivityBattleEndScNotify)) {
        return false;
      }
      FeverTimeActivityBattleEndScNotify other = (FeverTimeActivityBattleEndScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasGIGKNPFCKNB() || gIGKNPFCKNB == other.gIGKNPFCKNB)
        && (!hasLCPIPJLKGEK() || lCPIPJLKGEK == other.lCPIPJLKGEK)
        && (!hasId() || id == other.id)
        && (!hasActivityType() || activityType == other.activityType);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(gIGKNPFCKNB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(lCPIPJLKGEK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(id);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 96);
        output.writeEnumNoTag(activityType);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gIGKNPFCKNB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lCPIPJLKGEK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(id);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(activityType);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public FeverTimeActivityBattleEndScNotify mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // gIGKNPFCKNB
            gIGKNPFCKNB = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // lCPIPJLKGEK
            lCPIPJLKGEK = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // id
            id = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // activityType
            final int value = input.readInt32();
            if (FeverTimeActivityTypeOuterClass.FeverTimeActivityType.forNumber(value) != null) {
              activityType = value;
              bitField0_ |= 0x00000008;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.gIGKNPFCKNB, gIGKNPFCKNB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.lCPIPJLKGEK, lCPIPJLKGEK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.id, id);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeEnum(FieldNames.activityType, activityType, FeverTimeActivityTypeOuterClass.FeverTimeActivityType.converter());
      }
      output.endObject();
    }

    @Override
    public FeverTimeActivityBattleEndScNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 754288858: {
            if (input.isAtField(FieldNames.gIGKNPFCKNB)) {
              if (!input.trySkipNullValue()) {
                gIGKNPFCKNB = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 574713828: {
            if (input.isAtField(FieldNames.lCPIPJLKGEK)) {
              if (!input.trySkipNullValue()) {
                lCPIPJLKGEK = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3355: {
            if (input.isAtField(FieldNames.id)) {
              if (!input.trySkipNullValue()) {
                id = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1628821225:
          case -1036130710: {
            if (input.isAtField(FieldNames.activityType)) {
              if (!input.trySkipNullValue()) {
                final FeverTimeActivityTypeOuterClass.FeverTimeActivityType value = input.readEnum(FeverTimeActivityTypeOuterClass.FeverTimeActivityType.converter());
                if (value != null) {
                  activityType = value.getNumber();
                  bitField0_ |= 0x00000008;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public FeverTimeActivityBattleEndScNotify clone() {
      return new FeverTimeActivityBattleEndScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static FeverTimeActivityBattleEndScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new FeverTimeActivityBattleEndScNotify(), data).checkInitialized();
    }

    public static FeverTimeActivityBattleEndScNotify parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new FeverTimeActivityBattleEndScNotify(), input).checkInitialized();
    }

    public static FeverTimeActivityBattleEndScNotify parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new FeverTimeActivityBattleEndScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating FeverTimeActivityBattleEndScNotify messages
     */
    public static MessageFactory<FeverTimeActivityBattleEndScNotify> getFactory() {
      return FeverTimeActivityBattleEndScNotifyFactory.INSTANCE;
    }

    private enum FeverTimeActivityBattleEndScNotifyFactory implements MessageFactory<FeverTimeActivityBattleEndScNotify> {
      INSTANCE;

      @Override
      public FeverTimeActivityBattleEndScNotify create() {
        return FeverTimeActivityBattleEndScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName gIGKNPFCKNB = FieldName.forField("GIGKNPFCKNB");

      static final FieldName lCPIPJLKGEK = FieldName.forField("LCPIPJLKGEK");

      static final FieldName id = FieldName.forField("id");

      static final FieldName activityType = FieldName.forField("activityType", "activity_type");
    }
  }
}
