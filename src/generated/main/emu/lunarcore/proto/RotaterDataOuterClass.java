// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;

public final class RotaterDataOuterClass {
  /**
   * Protobuf type {@code RotaterData}
   */
  public static final class RotaterData extends ProtoMessage<RotaterData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float FENKFPPMPBN = 1;</code>
     */
    private float fENKFPPMPBN;

    /**
     * <code>optional uint32 rotate_int = 9;</code>
     */
    private int rotateInt;

    /**
     * <code>optional uint32 group_id = 11;</code>
     */
    private int groupId;

    private RotaterData() {
    }

    /**
     * @return a new empty instance of {@code RotaterData}
     */
    public static RotaterData newInstance() {
      return new RotaterData();
    }

    /**
     * <code>optional float FENKFPPMPBN = 1;</code>
     * @return whether the fENKFPPMPBN field is set
     */
    public boolean hasFENKFPPMPBN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float FENKFPPMPBN = 1;</code>
     * @return this
     */
    public RotaterData clearFENKFPPMPBN() {
      bitField0_ &= ~0x00000001;
      fENKFPPMPBN = 0F;
      return this;
    }

    /**
     * <code>optional float FENKFPPMPBN = 1;</code>
     * @return the fENKFPPMPBN
     */
    public float getFENKFPPMPBN() {
      return fENKFPPMPBN;
    }

    /**
     * <code>optional float FENKFPPMPBN = 1;</code>
     * @param value the fENKFPPMPBN to set
     * @return this
     */
    public RotaterData setFENKFPPMPBN(final float value) {
      bitField0_ |= 0x00000001;
      fENKFPPMPBN = value;
      return this;
    }

    /**
     * <code>optional uint32 rotate_int = 9;</code>
     * @return whether the rotateInt field is set
     */
    public boolean hasRotateInt() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 rotate_int = 9;</code>
     * @return this
     */
    public RotaterData clearRotateInt() {
      bitField0_ &= ~0x00000002;
      rotateInt = 0;
      return this;
    }

    /**
     * <code>optional uint32 rotate_int = 9;</code>
     * @return the rotateInt
     */
    public int getRotateInt() {
      return rotateInt;
    }

    /**
     * <code>optional uint32 rotate_int = 9;</code>
     * @param value the rotateInt to set
     * @return this
     */
    public RotaterData setRotateInt(final int value) {
      bitField0_ |= 0x00000002;
      rotateInt = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @return this
     */
    public RotaterData clearGroupId() {
      bitField0_ &= ~0x00000004;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @param value the groupId to set
     * @return this
     */
    public RotaterData setGroupId(final int value) {
      bitField0_ |= 0x00000004;
      groupId = value;
      return this;
    }

    @Override
    public RotaterData copyFrom(final RotaterData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        fENKFPPMPBN = other.fENKFPPMPBN;
        rotateInt = other.rotateInt;
        groupId = other.groupId;
      }
      return this;
    }

    @Override
    public RotaterData mergeFrom(final RotaterData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFENKFPPMPBN()) {
        setFENKFPPMPBN(other.fENKFPPMPBN);
      }
      if (other.hasRotateInt()) {
        setRotateInt(other.rotateInt);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      return this;
    }

    @Override
    public RotaterData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fENKFPPMPBN = 0F;
      rotateInt = 0;
      groupId = 0;
      return this;
    }

    @Override
    public RotaterData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RotaterData)) {
        return false;
      }
      RotaterData other = (RotaterData) o;
      return bitField0_ == other.bitField0_
        && (!hasFENKFPPMPBN() || ProtoUtil.isEqual(fENKFPPMPBN, other.fENKFPPMPBN))
        && (!hasRotateInt() || rotateInt == other.rotateInt)
        && (!hasGroupId() || groupId == other.groupId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 13);
        output.writeFloatNoTag(fENKFPPMPBN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(rotateInt);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(groupId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rotateInt);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RotaterData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 13: {
            // fENKFPPMPBN
            fENKFPPMPBN = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // rotateInt
            rotateInt = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.fENKFPPMPBN, fENKFPPMPBN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.rotateInt, rotateInt);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      output.endObject();
    }

    @Override
    public RotaterData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 774490297: {
            if (input.isAtField(FieldNames.fENKFPPMPBN)) {
              if (!input.trySkipNullValue()) {
                fENKFPPMPBN = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1249476460:
          case -78414069: {
            if (input.isAtField(FieldNames.rotateInt)) {
              if (!input.trySkipNullValue()) {
                rotateInt = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RotaterData clone() {
      return new RotaterData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RotaterData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RotaterData(), data).checkInitialized();
    }

    public static RotaterData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RotaterData(), input).checkInitialized();
    }

    public static RotaterData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RotaterData(), input).checkInitialized();
    }

    /**
     * @return factory for creating RotaterData messages
     */
    public static MessageFactory<RotaterData> getFactory() {
      return RotaterDataFactory.INSTANCE;
    }

    private enum RotaterDataFactory implements MessageFactory<RotaterData> {
      INSTANCE;

      @Override
      public RotaterData create() {
        return RotaterData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName fENKFPPMPBN = FieldName.forField("FENKFPPMPBN");

      static final FieldName rotateInt = FieldName.forField("rotateInt", "rotate_int");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");
    }
  }
}
