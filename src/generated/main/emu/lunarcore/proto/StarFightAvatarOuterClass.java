// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class StarFightAvatarOuterClass {
  /**
   * <pre>
   *  Fnhcbggnkfd
   * </pre>
   *
   * Protobuf type {@code StarFightAvatar}
   */
  public static final class StarFightAvatar extends ProtoMessage<StarFightAvatar> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     */
    private int avatarId;

    /**
     * <code>optional .AvatarType avatar_type = 15;</code>
     */
    private int avatarType;

    private StarFightAvatar() {
    }

    /**
     * <pre>
     *  Fnhcbggnkfd
     * </pre>
     *
     * @return a new empty instance of {@code StarFightAvatar}
     */
    public static StarFightAvatar newInstance() {
      return new StarFightAvatar();
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @return whether the avatarId field is set
     */
    public boolean hasAvatarId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @return this
     */
    public StarFightAvatar clearAvatarId() {
      bitField0_ &= ~0x00000001;
      avatarId = 0;
      return this;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @return the avatarId
     */
    public int getAvatarId() {
      return avatarId;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @param value the avatarId to set
     * @return this
     */
    public StarFightAvatar setAvatarId(final int value) {
      bitField0_ |= 0x00000001;
      avatarId = value;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 15;</code>
     * @return whether the avatarType field is set
     */
    public boolean hasAvatarType() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .AvatarType avatar_type = 15;</code>
     * @return this
     */
    public StarFightAvatar clearAvatarType() {
      bitField0_ &= ~0x00000002;
      avatarType = 0;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 15;</code>
     * @return the avatarType
     */
    public AvatarTypeOuterClass.AvatarType getAvatarType() {
      return AvatarTypeOuterClass.AvatarType.forNumber(avatarType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link StarFightAvatar#getAvatarType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getAvatarTypeValue() {
      return avatarType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link AvatarTypeOuterClass.AvatarType}. Setting an invalid value
     * can cause {@link StarFightAvatar#getAvatarType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public StarFightAvatar setAvatarTypeValue(final int value) {
      bitField0_ |= 0x00000002;
      avatarType = value;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 15;</code>
     * @param value the avatarType to set
     * @return this
     */
    public StarFightAvatar setAvatarType(final AvatarTypeOuterClass.AvatarType value) {
      bitField0_ |= 0x00000002;
      avatarType = value.getNumber();
      return this;
    }

    @Override
    public StarFightAvatar copyFrom(final StarFightAvatar other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        avatarId = other.avatarId;
        avatarType = other.avatarType;
      }
      return this;
    }

    @Override
    public StarFightAvatar mergeFrom(final StarFightAvatar other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAvatarId()) {
        setAvatarId(other.avatarId);
      }
      if (other.hasAvatarType()) {
        setAvatarTypeValue(other.avatarType);
      }
      return this;
    }

    @Override
    public StarFightAvatar clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      avatarId = 0;
      avatarType = 0;
      return this;
    }

    @Override
    public StarFightAvatar clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof StarFightAvatar)) {
        return false;
      }
      StarFightAvatar other = (StarFightAvatar) o;
      return bitField0_ == other.bitField0_
        && (!hasAvatarId() || avatarId == other.avatarId)
        && (!hasAvatarType() || avatarType == other.avatarType);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(avatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeEnumNoTag(avatarType);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(avatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(avatarType);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public StarFightAvatar mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 112: {
            // avatarId
            avatarId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // avatarType
            final int value = input.readInt32();
            if (AvatarTypeOuterClass.AvatarType.forNumber(value) != null) {
              avatarType = value;
              bitField0_ |= 0x00000002;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.avatarId, avatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeEnum(FieldNames.avatarType, avatarType, AvatarTypeOuterClass.AvatarType.converter());
      }
      output.endObject();
    }

    @Override
    public StarFightAvatar mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1787287636:
          case -428636735: {
            if (input.isAtField(FieldNames.avatarId)) {
              if (!input.trySkipNullValue()) {
                avatarId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -403148749:
          case 397309536: {
            if (input.isAtField(FieldNames.avatarType)) {
              if (!input.trySkipNullValue()) {
                final AvatarTypeOuterClass.AvatarType value = input.readEnum(AvatarTypeOuterClass.AvatarType.converter());
                if (value != null) {
                  avatarType = value.getNumber();
                  bitField0_ |= 0x00000002;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public StarFightAvatar clone() {
      return new StarFightAvatar().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static StarFightAvatar parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new StarFightAvatar(), data).checkInitialized();
    }

    public static StarFightAvatar parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new StarFightAvatar(), input).checkInitialized();
    }

    public static StarFightAvatar parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new StarFightAvatar(), input).checkInitialized();
    }

    /**
     * @return factory for creating StarFightAvatar messages
     */
    public static MessageFactory<StarFightAvatar> getFactory() {
      return StarFightAvatarFactory.INSTANCE;
    }

    private enum StarFightAvatarFactory implements MessageFactory<StarFightAvatar> {
      INSTANCE;

      @Override
      public StarFightAvatar create() {
        return StarFightAvatar.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName avatarId = FieldName.forField("avatarId", "avatar_id");

      static final FieldName avatarType = FieldName.forField("avatarType", "avatar_type");
    }
  }
}
