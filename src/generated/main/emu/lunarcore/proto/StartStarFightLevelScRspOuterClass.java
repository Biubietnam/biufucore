// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class StartStarFightLevelScRspOuterClass {
  /**
   * <pre>
   *  Ffjlbfloacg
   * </pre>
   *
   * Protobuf type {@code StartStarFightLevelScRsp}
   */
  public static final class StartStarFightLevelScRsp extends ProtoMessage<StartStarFightLevelScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 5;</code>
     */
    private int retcode;

    /**
     * <pre>
     *  ehajmefgmgl
     * </pre>
     *
     * <code>optional uint32 difficulty = 9;</code>
     */
    private int difficulty;

    /**
     * <code>optional uint32 group_id = 10;</code>
     */
    private int groupId;

    /**
     * <code>optional .SceneBattleInfo battle_info = 8;</code>
     */
    private final SceneBattleInfoOuterClass.SceneBattleInfo battleInfo = SceneBattleInfoOuterClass.SceneBattleInfo.newInstance();

    private StartStarFightLevelScRsp() {
    }

    /**
     * <pre>
     *  Ffjlbfloacg
     * </pre>
     *
     * @return a new empty instance of {@code StartStarFightLevelScRsp}
     */
    public static StartStarFightLevelScRsp newInstance() {
      return new StartStarFightLevelScRsp();
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @return this
     */
    public StartStarFightLevelScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @param value the retcode to set
     * @return this
     */
    public StartStarFightLevelScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <pre>
     *  ehajmefgmgl
     * </pre>
     *
     * <code>optional uint32 difficulty = 9;</code>
     * @return whether the difficulty field is set
     */
    public boolean hasDifficulty() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     *  ehajmefgmgl
     * </pre>
     *
     * <code>optional uint32 difficulty = 9;</code>
     * @return this
     */
    public StartStarFightLevelScRsp clearDifficulty() {
      bitField0_ &= ~0x00000002;
      difficulty = 0;
      return this;
    }

    /**
     * <pre>
     *  ehajmefgmgl
     * </pre>
     *
     * <code>optional uint32 difficulty = 9;</code>
     * @return the difficulty
     */
    public int getDifficulty() {
      return difficulty;
    }

    /**
     * <pre>
     *  ehajmefgmgl
     * </pre>
     *
     * <code>optional uint32 difficulty = 9;</code>
     * @param value the difficulty to set
     * @return this
     */
    public StartStarFightLevelScRsp setDifficulty(final int value) {
      bitField0_ |= 0x00000002;
      difficulty = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @return this
     */
    public StartStarFightLevelScRsp clearGroupId() {
      bitField0_ &= ~0x00000004;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @param value the groupId to set
     * @return this
     */
    public StartStarFightLevelScRsp setGroupId(final int value) {
      bitField0_ |= 0x00000004;
      groupId = value;
      return this;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 8;</code>
     * @return whether the battleInfo field is set
     */
    public boolean hasBattleInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 8;</code>
     * @return this
     */
    public StartStarFightLevelScRsp clearBattleInfo() {
      bitField0_ &= ~0x00000008;
      battleInfo.clear();
      return this;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBattleInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo() {
      return battleInfo;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public SceneBattleInfoOuterClass.SceneBattleInfo getMutableBattleInfo() {
      bitField0_ |= 0x00000008;
      return battleInfo;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 8;</code>
     * @param value the battleInfo to set
     * @return this
     */
    public StartStarFightLevelScRsp setBattleInfo(
        final SceneBattleInfoOuterClass.SceneBattleInfo value) {
      bitField0_ |= 0x00000008;
      battleInfo.copyFrom(value);
      return this;
    }

    @Override
    public StartStarFightLevelScRsp copyFrom(final StartStarFightLevelScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        difficulty = other.difficulty;
        groupId = other.groupId;
        battleInfo.copyFrom(other.battleInfo);
      }
      return this;
    }

    @Override
    public StartStarFightLevelScRsp mergeFrom(final StartStarFightLevelScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasDifficulty()) {
        setDifficulty(other.difficulty);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasBattleInfo()) {
        getMutableBattleInfo().mergeFrom(other.battleInfo);
      }
      return this;
    }

    @Override
    public StartStarFightLevelScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      difficulty = 0;
      groupId = 0;
      battleInfo.clear();
      return this;
    }

    @Override
    public StartStarFightLevelScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      battleInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof StartStarFightLevelScRsp)) {
        return false;
      }
      StartStarFightLevelScRsp other = (StartStarFightLevelScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasDifficulty() || difficulty == other.difficulty)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasBattleInfo() || battleInfo.equals(other.battleInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(difficulty);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(battleInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(difficulty);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(battleInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public StartStarFightLevelScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // difficulty
            difficulty = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // battleInfo
            input.readMessage(battleInfo);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.difficulty, difficulty);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.battleInfo, battleInfo);
      }
      output.endObject();
    }

    @Override
    public StartStarFightLevelScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1829500859: {
            if (input.isAtField(FieldNames.difficulty)) {
              if (!input.trySkipNullValue()) {
                difficulty = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2053377414:
          case -749633579: {
            if (input.isAtField(FieldNames.battleInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(battleInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public StartStarFightLevelScRsp clone() {
      return new StartStarFightLevelScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static StartStarFightLevelScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new StartStarFightLevelScRsp(), data).checkInitialized();
    }

    public static StartStarFightLevelScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new StartStarFightLevelScRsp(), input).checkInitialized();
    }

    public static StartStarFightLevelScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new StartStarFightLevelScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating StartStarFightLevelScRsp messages
     */
    public static MessageFactory<StartStarFightLevelScRsp> getFactory() {
      return StartStarFightLevelScRspFactory.INSTANCE;
    }

    private enum StartStarFightLevelScRspFactory implements MessageFactory<StartStarFightLevelScRsp> {
      INSTANCE;

      @Override
      public StartStarFightLevelScRsp create() {
        return StartStarFightLevelScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName difficulty = FieldName.forField("difficulty");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName battleInfo = FieldName.forField("battleInfo", "battle_info");
    }
  }
}
