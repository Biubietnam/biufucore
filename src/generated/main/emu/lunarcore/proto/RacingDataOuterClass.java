// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RacingDataOuterClass {
  /**
   * Protobuf type {@code RacingData}
   */
  public static final class RacingData extends ProtoMessage<RacingData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 level = 6;</code>
     */
    private int level;

    /**
     * <code>optional uint32 LFNCPMMHLCO = 9;</code>
     */
    private int lFNCPMMHLCO;

    /**
     * <code>optional uint32 max_score = 10;</code>
     */
    private int maxScore;

    /**
     * <code>optional .MovieRacingType slot = 14;</code>
     */
    private int slot;

    private RacingData() {
    }

    /**
     * @return a new empty instance of {@code RacingData}
     */
    public static RacingData newInstance() {
      return new RacingData();
    }

    /**
     * <code>optional uint32 level = 6;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 level = 6;</code>
     * @return this
     */
    public RacingData clearLevel() {
      bitField0_ &= ~0x00000001;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 6;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 6;</code>
     * @param value the level to set
     * @return this
     */
    public RacingData setLevel(final int value) {
      bitField0_ |= 0x00000001;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 LFNCPMMHLCO = 9;</code>
     * @return whether the lFNCPMMHLCO field is set
     */
    public boolean hasLFNCPMMHLCO() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 LFNCPMMHLCO = 9;</code>
     * @return this
     */
    public RacingData clearLFNCPMMHLCO() {
      bitField0_ &= ~0x00000002;
      lFNCPMMHLCO = 0;
      return this;
    }

    /**
     * <code>optional uint32 LFNCPMMHLCO = 9;</code>
     * @return the lFNCPMMHLCO
     */
    public int getLFNCPMMHLCO() {
      return lFNCPMMHLCO;
    }

    /**
     * <code>optional uint32 LFNCPMMHLCO = 9;</code>
     * @param value the lFNCPMMHLCO to set
     * @return this
     */
    public RacingData setLFNCPMMHLCO(final int value) {
      bitField0_ |= 0x00000002;
      lFNCPMMHLCO = value;
      return this;
    }

    /**
     * <code>optional uint32 max_score = 10;</code>
     * @return whether the maxScore field is set
     */
    public boolean hasMaxScore() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 max_score = 10;</code>
     * @return this
     */
    public RacingData clearMaxScore() {
      bitField0_ &= ~0x00000004;
      maxScore = 0;
      return this;
    }

    /**
     * <code>optional uint32 max_score = 10;</code>
     * @return the maxScore
     */
    public int getMaxScore() {
      return maxScore;
    }

    /**
     * <code>optional uint32 max_score = 10;</code>
     * @param value the maxScore to set
     * @return this
     */
    public RacingData setMaxScore(final int value) {
      bitField0_ |= 0x00000004;
      maxScore = value;
      return this;
    }

    /**
     * <code>optional .MovieRacingType slot = 14;</code>
     * @return whether the slot field is set
     */
    public boolean hasSlot() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .MovieRacingType slot = 14;</code>
     * @return this
     */
    public RacingData clearSlot() {
      bitField0_ &= ~0x00000008;
      slot = 0;
      return this;
    }

    /**
     * <code>optional .MovieRacingType slot = 14;</code>
     * @return the slot
     */
    public MovieRacingTypeOuterClass.MovieRacingType getSlot() {
      return MovieRacingTypeOuterClass.MovieRacingType.forNumber(slot);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link RacingData#getSlot()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getSlotValue() {
      return slot;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link MovieRacingTypeOuterClass.MovieRacingType}. Setting an invalid value
     * can cause {@link RacingData#getSlot()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public RacingData setSlotValue(final int value) {
      bitField0_ |= 0x00000008;
      slot = value;
      return this;
    }

    /**
     * <code>optional .MovieRacingType slot = 14;</code>
     * @param value the slot to set
     * @return this
     */
    public RacingData setSlot(final MovieRacingTypeOuterClass.MovieRacingType value) {
      bitField0_ |= 0x00000008;
      slot = value.getNumber();
      return this;
    }

    @Override
    public RacingData copyFrom(final RacingData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        level = other.level;
        lFNCPMMHLCO = other.lFNCPMMHLCO;
        maxScore = other.maxScore;
        slot = other.slot;
      }
      return this;
    }

    @Override
    public RacingData mergeFrom(final RacingData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasLFNCPMMHLCO()) {
        setLFNCPMMHLCO(other.lFNCPMMHLCO);
      }
      if (other.hasMaxScore()) {
        setMaxScore(other.maxScore);
      }
      if (other.hasSlot()) {
        setSlotValue(other.slot);
      }
      return this;
    }

    @Override
    public RacingData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      level = 0;
      lFNCPMMHLCO = 0;
      maxScore = 0;
      slot = 0;
      return this;
    }

    @Override
    public RacingData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RacingData)) {
        return false;
      }
      RacingData other = (RacingData) o;
      return bitField0_ == other.bitField0_
        && (!hasLevel() || level == other.level)
        && (!hasLFNCPMMHLCO() || lFNCPMMHLCO == other.lFNCPMMHLCO)
        && (!hasMaxScore() || maxScore == other.maxScore)
        && (!hasSlot() || slot == other.slot);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(lFNCPMMHLCO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(maxScore);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 112);
        output.writeEnumNoTag(slot);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lFNCPMMHLCO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(maxScore);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(slot);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RacingData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 48: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // lFNCPMMHLCO
            lFNCPMMHLCO = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // maxScore
            maxScore = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // slot
            final int value = input.readInt32();
            if (MovieRacingTypeOuterClass.MovieRacingType.forNumber(value) != null) {
              slot = value;
              bitField0_ |= 0x00000008;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.lFNCPMMHLCO, lFNCPMMHLCO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.maxScore, maxScore);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeEnum(FieldNames.slot, slot, MovieRacingTypeOuterClass.MovieRacingType.converter());
      }
      output.endObject();
    }

    @Override
    public RacingData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1819881169: {
            if (input.isAtField(FieldNames.lFNCPMMHLCO)) {
              if (!input.trySkipNullValue()) {
                lFNCPMMHLCO = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 396519310:
          case -234837001: {
            if (input.isAtField(FieldNames.maxScore)) {
              if (!input.trySkipNullValue()) {
                maxScore = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3533310: {
            if (input.isAtField(FieldNames.slot)) {
              if (!input.trySkipNullValue()) {
                final MovieRacingTypeOuterClass.MovieRacingType value = input.readEnum(MovieRacingTypeOuterClass.MovieRacingType.converter());
                if (value != null) {
                  slot = value.getNumber();
                  bitField0_ |= 0x00000008;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RacingData clone() {
      return new RacingData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RacingData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RacingData(), data).checkInitialized();
    }

    public static RacingData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RacingData(), input).checkInitialized();
    }

    public static RacingData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RacingData(), input).checkInitialized();
    }

    /**
     * @return factory for creating RacingData messages
     */
    public static MessageFactory<RacingData> getFactory() {
      return RacingDataFactory.INSTANCE;
    }

    private enum RacingDataFactory implements MessageFactory<RacingData> {
      INSTANCE;

      @Override
      public RacingData create() {
        return RacingData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName level = FieldName.forField("level");

      static final FieldName lFNCPMMHLCO = FieldName.forField("LFNCPMMHLCO");

      static final FieldName maxScore = FieldName.forField("maxScore", "max_score");

      static final FieldName slot = FieldName.forField("slot");
    }
  }
}
