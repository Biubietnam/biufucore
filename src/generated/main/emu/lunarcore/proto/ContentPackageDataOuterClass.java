// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ContentPackageDataOuterClass {
  /**
   * Protobuf type {@code ContentPackageData}
   */
  public static final class ContentPackageData extends ProtoMessage<ContentPackageData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 AGJBMHBMFIM = 10;</code>
     */
    private int aGJBMHBMFIM;

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     */
    private final RepeatedMessage<ContentInfoOuterClass.ContentInfo> contentInfoList = RepeatedMessage.newEmptyInstance(ContentInfoOuterClass.ContentInfo.getFactory());

    private ContentPackageData() {
    }

    /**
     * @return a new empty instance of {@code ContentPackageData}
     */
    public static ContentPackageData newInstance() {
      return new ContentPackageData();
    }

    /**
     * <code>optional uint32 AGJBMHBMFIM = 10;</code>
     * @return whether the aGJBMHBMFIM field is set
     */
    public boolean hasAGJBMHBMFIM() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 AGJBMHBMFIM = 10;</code>
     * @return this
     */
    public ContentPackageData clearAGJBMHBMFIM() {
      bitField0_ &= ~0x00000001;
      aGJBMHBMFIM = 0;
      return this;
    }

    /**
     * <code>optional uint32 AGJBMHBMFIM = 10;</code>
     * @return the aGJBMHBMFIM
     */
    public int getAGJBMHBMFIM() {
      return aGJBMHBMFIM;
    }

    /**
     * <code>optional uint32 AGJBMHBMFIM = 10;</code>
     * @param value the aGJBMHBMFIM to set
     * @return this
     */
    public ContentPackageData setAGJBMHBMFIM(final int value) {
      bitField0_ |= 0x00000001;
      aGJBMHBMFIM = value;
      return this;
    }

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     * @return whether the contentInfoList field is set
     */
    public boolean hasContentInfoList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     * @return this
     */
    public ContentPackageData clearContentInfoList() {
      bitField0_ &= ~0x00000002;
      contentInfoList.clear();
      return this;
    }

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableContentInfoList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ContentInfoOuterClass.ContentInfo> getContentInfoList() {
      return contentInfoList;
    }

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ContentInfoOuterClass.ContentInfo> getMutableContentInfoList() {
      bitField0_ |= 0x00000002;
      return contentInfoList;
    }

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     * @param value the contentInfoList to add
     * @return this
     */
    public ContentPackageData addContentInfoList(final ContentInfoOuterClass.ContentInfo value) {
      bitField0_ |= 0x00000002;
      contentInfoList.add(value);
      return this;
    }

    /**
     * <code>repeated .ContentInfo content_info_list = 9;</code>
     * @param values the contentInfoList to add
     * @return this
     */
    public ContentPackageData addAllContentInfoList(
        final ContentInfoOuterClass.ContentInfo... values) {
      bitField0_ |= 0x00000002;
      contentInfoList.addAll(values);
      return this;
    }

    @Override
    public ContentPackageData copyFrom(final ContentPackageData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aGJBMHBMFIM = other.aGJBMHBMFIM;
        contentInfoList.copyFrom(other.contentInfoList);
      }
      return this;
    }

    @Override
    public ContentPackageData mergeFrom(final ContentPackageData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAGJBMHBMFIM()) {
        setAGJBMHBMFIM(other.aGJBMHBMFIM);
      }
      if (other.hasContentInfoList()) {
        getMutableContentInfoList().addAll(other.contentInfoList);
      }
      return this;
    }

    @Override
    public ContentPackageData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aGJBMHBMFIM = 0;
      contentInfoList.clear();
      return this;
    }

    @Override
    public ContentPackageData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      contentInfoList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ContentPackageData)) {
        return false;
      }
      ContentPackageData other = (ContentPackageData) o;
      return bitField0_ == other.bitField0_
        && (!hasAGJBMHBMFIM() || aGJBMHBMFIM == other.aGJBMHBMFIM)
        && (!hasContentInfoList() || contentInfoList.equals(other.contentInfoList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(aGJBMHBMFIM);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < contentInfoList.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(contentInfoList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aGJBMHBMFIM);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * contentInfoList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(contentInfoList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ContentPackageData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // aGJBMHBMFIM
            aGJBMHBMFIM = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // contentInfoList
            tag = input.readRepeatedMessage(contentInfoList, tag);
            bitField0_ |= 0x00000002;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.aGJBMHBMFIM, aGJBMHBMFIM);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.contentInfoList, contentInfoList);
      }
      output.endObject();
    }

    @Override
    public ContentPackageData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1708635802: {
            if (input.isAtField(FieldNames.aGJBMHBMFIM)) {
              if (!input.trySkipNullValue()) {
                aGJBMHBMFIM = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1693609467:
          case -989500087: {
            if (input.isAtField(FieldNames.contentInfoList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(contentInfoList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ContentPackageData clone() {
      return new ContentPackageData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ContentPackageData parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ContentPackageData(), data).checkInitialized();
    }

    public static ContentPackageData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ContentPackageData(), input).checkInitialized();
    }

    public static ContentPackageData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ContentPackageData(), input).checkInitialized();
    }

    /**
     * @return factory for creating ContentPackageData messages
     */
    public static MessageFactory<ContentPackageData> getFactory() {
      return ContentPackageDataFactory.INSTANCE;
    }

    private enum ContentPackageDataFactory implements MessageFactory<ContentPackageData> {
      INSTANCE;

      @Override
      public ContentPackageData create() {
        return ContentPackageData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aGJBMHBMFIM = FieldName.forField("AGJBMHBMFIM");

      static final FieldName contentInfoList = FieldName.forField("contentInfoList", "content_info_list");
    }
  }
}
